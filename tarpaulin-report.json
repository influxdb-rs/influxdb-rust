{"files":[{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","benches","client.rs"],"content":"use chrono::{DateTime, Utc};\nuse influxdb::Error;\nuse influxdb::InfluxDbWriteable;\nuse influxdb::{Client, ReadQuery};\nuse std::sync::Arc;\nuse std::time::Instant;\nuse tokio::sync::mpsc::unbounded_channel;\nuse tokio::sync::Semaphore;\n\n#[derive(InfluxDbWriteable, Clone)]\nstruct WeatherReading {\n    time: DateTime<Utc>,\n    humidity: i32,\n    #[influxdb(tag)]\n    wind_direction: String,\n}\n\n#[tokio::main]\nasync fn main() {\n    let db_name = \"bench\";\n    let url = \"http://localhost:8086\";\n    let number_of_total_requests = 20000;\n    let concurrent_requests = 1000;\n\n    let client = Client::new(url, db_name);\n    let concurrency_limit = Arc::new(Semaphore::new(concurrent_requests));\n\n    prepare_influxdb(&client, db_name).await;\n    let measurements = generate_measurements(number_of_total_requests);\n    let (tx, mut rx) = unbounded_channel::<Result<String, Error>>();\n\n    let start = Instant::now();\n    for m in measurements {\n        let permit = concurrency_limit.clone().acquire_owned().await;\n        let client_task = client.clone();\n        let tx_task = tx.clone();\n        tokio::spawn(async move {\n            let res = client_task.query(&m.into_query(\"weather\")).await;\n            let _ = tx_task.send(res);\n            drop(permit);\n        });\n    }\n    drop(tx);\n\n    let mut successful_count = 0;\n    let mut error_count = 0;\n    while let Some(res) = rx.recv().await {\n        if res.is_err() {\n            error_count += 1;\n        } else {\n            successful_count += 1;\n        }\n    }\n\n    let end = Instant::now();\n\n    println!(\n        \"Throughput: {:.1} request/s\",\n        1000000.0 * successful_count as f64 / (end - start).as_micros() as f64\n    );\n    println!(\n        \"{} successful requests, {} errors\",\n        successful_count, error_count\n    );\n}\n\nasync fn prepare_influxdb(client: &Client, db_name: &str) {\n    let create_db_stmt = format!(\"CREATE DATABASE {}\", db_name);\n    client\n        .query(&ReadQuery::new(create_db_stmt))\n        .await\n        .expect(\"failed to create database\");\n}\n\nfn generate_measurements(n: u64) -> Vec<WeatherReading> {\n    (0..n)\n        .collect::<Vec<u64>>()\n        .iter_mut()\n        .map(|_| WeatherReading {\n            time: Utc::now(),\n            humidity: 30,\n            wind_direction: String::from(\"north\"),\n        })\n        .collect()\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","client","mod.rs"],"content":"//! Client which can read and write data from InfluxDB.\n//!\n//! # Arguments\n//!\n//!  * `url`: The URL where InfluxDB is running (ex. `http://localhost:8086`).\n//!  * `database`: The Database against which queries and writes will be run.\n//!\n//! # Examples\n//!\n//! ```rust\n//! use influxdb::Client;\n//!\n//! let client = Client::new(\"http://localhost:8086\", \"test\");\n//!\n//! assert_eq!(client.database_name(), \"test\");\n//! ```\n\nuse futures_util::TryFutureExt;\nuse http::StatusCode;\n#[cfg(feature = \"reqwest\")]\nuse reqwest::{Client as HttpClient, RequestBuilder, Response as HttpResponse};\nuse std::collections::{BTreeMap, HashMap};\nuse std::fmt::{self, Debug, Formatter};\nuse std::sync::Arc;\n#[cfg(feature = \"surf\")]\nuse surf::{Client as HttpClient, RequestBuilder, Response as HttpResponse};\n\nuse crate::query::QueryType;\nuse crate::Error;\nuse crate::Query;\n\n#[derive(Clone)]\n/// Internal Representation of a Client\npub struct Client {\n    pub(crate) url: Arc<String>,\n    pub(crate) parameters: Arc<HashMap<&'static str, String>>,\n    pub(crate) token: Option<String>,\n    pub(crate) client: HttpClient,\n}\n\nstruct RedactPassword<'a>(&'a HashMap<&'static str, String>);\n\nimpl<'a> Debug for RedactPassword<'a> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n        let entries = self\n            .0\n            .iter()\n            .map(|(k, v)| match *k {\n                \"p\" => (*k, \"<redacted>\"),\n                _ => (*k, v.as_str()),\n            })\n            .collect::<BTreeMap<&'static str, &str>>();\n        f.debug_map().entries(entries.into_iter()).finish()\n    }\n}\n\nimpl Debug for Client {\n    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"Client\")\n            .field(\"url\", &self.url)\n            .field(\"parameters\", &RedactPassword(&self.parameters))\n            .finish_non_exhaustive()\n    }\n}\n\nimpl Client {\n    /// Instantiates a new [`Client`](crate::Client)\n    ///\n    /// # Arguments\n    ///\n    ///  * `url`: The URL where InfluxDB is running (ex. `http://localhost:8086`).\n    ///  * `database`: The Database against which queries and writes will be run.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::Client;\n    ///\n    /// let _client = Client::new(\"http://localhost:8086\", \"test\");\n    /// ```\n    #[must_use = \"Creating a client is pointless unless you use it\"]\n    pub fn new<S1, S2>(url: S1, database: S2) -> Self\n    where\n        S1: Into<String>,\n        S2: Into<String>,\n    {\n        let mut parameters = HashMap::<&str, String>::new();\n        parameters.insert(\"db\", database.into());\n        Client {\n            url: Arc::new(url.into()),\n            parameters: Arc::new(parameters),\n            client: HttpClient::new(),\n            token: None,\n        }\n    }\n\n    /// Add authentication/authorization information to [`Client`](crate::Client)\n    ///\n    /// # Arguments\n    ///\n    /// * username: The Username for InfluxDB.\n    /// * password: The Password for the user.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::Client;\n    ///\n    /// let _client = Client::new(\"http://localhost:9086\", \"test\").with_auth(\"admin\", \"password\");\n    /// ```\n    #[must_use = \"Creating a client is pointless unless you use it\"]\n    pub fn with_auth<S1, S2>(mut self, username: S1, password: S2) -> Self\n    where\n        S1: Into<String>,\n        S2: Into<String>,\n    {\n        let mut with_auth = self.parameters.as_ref().clone();\n        with_auth.insert(\"u\", username.into());\n        with_auth.insert(\"p\", password.into());\n        self.parameters = Arc::new(with_auth);\n        self\n    }\n\n    /// Replaces the HTTP Client\n    #[must_use = \"Creating a client is pointless unless you use it\"]\n    pub fn with_http_client(mut self, http_client: HttpClient) -> Self {\n        self.client = http_client;\n        self\n    }\n\n    /// Add authorization token to [`Client`](crate::Client)\n    ///\n    /// This is designed for influxdb 2.0's backward-compatible API which\n    /// requires authrozation by default. You can create such token from\n    /// console of influxdb 2.0 .\n    pub fn with_token<S>(mut self, token: S) -> Self\n    where\n        S: Into<String>,\n    {\n        self.token = Some(token.into());\n        self\n    }\n\n    /// Returns the name of the database the client is using\n    pub fn database_name(&self) -> &str {\n        // safe to unwrap: we always set the database name in `Self::new`\n        self.parameters.get(\"db\").unwrap()\n    }\n\n    /// Returns the URL of the InfluxDB installation the client is using\n    pub fn database_url(&self) -> &str {\n        &self.url\n    }\n\n    /// Pings the InfluxDB Server\n    ///\n    /// Returns a tuple of build type and version number\n    pub async fn ping(&self) -> Result<(String, String), Error> {\n        let url = &format!(\"{}/ping\", self.url);\n        let res = self\n            .client\n            .get(url)\n            .send()\n            .await\n            .map_err(|err| Error::ProtocolError {\n                error: format!(\"{}\", err),\n            })?;\n\n        const BUILD_HEADER: &str = \"X-Influxdb-Build\";\n        const VERSION_HEADER: &str = \"X-Influxdb-Version\";\n\n        #[cfg(feature = \"reqwest\")]\n        let (build, version) = {\n            let hdrs = res.headers();\n            (\n                hdrs.get(BUILD_HEADER).and_then(|value| value.to_str().ok()),\n                hdrs.get(VERSION_HEADER)\n                    .and_then(|value| value.to_str().ok()),\n            )\n        };\n\n        #[cfg(feature = \"surf\")]\n        let build = res.header(BUILD_HEADER).map(|value| value.as_str());\n        #[cfg(feature = \"surf\")]\n        let version = res.header(VERSION_HEADER).map(|value| value.as_str());\n\n        Ok((build.unwrap().to_owned(), version.unwrap().to_owned()))\n    }\n\n    /// Sends a [`ReadQuery`](crate::ReadQuery) or [`WriteQuery`](crate::WriteQuery) to the InfluxDB Server.\n    ///\n    /// A version capable of parsing the returned string is available under the [serde_integration](crate::integrations::serde_integration)\n    ///\n    /// # Arguments\n    ///\n    ///  * `q`: Query of type [`ReadQuery`](crate::ReadQuery) or [`WriteQuery`](crate::WriteQuery)\n    ///\n    /// # Examples\n    ///\n    /// ```rust,no_run\n    /// use influxdb::{Client, Query, Timestamp};\n    /// use influxdb::InfluxDbWriteable;\n    /// use std::time::{SystemTime, UNIX_EPOCH};\n    ///\n    /// # #[async_std::main]\n    /// # async fn main() -> Result<(), influxdb::Error> {\n    /// let start = SystemTime::now();\n    /// let since_the_epoch = start\n    ///   .duration_since(UNIX_EPOCH)\n    ///   .expect(\"Time went backwards\")\n    ///   .as_millis();\n    ///\n    /// let client = Client::new(\"http://localhost:8086\", \"test\");\n    /// let query = Timestamp::Milliseconds(since_the_epoch)\n    ///     .into_query(\"weather\")\n    ///     .add_field(\"temperature\", 82);\n    /// let results = client.query(query).await?;\n    ///\n    /// # Ok(())\n    /// # }\n    /// ```\n    /// # Errors\n    ///\n    /// If the function can not finish the query,\n    /// a [`Error`] variant will be returned.\n    ///\n    /// [`Error`]: enum.Error.html\n    pub async fn query<Q>(&self, q: Q) -> Result<String, Error>\n    where\n        Q: Query,\n    {\n        let query = q.build().map_err(|err| Error::InvalidQueryError {\n            error: err.to_string(),\n        })?;\n\n        let mut parameters = self.parameters.as_ref().clone();\n        let request_builder = match q.get_type() {\n            QueryType::ReadQuery => {\n                let read_query = query.get();\n                let url = &format!(\"{}/query\", &self.url);\n                parameters.insert(\"q\", read_query.clone());\n\n                if read_query.contains(\"SELECT\") || read_query.contains(\"SHOW\") {\n                    self.client.get(url).query(&parameters)\n                } else {\n                    self.client.post(url).query(&parameters)\n                }\n            }\n            QueryType::WriteQuery(precision) => {\n                let url = &format!(\"{}/write\", &self.url);\n                let mut parameters = self.parameters.as_ref().clone();\n                parameters.insert(\"precision\", precision);\n\n                self.client.post(url).body(query.get()).query(&parameters)\n            }\n        };\n\n        #[cfg(feature = \"surf\")]\n        let request_builder = request_builder.map_err(|err| Error::UrlConstructionError {\n            error: err.to_string(),\n        })?;\n\n        let res = self\n            .auth_if_needed(request_builder)\n            .send()\n            .map_err(|err| Error::ConnectionError {\n                error: err.to_string(),\n            })\n            .await?;\n        check_status(&res)?;\n\n        #[cfg(feature = \"reqwest\")]\n        let body = res.text();\n        #[cfg(feature = \"surf\")]\n        let mut res = res;\n        #[cfg(feature = \"surf\")]\n        let body = res.body_string();\n\n        let s = body.await.map_err(|_| Error::DeserializationError {\n            error: \"response could not be converted to UTF-8\".to_string(),\n        })?;\n\n        // todo: improve error parsing without serde\n        if s.contains(\"\\\"error\\\"\") {\n            return Err(Error::DatabaseError {\n                error: format!(\"influxdb error: \\\"{}\\\"\", s),\n            });\n        }\n\n        Ok(s)\n    }\n\n    fn auth_if_needed(&self, rb: RequestBuilder) -> RequestBuilder {\n        if let Some(ref token) = self.token {\n            rb.header(\"Authorization\", format!(\"Token {}\", token))\n        } else {\n            rb\n        }\n    }\n}\n\npub(crate) fn check_status(res: &HttpResponse) -> Result<(), Error> {\n    let status = res.status();\n    if status == StatusCode::UNAUTHORIZED.as_u16() {\n        Err(Error::AuthorizationError)\n    } else if status == StatusCode::FORBIDDEN.as_u16() {\n        Err(Error::AuthenticationError)\n    } else {\n        Ok(())\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::Client;\n    use indoc::indoc;\n\n    #[test]\n    fn test_client_debug_redacted_password() {\n        let client = Client::new(\"https://localhost:8086\", \"db\").with_auth(\"user\", \"pass\");\n        let actual = format!(\"{:#?}\", client);\n        let expected = indoc! { r#\"\n            Client {\n                url: \"https://localhost:8086\",\n                parameters: {\n                    \"db\": \"db\",\n                    \"p\": \"<redacted>\",\n                    \"u\": \"user\",\n                },\n                ..\n            }\n        \"# };\n        assert_eq!(actual.trim(), expected.trim());\n    }\n\n    #[test]\n    fn test_fn_database() {\n        let client = Client::new(\"http://localhost:8068\", \"database\");\n        assert_eq!(client.database_name(), \"database\");\n        assert_eq!(client.database_url(), \"http://localhost:8068\");\n    }\n\n    #[test]\n    fn test_with_auth() {\n        let client = Client::new(\"http://localhost:8068\", \"database\");\n        assert_eq!(client.parameters.len(), 1);\n        assert_eq!(client.parameters.get(\"db\").unwrap(), \"database\");\n\n        let with_auth = client.with_auth(\"username\", \"password\");\n        assert_eq!(with_auth.parameters.len(), 3);\n        assert_eq!(with_auth.parameters.get(\"db\").unwrap(), \"database\");\n        assert_eq!(with_auth.parameters.get(\"u\").unwrap(), \"username\");\n        assert_eq!(with_auth.parameters.get(\"p\").unwrap(), \"password\");\n\n        let client = Client::new(\"http://localhost:8068\", \"database\");\n        let with_auth = client.with_token(\"token\");\n        assert_eq!(with_auth.parameters.len(), 1);\n        assert_eq!(with_auth.parameters.get(\"db\").unwrap(), \"database\");\n        assert_eq!(with_auth.token.unwrap(), \"token\");\n    }\n}\n","traces":[{"line":44,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":50,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":53,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":58,"address":[1546912],"length":1,"stats":{"Line":1},"fn_name":"fmt"},{"line":59,"address":[1546930,1546961,1547019],"length":1,"stats":{"Line":3},"fn_name":null},{"line":60,"address":[1546957],"length":1,"stats":{"Line":1},"fn_name":null},{"line":61,"address":[1547000],"length":1,"stats":{"Line":1},"fn_name":null},{"line":82,"address":[1547072,1547757,1547717],"length":1,"stats":{"Line":6},"fn_name":"new<&str, &str>"},{"line":87,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":88,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":90,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":91,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":92,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":112,"address":[1548438,1548399,1547776],"length":1,"stats":{"Line":3},"fn_name":"with_auth<&str, &str>"},{"line":117,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":118,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":119,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":120,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":121,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":126,"address":[1548464,1548589],"length":1,"stats":{"Line":0},"fn_name":"with_http_client"},{"line":127,"address":[1548565,1548500],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[1548569],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[1548624,1548879],"length":1,"stats":{"Line":1},"fn_name":"with_token<&str>"},{"line":140,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":145,"address":[1548912],"length":1,"stats":{"Line":1},"fn_name":"database_name"},{"line":147,"address":[1548917],"length":1,"stats":{"Line":1},"fn_name":null},{"line":151,"address":[1548976],"length":1,"stats":{"Line":1},"fn_name":"database_url"},{"line":152,"address":[1548981],"length":1,"stats":{"Line":1},"fn_name":null},{"line":158,"address":[1549031,1549008],"length":1,"stats":{"Line":4},"fn_name":"ping"},{"line":159,"address":[1945006,1944767],"length":1,"stats":{"Line":2},"fn_name":null},{"line":160,"address":[1945141,1945843,1945345,1945486,1945607,1945204],"length":1,"stats":{"Line":5},"fn_name":null},{"line":164,"address":[1945247,1944821,1945376,1945522],"length":1,"stats":{"Line":4},"fn_name":null},{"line":165,"address":[1946951,1947009,1946752],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":166,"address":[1946779,1946847],"length":1,"stats":{"Line":0},"fn_name":null},{"line":173,"address":[1946227],"length":1,"stats":{"Line":1},"fn_name":null},{"line":174,"address":[1945761,1946047],"length":1,"stats":{"Line":2},"fn_name":null},{"line":176,"address":[1946055,1947040,1947049],"length":1,"stats":{"Line":3},"fn_name":"{closure#1}"},{"line":177,"address":[1946129],"length":1,"stats":{"Line":1},"fn_name":null},{"line":178,"address":[1947097,1947088],"length":1,"stats":{"Line":2},"fn_name":"{closure#2}"},{"line":187,"address":[1946455,1946301,1946388],"length":1,"stats":{"Line":2},"fn_name":null},{"line":228,"address":[1800643,1805971,1800448,1800352],"length":1,"stats":{"Line":10},"fn_name":"query<influxdb::query::read_query::ReadQuery>"},{"line":232,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":233,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":236,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":237,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":238,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":240,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":241,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":243,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":244,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":246,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":249,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":250,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":251,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":252,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":254,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":259,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":260,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":263,"address":[],"length":0,"stats":{"Line":23},"fn_name":null},{"line":264,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":266,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":267,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":269,"address":[],"length":0,"stats":{"Line":26},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":273,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":275,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":277,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":279,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":280,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":284,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":285,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":286,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":290,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":293,"address":[1549072,1549489,1549458],"length":1,"stats":{"Line":3},"fn_name":"auth_if_needed"},{"line":294,"address":[1549107,1549453],"length":1,"stats":{"Line":3},"fn_name":null},{"line":295,"address":[1549155,1549240,1549473],"length":1,"stats":{"Line":0},"fn_name":null},{"line":297,"address":[1549217],"length":1,"stats":{"Line":3},"fn_name":null},{"line":302,"address":[1549504],"length":1,"stats":{"Line":2},"fn_name":"check_status"},{"line":303,"address":[1549536],"length":1,"stats":{"Line":2},"fn_name":null},{"line":304,"address":[1549546],"length":1,"stats":{"Line":2},"fn_name":null},{"line":305,"address":[1549625],"length":1,"stats":{"Line":1},"fn_name":null},{"line":306,"address":[1549582,1549691,1549742],"length":1,"stats":{"Line":5},"fn_name":null},{"line":307,"address":[1549698],"length":1,"stats":{"Line":1},"fn_name":null},{"line":309,"address":[1549684],"length":1,"stats":{"Line":2},"fn_name":null}],"covered":74,"coverable":90},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","error.rs"],"content":"//! Errors that might happen in the crate\n\nuse thiserror::Error;\n\n#[derive(Debug, Error)]\npub enum Error {\n    #[error(\"query is invalid: {error}\")]\n    /// Error happens when a query is invalid\n    InvalidQueryError { error: String },\n\n    #[error(\"Failed to build URL: {error}\")]\n    /// Error happens when a query is invalid\n    UrlConstructionError { error: String },\n\n    #[error(\"http protocol error: {error}\")]\n    /// Error happens when a query is invalid\n    ProtocolError { error: String },\n\n    #[error(\"http protocol error: {error}\")]\n    /// Error happens when Serde cannot deserialize the response\n    DeserializationError { error: String },\n\n    #[error(\"InfluxDB encountered the following error: {error}\")]\n    /// Error which has happened inside InfluxDB\n    DatabaseError { error: String },\n\n    #[error(\"authentication error. No or incorrect credentials\")]\n    /// Error happens when no or incorrect credentials are used. `HTTP 401 Unauthorized`\n    AuthenticationError,\n\n    #[error(\"authorization error. User not authorized\")]\n    /// Error happens when the supplied user is not authorized. `HTTP 403 Forbidden`\n    AuthorizationError,\n\n    #[error(\"connection error: {error}\")]\n    /// Error happens when HTTP request fails\n    ConnectionError { error: String },\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","integrations","serde_integration","de.rs"],"content":"use super::{Series, TaggedSeries};\nuse serde::de::{\n    value, DeserializeSeed, Deserializer, Error, IntoDeserializer, MapAccess, SeqAccess, Visitor,\n};\nuse serde::Deserialize;\nuse std::fmt;\nuse std::marker::PhantomData;\n\n// Based on https://serde.rs/deserialize-struct.html\nimpl<'de, T> Deserialize<'de> for Series<T>\nwhere\n    T: Deserialize<'de>,\n{\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        // Field name deserializer\n        #[derive(Deserialize)]\n        #[serde(field_identifier, rename_all = \"lowercase\")]\n        enum Field {\n            Name,\n            Columns,\n            Values,\n        }\n\n        struct SeriesVisitor<T> {\n            _inner_type: PhantomData<T>,\n        }\n\n        impl<'de, T> Visitor<'de> for SeriesVisitor<T>\n        where\n            T: Deserialize<'de>,\n        {\n            type Value = Series<T>;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"struct Series\")\n            }\n\n            fn visit_map<V>(self, mut map: V) -> Result<Series<T>, V::Error>\n            where\n                V: MapAccess<'de>,\n            {\n                let mut name = None;\n                let mut columns: Option<Vec<String>> = None;\n                let mut values: Option<Vec<T>> = None;\n                while let Some(key) = map.next_key()? {\n                    match key {\n                        Field::Name => {\n                            if name.is_some() {\n                                return Err(Error::duplicate_field(\"name\"));\n                            }\n                            name = Some(map.next_value()?);\n                        }\n                        Field::Columns => {\n                            if columns.is_some() {\n                                return Err(Error::duplicate_field(\"columns\"));\n                            }\n                            columns = Some(map.next_value()?);\n                        }\n                        Field::Values => {\n                            if values.is_some() {\n                                return Err(Error::duplicate_field(\"values\"));\n                            }\n                            // Error out if \"values\" is encountered before \"columns\"\n                            // Hopefully, InfluxDB never does this.\n                            if columns.is_none() {\n                                return Err(Error::custom(\n                                    \"series values encountered before columns\",\n                                ));\n                            }\n                            // Deserialize using a HeaderVec deserializer\n                            // seeded with the headers from the \"columns\" field\n                            values = Some(map.next_value_seed(HeaderVec::<T> {\n                                header: columns.as_ref().unwrap(),\n                                _inner_type: PhantomData,\n                            })?);\n                        }\n                    }\n                }\n                let name = name.ok_or_else(|| Error::missing_field(\"name\"))?;\n                let values = values.unwrap_or_default();\n\n                Ok(Series { name, values })\n            }\n        }\n\n        const FIELDS: &[&str] = &[\"name\", \"values\"];\n        deserializer.deserialize_struct(\n            \"Series\",\n            FIELDS,\n            SeriesVisitor::<T> {\n                _inner_type: PhantomData,\n            },\n        )\n    }\n}\n\n// Based on https://serde.rs/deserialize-struct.html\nimpl<'de, TAG, T> Deserialize<'de> for TaggedSeries<TAG, T>\nwhere\n    TAG: Deserialize<'de>,\n    T: Deserialize<'de>,\n{\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        // Field name deserializer\n        #[derive(Deserialize)]\n        #[serde(field_identifier, rename_all = \"lowercase\")]\n        enum Field {\n            Name,\n            Tags,\n            Columns,\n            Values,\n        }\n\n        struct SeriesVisitor<TAG, T> {\n            _tag_type: PhantomData<TAG>,\n            _value_type: PhantomData<T>,\n        }\n\n        impl<'de, TAG, T> Visitor<'de> for SeriesVisitor<TAG, T>\n        where\n            TAG: Deserialize<'de>,\n            T: Deserialize<'de>,\n        {\n            type Value = TaggedSeries<TAG, T>;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"struct TaggedSeries\")\n            }\n\n            fn visit_map<V>(self, mut map: V) -> Result<TaggedSeries<TAG, T>, V::Error>\n            where\n                V: MapAccess<'de>,\n            {\n                let mut name = None;\n                let mut tags: Option<TAG> = None;\n                let mut columns: Option<Vec<String>> = None;\n                let mut values: Option<Vec<T>> = None;\n                while let Some(key) = map.next_key()? {\n                    match key {\n                        Field::Name => {\n                            if name.is_some() {\n                                return Err(Error::duplicate_field(\"name\"));\n                            }\n                            name = Some(map.next_value()?);\n                        }\n                        Field::Tags => {\n                            if tags.is_some() {\n                                return Err(Error::duplicate_field(\"tags\"));\n                            }\n                            tags = Some(map.next_value()?);\n                        }\n                        Field::Columns => {\n                            if columns.is_some() {\n                                return Err(Error::duplicate_field(\"columns\"));\n                            }\n                            columns = Some(map.next_value()?);\n                        }\n                        Field::Values => {\n                            if values.is_some() {\n                                return Err(Error::duplicate_field(\"values\"));\n                            }\n                            // Error out if \"values\" is encountered before \"columns\"\n                            // Hopefully, InfluxDB never does this.\n                            if columns.is_none() {\n                                return Err(Error::custom(\n                                    \"series values encountered before columns\",\n                                ));\n                            }\n                            // Deserialize using a HeaderVec deserializer\n                            // seeded with the headers from the \"columns\" field\n                            values = Some(map.next_value_seed(HeaderVec::<T> {\n                                header: columns.as_ref().unwrap(),\n                                _inner_type: PhantomData,\n                            })?);\n                        }\n                    }\n                }\n                let name = name.ok_or_else(|| Error::missing_field(\"name\"))?;\n                let tags = tags.ok_or_else(|| Error::missing_field(\"tags\"))?;\n                let values = values.ok_or_else(|| Error::missing_field(\"values\"))?;\n                Ok(TaggedSeries { name, tags, values })\n            }\n        }\n\n        const FIELDS: &[&str] = &[\"name\", \"tags\", \"values\"];\n        deserializer.deserialize_struct(\n            \"TaggedSeries\",\n            FIELDS,\n            SeriesVisitor::<TAG, T> {\n                _tag_type: PhantomData,\n                _value_type: PhantomData,\n            },\n        )\n    }\n}\n\n// Deserializer that takes a header as a seed\n// and deserializes an array of arrays into a\n// Vec of map-like values using the header as\n// keys and the values as values.\nstruct HeaderVec<'h, T> {\n    header: &'h [String],\n    _inner_type: PhantomData<T>,\n}\n\nimpl<'de, 'h, T> DeserializeSeed<'de> for HeaderVec<'h, T>\nwhere\n    T: Deserialize<'de>,\n{\n    type Value = Vec<T>;\n\n    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct HeaderVecVisitor<'h, T> {\n            header: &'h [String],\n            _inner_type: PhantomData<T>,\n        }\n        impl<'de, 'h, T> Visitor<'de> for HeaderVecVisitor<'h, T>\n        where\n            T: Deserialize<'de>,\n        {\n            type Value = Vec<T>;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                write!(formatter, \"an array of arrays\")\n            }\n\n            fn visit_seq<A>(self, mut seq: A) -> Result<Vec<T>, A::Error>\n            where\n                A: SeqAccess<'de>,\n            {\n                let mut vec = Vec::new();\n\n                while let Some(v) = seq.next_element_seed(RowWithHeader {\n                    header: self.header,\n                    _inner_type: PhantomData,\n                })? {\n                    vec.push(v);\n                }\n\n                Ok(vec)\n            }\n        }\n        deserializer.deserialize_seq(HeaderVecVisitor {\n            header: self.header,\n            _inner_type: PhantomData,\n        })\n    }\n}\n\n// Deserializer that takes a header as a seed\n// and deserializes an array into a map-like\n// value using the header as keys and the values\n// as values.\nstruct RowWithHeader<'h, T> {\n    header: &'h [String],\n    _inner_type: PhantomData<T>,\n}\n\nimpl<'de, 'h, T> DeserializeSeed<'de> for RowWithHeader<'h, T>\nwhere\n    T: Deserialize<'de>,\n{\n    type Value = T;\n\n    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct RowWithHeaderVisitor<'h, T> {\n            header: &'h [String],\n            _inner: PhantomData<fn() -> T>,\n        }\n\n        impl<'de, 'h, T> Visitor<'de> for RowWithHeaderVisitor<'h, T>\n        where\n            T: Deserialize<'de>,\n        {\n            type Value = T;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"array\")\n            }\n\n            fn visit_seq<A>(self, seq: A) -> Result<T, A::Error>\n            where\n                A: SeqAccess<'de>,\n            {\n                // `MapAccessDeserializer` is a wrapper that turns a `MapAccess`\n                // into a `Deserializer`, allowing it to be used as the input to T's\n                // `Deserialize` implementation. T then deserializes itself using\n                // the entries from the map visitor.\n                Deserialize::deserialize(value::MapAccessDeserializer::new(HeaderMapAccess {\n                    header: self.header,\n                    field: 0,\n                    data: seq,\n                }))\n            }\n        }\n\n        deserializer.deserialize_seq(RowWithHeaderVisitor {\n            header: self.header,\n            _inner: PhantomData,\n        })\n    }\n}\n\n// MapAccess implementation that holds a reference to\n// the header for keys and a serde sequence for values.\n// When asked for a key, it returns the next header and\n// advances its header field index. When asked for a value,\n// it tries to deserialize the next element in the serde\n// sequence into the desired type, and returns an error\n// if no element is returned (the sequence is exhausted).\nstruct HeaderMapAccess<'h, A> {\n    header: &'h [String],\n    field: usize,\n    data: A,\n}\n\nimpl<'de, 'h, A> MapAccess<'de> for HeaderMapAccess<'h, A>\nwhere\n    A: SeqAccess<'de>,\n{\n    type Error = <A as SeqAccess<'de>>::Error;\n\n    fn next_key_seed<K: DeserializeSeed<'de>>(\n        &mut self,\n        seed: K,\n    ) -> Result<Option<K::Value>, Self::Error> {\n        let field = match self.header.get(self.field) {\n            None => return Ok(None),\n            Some(field) => field,\n        };\n        self.field += 1;\n        seed.deserialize(field.clone().into_deserializer())\n            .map(Some)\n    }\n\n    fn next_value_seed<K: DeserializeSeed<'de>>(\n        &mut self,\n        seed: K,\n    ) -> Result<K::Value, Self::Error> {\n        match self.data.next_element_seed(seed)? {\n            Some(value) => Ok(value),\n            None => Err(Error::custom(\"next_value_seed called but no value\")),\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::Series;\n    use std::borrow::Cow;\n    use std::collections::HashMap;\n\n    const TEST_DATA: &str = r#\"\n    {\n        \"name\": \"series_name\",\n        \"columns\": [\"foo\", \"bar\"],\n        \"values\": [\n            [\"foo_a\", \"bar_a\"],\n            [\"foo_b\", \"bar_b\"]\n        ]\n    }\n    \"#;\n\n    // we can derive all the impls we want here\n    #[derive(Debug, PartialEq, Eq)]\n    struct EqSeries<T> {\n        pub name: String,\n        pub values: Vec<T>,\n    }\n\n    impl<T> From<Series<T>> for EqSeries<T> {\n        fn from(Series { name, values }: Series<T>) -> Self {\n            EqSeries { name, values }\n        }\n    }\n\n    #[test]\n    fn test_deserialize_cow() {\n        // Unfortunately, Cow is not automatically borrowed,\n        // so this is basically equivalent to String, String\n        let result = serde_json::from_str::<Series<HashMap<Cow<str>, Cow<str>>>>(TEST_DATA);\n        assert!(result.is_ok());\n        assert_eq!(\n            EqSeries::from(result.unwrap()),\n            EqSeries {\n                name: \"series_name\".into(),\n                values: vec![\n                    {\n                        let mut h = std::collections::HashMap::new();\n                        h.insert(\"foo\".into(), \"foo_a\".into());\n                        h.insert(\"bar\".into(), \"bar_a\".into());\n                        h\n                    },\n                    {\n                        let mut h = std::collections::HashMap::new();\n                        h.insert(\"foo\".into(), \"foo_b\".into());\n                        h.insert(\"bar\".into(), \"bar_b\".into());\n                        h\n                    },\n                ],\n            },\n        );\n    }\n\n    #[test]\n    fn test_deserialize_borrowed() {\n        use serde::Deserialize;\n\n        // Deserializing a string that cannot be passed through\n        // without escaping will result in an error like this:\n        // `invalid type: string \"\\n\", expected a borrowed string at line 6 column 43`\n        // but if it doesn't need escaping it's fine.\n        #[derive(Deserialize, Debug, PartialEq, Eq)]\n        struct BorrowingStruct<'a> {\n            foo: &'a str,\n            bar: &'a str,\n        }\n\n        let result = serde_json::from_str::<Series<BorrowingStruct>>(TEST_DATA);\n        assert!(result.is_ok(), \"{}\", result.unwrap_err());\n        assert_eq!(\n            EqSeries::from(result.unwrap()),\n            EqSeries {\n                name: \"series_name\".into(),\n                values: vec![\n                    BorrowingStruct {\n                        foo: \"foo_a\",\n                        bar: \"bar_a\",\n                    },\n                    BorrowingStruct {\n                        foo: \"foo_b\",\n                        bar: \"bar_b\",\n                    },\n                ],\n            },\n        );\n    }\n}\n","traces":[{"line":14,"address":[1568320,1568384],"length":1,"stats":{"Line":8},"fn_name":"deserialize<std::collections::hash::map::HashMap<alloc::borrow::Cow<str>, alloc::borrow::Cow<str>, std::collections::hash::map::RandomState>, &mut serde_json::de::Deserializer<serde_json::read::StrRead>>"},{"line":31,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":32},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":50,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":51,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":52,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":56,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":57,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":58,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":62,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":64,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":69,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":76,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":77,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":83,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":85,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":90,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":92,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[2102688],"length":1,"stats":{"Line":1},"fn_name":"deserialize<integration_tests::test_json_query_tagged::{async_block#0}::{closure#0}::{async_block#0}::WeatherMeta, integration_tests::test_json_query_tagged::{async_block#0}::{closure#0}::{async_block#0}::Weather, serde_json::value::Value>"},{"line":125,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":140,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":142,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":143,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":144,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":145,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":146,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":147,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":148,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":150,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":152,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":153,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":154,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":158,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":159,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":160,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":162,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":164,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":166,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":171,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":172,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":178,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":179,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":184,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":185,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":186,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":187,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":192,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":194,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":195,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":196,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[1635040,1635136],"length":1,"stats":{"Line":9},"fn_name":"deserialize<std::collections::hash::map::HashMap<alloc::borrow::Cow<str>, alloc::borrow::Cow<str>, std::collections::hash::map::RandomState>, &mut serde_json::de::Deserializer<serde_json::read::StrRead>>"},{"line":226,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":230,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":232,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":233,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":236,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":240,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":242,"address":[],"length":0,"stats":{"Line":36},"fn_name":null},{"line":243,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":244,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":246,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":249,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":252,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":253,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":254,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":274,"address":[1636816,1636720],"length":1,"stats":{"Line":9},"fn_name":"deserialize<influxdb::integrations::serde_integration::de::tests::test_deserialize_borrowed::BorrowingStruct, &mut serde_json::de::Deserializer<serde_json::read::StrRead>>"},{"line":283,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":287,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":289,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":290,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":293,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":301,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":302,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":303,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":304,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":309,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":310,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":311,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":335,"address":[1637328,1638260,1637753,1637792],"length":1,"stats":{"Line":9},"fn_name":"next_key_seed<serde_json::de::SeqAccess<serde_json::read::StrRead>, core::marker::PhantomData<influxdb::integrations::serde_integration::de::tests::test_deserialize_borrowed::_::{impl#0}::deserialize::__Field>>"},{"line":339,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":340,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":341,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":343,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":344,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":345,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":348,"address":[1638304,1638544,1638992],"length":1,"stats":{"Line":8},"fn_name":"next_value_seed<serde_json::de::SeqAccess<serde_json::read::StrRead>, core::marker::PhantomData<&str>>"},{"line":352,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":353,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":354,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":71,"coverable":116},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","integrations","serde_integration","mod.rs"],"content":"//! Serde Integration for InfluxDB. Provides deserialization of query returns.\n//!\n//! When querying multiple series in the same query (e.g. with a regex query), it might be desirable to flat map\n//! the resulting series into a single `Vec` like so. The example assumes, that there are weather readings in multiple\n//! series named `weather_<city_name>` (e.g. `weather_berlin`, or `weather_london`). Since we're using a Regex query,\n//! we don't actually know which series will be returned. To assign the city name to the series, we can use the series\n//! `name`, InfluxDB provides alongside query results.\n//!\n//! ```rust,no_run\n//! use influxdb::{Client, Query};\n//! use serde::Deserialize;\n//!\n//! #[derive(Deserialize)]\n//! struct WeatherWithoutCityName {\n//!     temperature: i32,\n//! }\n//!\n//! #[derive(Deserialize)]\n//! struct Weather {\n//!     city_name: String,\n//!     weather: WeatherWithoutCityName,\n//! }\n//!\n//! # #[async_std::main]\n//! # async fn main() -> Result<(), influxdb::Error> {\n//! let client = Client::new(\"http://localhost:8086\", \"test\");\n//! let query = Query::raw_read_query(\n//!     \"SELECT temperature FROM /weather_[a-z]*$/ WHERE time > now() - 1m ORDER BY DESC\",\n//! );\n//! let mut db_result = client.json_query(query).await?;\n//! let _result = db_result\n//!     .deserialize_next::<WeatherWithoutCityName>()?\n//!     .series\n//!     .into_iter()\n//!     .map(|mut city_series| {\n//!         let city_name =\n//!             city_series.name.split(\"_\").collect::<Vec<&str>>().remove(2);\n//!         Weather {\n//!             weather: city_series.values.remove(0),\n//!             city_name: city_name.to_string(),\n//!         }\n//!     })\n//!     .collect::<Vec<Weather>>();\n//! # Ok(())\n//! # }\n//! ```\n\nmod de;\n\nuse serde::{de::DeserializeOwned, Deserialize};\n\nuse crate::{client::check_status, Client, Error, Query, ReadQuery};\n\n#[derive(Deserialize)]\n#[doc(hidden)]\nstruct _DatabaseError {\n    error: String,\n}\n\n#[derive(Deserialize, Debug)]\n#[doc(hidden)]\npub struct DatabaseQueryResult {\n    pub results: Vec<serde_json::Value>,\n}\n\nimpl DatabaseQueryResult {\n    pub fn deserialize_next<T: 'static>(&mut self) -> Result<Return<T>, Error>\n    where\n        T: DeserializeOwned + Send,\n    {\n        serde_json::from_value::<Return<T>>(self.results.remove(0)).map_err(|err| {\n            Error::DeserializationError {\n                error: format!(\"could not deserialize: {}\", err),\n            }\n        })\n    }\n\n    pub fn deserialize_next_tagged<TAG, T: 'static>(\n        &mut self,\n    ) -> Result<TaggedReturn<TAG, T>, Error>\n    where\n        TAG: DeserializeOwned + Send,\n        T: DeserializeOwned + Send,\n    {\n        serde_json::from_value::<TaggedReturn<TAG, T>>(self.results.remove(0)).map_err(|err| {\n            Error::DeserializationError {\n                error: format!(\"could not deserialize: {}\", err),\n            }\n        })\n    }\n}\n\n#[derive(Deserialize, Debug)]\n#[doc(hidden)]\npub struct Return<T> {\n    #[serde(default = \"Vec::new\")]\n    pub series: Vec<Series<T>>,\n}\n\n#[derive(Debug)]\n/// Represents a returned series from InfluxDB\npub struct Series<T> {\n    pub name: String,\n    pub values: Vec<T>,\n}\n\n#[derive(Deserialize, Debug)]\n#[doc(hidden)]\npub struct TaggedReturn<TAG, T> {\n    #[serde(default = \"Vec::new\")]\n    pub series: Vec<TaggedSeries<TAG, T>>,\n}\n\n#[derive(Debug)]\n/// Represents a returned series from InfluxDB\npub struct TaggedSeries<TAG, T> {\n    pub name: String,\n    pub tags: TAG,\n    pub values: Vec<T>,\n}\n\nimpl Client {\n    pub async fn json_query(&self, q: ReadQuery) -> Result<DatabaseQueryResult, Error> {\n        let query = q.build().map_err(|err| Error::InvalidQueryError {\n            error: format!(\"{}\", err),\n        })?;\n\n        let read_query = query.get();\n        let read_query_lower = read_query.to_lowercase();\n\n        if !read_query_lower.contains(\"select\") && !read_query_lower.contains(\"show\") {\n            let error = Error::InvalidQueryError {\n                error: String::from(\n                    \"Only SELECT and SHOW queries supported with JSON deserialization\",\n                ),\n            };\n            return Err(error);\n        }\n\n        let url = &format!(\"{}/query\", &self.url);\n        let mut parameters = self.parameters.as_ref().clone();\n        parameters.insert(\"q\", read_query);\n        let request_builder = self.client.get(url).query(&parameters);\n\n        #[cfg(feature = \"surf\")]\n        let request_builder = request_builder.map_err(|err| Error::UrlConstructionError {\n            error: err.to_string(),\n        })?;\n\n        let res = request_builder\n            .send()\n            .await\n            .map_err(|err| Error::ConnectionError {\n                error: err.to_string(),\n            })?;\n        check_status(&res)?;\n\n        #[cfg(feature = \"reqwest\")]\n        let body = res.bytes();\n        #[cfg(feature = \"surf\")]\n        let mut res = res;\n        #[cfg(feature = \"surf\")]\n        let body = res.body_bytes();\n\n        let body = body.await.map_err(|err| Error::ProtocolError {\n            error: err.to_string(),\n        })?;\n\n        // Try parsing InfluxDBs { \"error\": \"error message here\" }\n        if let Ok(error) = serde_json::from_slice::<_DatabaseError>(&body) {\n            return Err(Error::DatabaseError { error: error.error });\n        }\n\n        // Json has another structure, let's try actually parsing it to the type we're deserializing\n        serde_json::from_slice::<DatabaseQueryResult>(&body).map_err(|err| {\n            Error::DeserializationError {\n                error: format!(\"serde error: {}\", err),\n            }\n        })\n    }\n}\n","traces":[{"line":67,"address":[1966192],"length":1,"stats":{"Line":6},"fn_name":"deserialize_next<derive_integration_tests::WeatherReadingWithoutIgnored>"},{"line":71,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":72,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[2100875,2100367,2099791,2099723,2100011,2100299,2100587,2100943,2100079,2100655],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[2101136],"length":1,"stats":{"Line":1},"fn_name":"deserialize_next_tagged<integration_tests::test_json_query_tagged::{async_block#0}::{closure#0}::{async_block#0}::WeatherMeta, integration_tests::test_json_query_tagged::{async_block#0}::{closure#0}::{async_block#0}::Weather>"},{"line":85,"address":[2101216,2101473,2101155],"length":1,"stats":{"Line":1},"fn_name":"{closure#0}<integration_tests::test_json_query_tagged::{async_block#0}::{closure#0}::{async_block#0}::WeatherMeta, integration_tests::test_json_query_tagged::{async_block#0}::{closure#0}::{async_block#0}::Weather>"},{"line":86,"address":[2101415],"length":1,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[1817065,1817121],"length":1,"stats":{"Line":11},"fn_name":null},{"line":124,"address":[1967104,1967702,1972815,1972608,1972868,1967414],"length":1,"stats":{"Line":4},"fn_name":"{closure#0}"},{"line":125,"address":[1972706,1972638],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[1967865,1967557],"length":1,"stats":{"Line":4},"fn_name":null},{"line":129,"address":[1967880,1967979],"length":1,"stats":{"Line":4},"fn_name":null},{"line":131,"address":[1968002,1968101],"length":1,"stats":{"Line":4},"fn_name":null},{"line":133,"address":[1968309],"length":1,"stats":{"Line":1},"fn_name":null},{"line":137,"address":[1968396],"length":1,"stats":{"Line":1},"fn_name":null},{"line":140,"address":[1968566,1968263],"length":1,"stats":{"Line":4},"fn_name":null},{"line":141,"address":[1968717,1968792],"length":1,"stats":{"Line":4},"fn_name":null},{"line":142,"address":[1968807,1968933],"length":1,"stats":{"Line":4},"fn_name":null},{"line":143,"address":[1968968],"length":1,"stats":{"Line":2},"fn_name":null},{"line":150,"address":[1969733,1969051,1969480,1969365,1969239],"length":1,"stats":{"Line":8},"fn_name":null},{"line":152,"address":[1816776],"length":1,"stats":{"Line":10},"fn_name":null},{"line":153,"address":[1972126,1972000,1972071],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"},{"line":154,"address":[1972028],"length":1,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[1969632,1969893,1970010],"length":1,"stats":{"Line":4},"fn_name":null},{"line":159,"address":[1969926],"length":1,"stats":{"Line":2},"fn_name":null},{"line":165,"address":[1816799],"length":1,"stats":{"Line":4},"fn_name":null},{"line":166,"address":[1972188],"length":1,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[1970619,1970827],"length":1,"stats":{"Line":4},"fn_name":null},{"line":171,"address":[1970915],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[1972577,1972320,1971224,1971148],"length":1,"stats":{"Line":4},"fn_name":"{closure#3}"},{"line":176,"address":[1972519],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[1972347,1972415],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":22,"coverable":33},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","lib.rs"],"content":"//! This library is a work in progress. This means a feature you might need is not implemented\n//! yet or could be handled better.\n//!\n//! Pull requests are always welcome. See [Contributing](https://github.com/influxdb-rs/influxdb-rust/blob/main/CONTRIBUTING.md) and [Code of Conduct](https://github.com/influxdb-rs/influxdb-rust/blob/main/CODE_OF_CONDUCT.md). For a list of past changes, see [CHANGELOG.md](https://github.com/influxdb-rs/influxdb-rust/blob/main/CHANGELOG.md).\n//!\n//! ## Currently Supported Features\n//!\n//! -   Reading and Writing to InfluxDB\n//! -   Optional Serde Support for Deserialization\n//! -   Running multiple queries in one request (e.g. `SELECT * FROM weather_berlin; SELECT * FROM weather_london`)\n//! -   Writing single or multiple measurements in one request (e.g. `WriteQuery` or `Vec<WriteQuery>` argument)\n//! -   Authenticated and Unauthenticated Connections\n//! -   `async`/`await` support\n//! -   `#[derive(InfluxDbWriteable)]` Derive Macro for Writing / Reading into Structs\n//! -   `GROUP BY` support\n//! -   Tokio and async-std support (see example below) or [available backends](https://github.com/influxdb-rs/influxdb-rust/blob/main/influxdb/Cargo.toml)\n//! -   Swappable HTTP backends ([see below](#Choice-of-HTTP-backend))\n//!\n//! # Quickstart\n//!\n//! Add the following to your `Cargo.toml`\n//!\n//! ```toml\n//! influxdb = { version = \"0.5.2\", features = [\"derive\"] }\n//! ```\n//!\n//! For an example with using Serde deserialization, please refer to [serde_integration](crate::integrations::serde_integration)\n//!\n//! ```rust,no_run\n//! use influxdb::{Client, Query, Timestamp, ReadQuery};\n//! use influxdb::InfluxDbWriteable;\n//! use chrono::{DateTime, Utc};\n//!\n//! #[tokio::main]\n//! // or #[async_std::main] if you prefer\n//! async fn main() {\n//!     // Connect to db `test` on `http://localhost:8086`\n//!     let client = Client::new(\"http://localhost:8086\", \"test\");\n//!\n//!     #[derive(InfluxDbWriteable)]\n//!     struct WeatherReading {\n//!         time: DateTime<Utc>,\n//!         humidity: i32,\n//!         #[influxdb(tag)] wind_direction: String,\n//!     }\n//!\n//!     // Let's write some data into a measurement called `weather`\n//!     let weather_readings = vec!(\n//!         WeatherReading {\n//!             time: Timestamp::Hours(1).into(),\n//!             humidity: 30,\n//!             wind_direction: String::from(\"north\"),\n//!         }.into_query(\"weather\"),\n//!         WeatherReading {\n//!             time: Timestamp::Hours(2).into(),\n//!             humidity: 40,\n//!             wind_direction: String::from(\"west\"),\n//!         }.into_query(\"weather\"),\n//!     );\n//!\n//!     let write_result = client\n//!         .query(weather_readings)\n//!         .await;\n//!     assert!(write_result.is_ok(), \"Write result was not okay\");\n//!\n//!     // Let's see if the data we wrote is there\n//!     let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n//!\n//!     let read_result = client.query(read_query).await;\n//!     assert!(read_result.is_ok(), \"Read result was not ok\");\n//!     println!(\"{}\", read_result.unwrap());\n//! }\n//! ```\n//!\n//! For further examples, check out the Integration Tests in `tests/integration_tests.rs`\n//! in the repository.\n//!\n//! # Choice of HTTP backend\n//!\n//! To communicate with InfluxDB, you can choose the HTTP backend to be used configuring the appropriate feature. We recommend sticking with the default reqwest-based client, unless you really need async-std compatibility.\n//!\n//! - **[hyper](https://github.com/hyperium/hyper)** (through reqwest, used by default), with [rustls](https://github.com/ctz/rustls)\n//!   ```toml\n//!   influxdb = { version = \"0.5.2\", features = [\"derive\"] }\n//!   ```\n//!\n//! - **[hyper](https://github.com/hyperium/hyper)** (through reqwest), with native TLS (OpenSSL)\n//!   ```toml\n//!   influxdb = { version = \"0.5.2\", default-features = false, features = [\"derive\", \"use-serde\", \"reqwest-client\"] }\n//!   ```\n//!\n//! - **[hyper](https://github.com/hyperium/hyper)** (through surf), use this if you need tokio 0.2 compatibility\n//!    ```toml\n//!    influxdb = { version = \"0.5.2\", default-features = false, features = [\"derive\", \"use-serde\", \"curl-client\"] }\n//!    ```\n//! - **[curl](https://github.com/alexcrichton/curl-rust)**, using [libcurl](https://curl.se/libcurl/)\n//!    ```toml\n//!    influxdb = { version = \"0.5.2\", default-features = false, features = [\"derive\", \"use-serde\", \"curl-client\"] }\n//!    ```\n//! - **[async-h1](https://github.com/http-rs/async-h1)** with native TLS (OpenSSL)\n//!    ```toml\n//!    influxdb = { version = \"0.5.2\", default-features = false, features = [\"derive\", \"use-serde\", \"h1-client\"] }\n//!    ```\n//! - **[async-h1](https://github.com/http-rs/async-h1)** with [rustls](https://github.com/ctz/rustls)\n//!    ```toml\n//!    influxdb = { version = \"0.5.2\", default-features = false, features = [\"derive\", \"use-serde\", \"h1-client-rustls\"] }\n//!    ```\n//! - WebAssembly's `window.fetch`, via `web-sys` and **[wasm-bindgen](https://github.com/rustwasm/wasm-bindgen)**\n//!    ```toml\n//!    influxdb = { version = \"0.5.2\", default-features = false, features = [\"derive\", \"use-serde\", \"wasm-client\"] }\n//!    ```\n//!\n//! # License\n//!\n//! [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n#![allow(clippy::needless_doctest_main)]\n#![allow(clippy::needless_lifetimes)] // False positive in client/mod.rs query fn\n#![forbid(bare_trait_objects)]\n\n#[cfg(all(feature = \"reqwest\", feature = \"surf\"))]\ncompile_error!(\"You need to choose between reqwest and surf; enabling both is not supported\");\n\n#[cfg(not(any(feature = \"reqwest\", feature = \"surf\")))]\ncompile_error!(\"You need to choose an http client; consider not disabling default features\");\n\nmod client;\nmod error;\nmod query;\n\npub use client::Client;\npub use error::Error;\npub use query::{\n    read_query::ReadQuery,\n    write_query::{Type, WriteQuery},\n    InfluxDbWriteable, Query, QueryType, Timestamp, ValidQuery,\n};\n\n#[cfg(feature = \"use-serde\")]\npub mod integrations {\n    #[cfg(feature = \"use-serde\")]\n    pub mod serde_integration;\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","consts.rs"],"content":"pub const MINUTES_PER_HOUR: u128 = 60;\npub const SECONDS_PER_MINUTE: u128 = 60;\npub const MILLIS_PER_SECOND: u128 = 1000;\npub const NANOS_PER_MILLI: u128 = 1_000_000;\n\n#[cfg(test)]\npub const MICROS_PER_NANO: u128 = 1000;\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","line_proto_term.rs"],"content":"/// InfluxDB Line Protocol escaping helper module.\n/// https://docs.influxdata.com/influxdb/v1.7/write_protocols/line_protocol_tutorial/\nuse crate::Type;\nuse lazy_static::lazy_static;\nuse regex::Regex;\n\nlazy_static! {\n    pub static ref COMMAS_SPACES: Regex = Regex::new(\"[, ]\").unwrap();\n    pub static ref COMMAS_SPACES_EQUALS: Regex = Regex::new(\"[, =]\").unwrap();\n    pub static ref QUOTES_SLASHES: Regex = Regex::new(r#\"[\"\\\\]\"#).unwrap();\n    pub static ref SLASHES: Regex = Regex::new(r#\"(\\\\|,| |=|\")\"#).unwrap();\n}\n\npub enum LineProtoTerm<'a> {\n    Measurement(&'a str), // escape commas, spaces\n    TagKey(&'a str),      // escape commas, equals, spaces\n    TagValue(&'a Type),   // escape commas, equals, spaces\n    FieldKey(&'a str),    // escape commas, equals, spaces\n    FieldValue(&'a Type), // escape quotes, backslashes + quote\n}\n\nimpl LineProtoTerm<'_> {\n    pub fn escape(self) -> String {\n        use LineProtoTerm::*;\n        match self {\n            Measurement(x) => Self::escape_any(x, &COMMAS_SPACES),\n            TagKey(x) | FieldKey(x) => Self::escape_any(x, &COMMAS_SPACES_EQUALS),\n            FieldValue(x) => Self::escape_field_value(x),\n            TagValue(x) => Self::escape_tag_value(x),\n        }\n    }\n\n    fn escape_field_value(v: &Type) -> String {\n        use Type::*;\n        match v {\n            Boolean(v) => {\n                if *v {\n                    \"true\"\n                } else {\n                    \"false\"\n                }\n            }\n            .to_string(),\n            Float(v) => v.to_string(),\n            SignedInteger(v) => format!(\"{}i\", v),\n            UnsignedInteger(v) => format!(\"{}u\", v),\n            Text(v) => format!(r#\"\"{}\"\"#, Self::escape_any(v, &QUOTES_SLASHES)),\n        }\n    }\n\n    fn escape_tag_value(v: &Type) -> String {\n        use Type::*;\n        match v {\n            Boolean(v) => {\n                if *v {\n                    \"true\"\n                } else {\n                    \"false\"\n                }\n            }\n            .to_string(),\n            Float(v) => format!(r#\"{}\"#, v),\n            SignedInteger(v) => format!(r#\"{}\"#, v),\n            UnsignedInteger(v) => format!(r#\"{}\"#, v),\n            Text(v) => Self::escape_any(v, &SLASHES),\n        }\n    }\n\n    fn escape_any(s: &str, re: &Regex) -> String {\n        re.replace_all(s, r#\"\\$0\"#).to_string()\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use crate::query::line_proto_term::LineProtoTerm::*;\n    use crate::Type;\n\n    #[test]\n    fn test() {\n        assert_eq!(TagValue(&Type::Boolean(true)).escape(), r#\"true\"#);\n        assert_eq!(TagValue(&Type::Float(1.8324f64)).escape(), r#\"1.8324\"#);\n        assert_eq!(TagValue(&Type::SignedInteger(-1i64)).escape(), r#\"-1\"#);\n        assert_eq!(TagValue(&Type::UnsignedInteger(1u64)).escape(), r#\"1\"#);\n\n        assert_eq!(\n            TagValue(&Type::Text(\"this is my special string\".into())).escape(),\n            r#\"this\\ is\\ my\\ special\\ string\"#\n        );\n        assert_eq!(\n            TagValue(&Type::Text(\"a tag w=i th == tons of escapes\".into())).escape(),\n            r#\"a\\ tag\\ w\\=i\\ th\\ \\=\\=\\ tons\\ of\\ escapes\"#\n        );\n        assert_eq!(\n            TagValue(&Type::Text(\"no_escapes\".into())).escape(),\n            r#\"no_escapes\"#\n        );\n        assert_eq!(\n            TagValue(&Type::Text(\"some,commas,here\".into())).escape(),\n            r#\"some\\,commas\\,here\"#\n        );\n\n        assert_eq!(Measurement(r#\"wea\", ther\"#).escape(), r#\"wea\"\\,\\ ther\"#);\n        assert_eq!(TagKey(r#\"locat\\ ,=ion\"#).escape(), r#\"locat\\\\ \\,\\=ion\"#);\n\n        assert_eq!(FieldValue(&Type::Boolean(true)).escape(), r#\"true\"#);\n        assert_eq!(FieldValue(&Type::Boolean(false)).escape(), r#\"false\"#);\n\n        assert_eq!(FieldValue(&Type::Float(0.0)).escape(), r#\"0\"#);\n        assert_eq!(FieldValue(&Type::Float(-0.1)).escape(), r#\"-0.1\"#);\n\n        assert_eq!(FieldValue(&Type::SignedInteger(0)).escape(), r#\"0i\"#);\n        assert_eq!(FieldValue(&Type::SignedInteger(83)).escape(), r#\"83i\"#);\n\n        assert_eq!(FieldValue(&Type::Text(\"\".into())).escape(), r#\"\"\"\"#);\n        assert_eq!(FieldValue(&Type::Text(\"0\".into())).escape(), r#\"\"0\"\"#);\n        assert_eq!(FieldValue(&Type::Text(\"\\\"\".into())).escape(), r#\"\"\\\"\"\"#);\n        assert_eq!(\n            FieldValue(&Type::Text(r#\"locat\"\\ ,=ion\"#.into())).escape(),\n            r#\"\"locat\\\"\\\\ ,=ion\"\"#\n        );\n    }\n\n    #[test]\n    fn test_empty_tag_value() {\n        // InfluxDB doesn't support empty tag values. But that's a job\n        // of a calling site to validate an entire write request.\n        assert_eq!(TagValue(&Type::Text(\"\".into())).escape(), r#\"\"#);\n    }\n}\n","traces":[{"line":8,"address":[4548676],"length":1,"stats":{"Line":3},"fn_name":null},{"line":9,"address":[4548612],"length":1,"stats":{"Line":3},"fn_name":null},{"line":10,"address":[4548452],"length":1,"stats":{"Line":1},"fn_name":null},{"line":11,"address":[4548740],"length":1,"stats":{"Line":2},"fn_name":null},{"line":23,"address":[4568512],"length":1,"stats":{"Line":4},"fn_name":"escape"},{"line":25,"address":[4568531,4568656,4568707],"length":1,"stats":{"Line":10},"fn_name":null},{"line":26,"address":[4568567],"length":1,"stats":{"Line":3},"fn_name":null},{"line":27,"address":[1620630,1620525,1620576],"length":1,"stats":{"Line":9},"fn_name":null},{"line":28,"address":[1620606],"length":1,"stats":{"Line":3},"fn_name":null},{"line":29,"address":[1620555],"length":1,"stats":{"Line":4},"fn_name":null},{"line":33,"address":[1621347,1620688],"length":1,"stats":{"Line":3},"fn_name":"escape_field_value"},{"line":35,"address":[1620718],"length":1,"stats":{"Line":3},"fn_name":null},{"line":36,"address":[4568882,4569650],"length":1,"stats":{"Line":2},"fn_name":null},{"line":37,"address":[4569622,4568897],"length":1,"stats":{"Line":2},"fn_name":null},{"line":38,"address":[4569624],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[4569601],"length":1,"stats":{"Line":1},"fn_name":null},{"line":44,"address":[4568922],"length":1,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[1620821],"length":1,"stats":{"Line":3},"fn_name":null},{"line":46,"address":[1620948],"length":1,"stats":{"Line":1},"fn_name":null},{"line":47,"address":[1621100,1621373],"length":1,"stats":{"Line":1},"fn_name":null},{"line":51,"address":[1621536],"length":1,"stats":{"Line":4},"fn_name":"escape_tag_value"},{"line":53,"address":[1621566],"length":1,"stats":{"Line":4},"fn_name":null},{"line":54,"address":[1621602,1622180],"length":1,"stats":{"Line":2},"fn_name":null},{"line":55,"address":[1621617,1622152],"length":1,"stats":{"Line":1},"fn_name":null},{"line":56,"address":[1622154],"length":1,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[1622131],"length":1,"stats":{"Line":0},"fn_name":null},{"line":62,"address":[1621637],"length":1,"stats":{"Line":1},"fn_name":null},{"line":63,"address":[1621762],"length":1,"stats":{"Line":1},"fn_name":null},{"line":64,"address":[1621911],"length":1,"stats":{"Line":2},"fn_name":null},{"line":65,"address":[1622058],"length":1,"stats":{"Line":2},"fn_name":null},{"line":69,"address":[1622349,1622208],"length":1,"stats":{"Line":3},"fn_name":"escape_any"},{"line":70,"address":[1622251],"length":1,"stats":{"Line":3},"fn_name":null}],"covered":31,"coverable":32},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","mod.rs"],"content":"//! Used to create queries of type [`ReadQuery`](crate::query::read_query::ReadQuery) or\n//! [`WriteQuery`](crate::query::write_query::WriteQuery) which can be executed in InfluxDB\n//!\n//! # Examples\n//!\n//! ```rust\n//! use influxdb::{Query, Timestamp};\n//! use influxdb::InfluxDbWriteable;\n//!\n//! let write_query = Timestamp::Nanoseconds(0).into_query(\"measurement\")\n//!     .add_field(\"field1\", 5)\n//!     .add_tag(\"author\", \"Gero\")\n//!     .build();\n//!\n//! assert!(write_query.is_ok());\n//!\n//! let read_query = Query::raw_read_query(\"SELECT * FROM weather\")\n//!     .build();\n//!\n//! assert!(read_query.is_ok());\n//! ```\n\nuse chrono::prelude::{DateTime, TimeZone, Utc};\nuse std::convert::TryInto;\n\npub mod consts;\nmod line_proto_term;\npub mod read_query;\npub mod write_query;\nuse std::fmt;\n\nuse crate::{Error, ReadQuery, WriteQuery};\nuse consts::{MILLIS_PER_SECOND, MINUTES_PER_HOUR, NANOS_PER_MILLI, SECONDS_PER_MINUTE};\n\n#[cfg(feature = \"derive\")]\npub use influxdb_derive::InfluxDbWriteable;\n\n#[derive(PartialEq, Eq, Debug, Copy, Clone)]\npub enum Timestamp {\n    Nanoseconds(u128),\n    Microseconds(u128),\n    Milliseconds(u128),\n    Seconds(u128),\n    Minutes(u128),\n    Hours(u128),\n}\n\nimpl fmt::Display for Timestamp {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        use Timestamp::*;\n        match self {\n            Nanoseconds(ts) | Microseconds(ts) | Milliseconds(ts) | Seconds(ts) | Minutes(ts)\n            | Hours(ts) => write!(f, \"{}\", ts),\n        }\n    }\n}\n\nimpl From<Timestamp> for DateTime<Utc> {\n    fn from(ts: Timestamp) -> DateTime<Utc> {\n        match ts {\n            Timestamp::Hours(h) => {\n                let nanos =\n                    h * MINUTES_PER_HOUR * SECONDS_PER_MINUTE * MILLIS_PER_SECOND * NANOS_PER_MILLI;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n            Timestamp::Minutes(m) => {\n                let nanos = m * SECONDS_PER_MINUTE * MILLIS_PER_SECOND * NANOS_PER_MILLI;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n            Timestamp::Seconds(s) => {\n                let nanos = s * MILLIS_PER_SECOND * NANOS_PER_MILLI;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n            Timestamp::Milliseconds(millis) => {\n                let nanos = millis * NANOS_PER_MILLI;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n            Timestamp::Nanoseconds(nanos) => Utc.timestamp_nanos(nanos.try_into().unwrap()),\n            Timestamp::Microseconds(mis) => {\n                let nanos = mis / 10000;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n        }\n    }\n}\n\nimpl<T> From<DateTime<T>> for Timestamp\nwhere\n    T: TimeZone,\n{\n    fn from(date_time: DateTime<T>) -> Self {\n        Timestamp::Nanoseconds(date_time.timestamp_nanos() as u128)\n    }\n}\n\npub trait Query {\n    /// Builds valid InfluxSQL which can be run against the Database.\n    /// In case no fields have been specified, it will return an error,\n    /// as that is invalid InfluxSQL syntax.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::{Query, Timestamp};\n    /// use influxdb::InfluxDbWriteable;\n    ///\n    /// let invalid_query = Timestamp::Nanoseconds(0).into_query(\"measurement\").build();\n    /// assert!(invalid_query.is_err());\n    ///\n    /// let valid_query = Timestamp::Nanoseconds(0).into_query(\"measurement\").add_field(\"myfield1\", 11).build();\n    /// assert!(valid_query.is_ok());\n    /// ```\n    fn build(&self) -> Result<ValidQuery, Error>;\n\n    fn get_type(&self) -> QueryType;\n}\n\nimpl<Q: Query> Query for &Q {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        Q::build(self)\n    }\n\n    fn get_type(&self) -> QueryType {\n        Q::get_type(self)\n    }\n}\n\nimpl<Q: Query> Query for Box<Q> {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        Q::build(self)\n    }\n\n    fn get_type(&self) -> QueryType {\n        Q::get_type(self)\n    }\n}\n\npub trait InfluxDbWriteable {\n    fn into_query<I: Into<String>>(self, name: I) -> WriteQuery;\n}\n\nimpl InfluxDbWriteable for Timestamp {\n    fn into_query<I: Into<String>>(self, name: I) -> WriteQuery {\n        WriteQuery::new(self, name.into())\n    }\n}\n\nimpl dyn Query {\n    /// Returns a [`ReadQuery`](crate::ReadQuery) builder.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::Query;\n    ///\n    /// Query::raw_read_query(\"SELECT * FROM weather\"); // Is of type [`ReadQuery`](crate::ReadQuery)\n    /// ```\n    #[deprecated(since = \"0.5.0\", note = \"Use ReadQuery::new instead\")]\n    pub fn raw_read_query<S>(read_query: S) -> ReadQuery\n    where\n        S: Into<String>,\n    {\n        ReadQuery::new(read_query)\n    }\n}\n\n#[derive(Debug)]\n#[doc(hidden)]\npub struct ValidQuery(String);\nimpl ValidQuery {\n    pub fn get(self) -> String {\n        self.0\n    }\n}\nimpl<T> From<T> for ValidQuery\nwhere\n    T: Into<String>,\n{\n    fn from(string: T) -> Self {\n        Self(string.into())\n    }\n}\nimpl PartialEq<String> for ValidQuery {\n    fn eq(&self, other: &String) -> bool {\n        &self.0 == other\n    }\n}\nimpl PartialEq<&str> for ValidQuery {\n    fn eq(&self, other: &&str) -> bool {\n        &self.0 == other\n    }\n}\n\n/// Internal Enum used to decide if a `POST` or `GET` request should be sent to InfluxDB. See [InfluxDB Docs](https://docs.influxdata.com/influxdb/v1.7/tools/api/#query-http-endpoint).\n#[derive(PartialEq, Eq, Debug)]\npub enum QueryType {\n    ReadQuery,\n    /// write query with precision\n    WriteQuery(String),\n}\n\n#[cfg(test)]\nmod tests {\n    use super::consts::{\n        MICROS_PER_NANO, MILLIS_PER_SECOND, MINUTES_PER_HOUR, NANOS_PER_MILLI, SECONDS_PER_MINUTE,\n    };\n    use crate::query::{Timestamp, ValidQuery};\n    use chrono::prelude::{DateTime, TimeZone, Utc};\n    use std::convert::TryInto;\n    #[test]\n    fn test_equality_str() {\n        assert_eq!(ValidQuery::from(\"hello\"), \"hello\");\n    }\n    #[test]\n    fn test_equality_string() {\n        assert_eq!(\n            ValidQuery::from(String::from(\"hello\")),\n            String::from(\"hello\")\n        );\n    }\n    #[test]\n    fn test_format_for_timestamp_else() {\n        assert!(format!(\"{}\", Timestamp::Nanoseconds(100)) == \"100\");\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_hours() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Hours(2).into();\n        assert_eq!(\n            Utc.timestamp_nanos(\n                (2 * MINUTES_PER_HOUR * SECONDS_PER_MINUTE * MILLIS_PER_SECOND * NANOS_PER_MILLI)\n                    .try_into()\n                    .unwrap()\n            ),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_minutes() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Minutes(2).into();\n        assert_eq!(\n            Utc.timestamp_nanos(\n                (2 * SECONDS_PER_MINUTE * MILLIS_PER_SECOND * NANOS_PER_MILLI)\n                    .try_into()\n                    .unwrap()\n            ),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_seconds() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Seconds(2).into();\n        assert_eq!(\n            Utc.timestamp_nanos(\n                (2 * MILLIS_PER_SECOND * NANOS_PER_MILLI)\n                    .try_into()\n                    .unwrap()\n            ),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_millis() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Milliseconds(2).into();\n        assert_eq!(\n            Utc.timestamp_nanos((2 * NANOS_PER_MILLI).try_into().unwrap()),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_nanos() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Nanoseconds(1).into();\n        assert_eq!(Utc.timestamp_nanos(1), datetime_from_timestamp)\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_micros() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Microseconds(1).into();\n        assert_eq!(\n            Utc.timestamp_nanos((1 / MICROS_PER_NANO).try_into().unwrap()),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_timestamp_from_chrono_date() {\n        let timestamp_from_datetime: Timestamp = Utc\n            .with_ymd_and_hms(1970, 1, 1, 0, 0, 1)\n            .single()\n            .unwrap()\n            .into();\n        assert_eq!(\n            Timestamp::Nanoseconds(MILLIS_PER_SECOND * NANOS_PER_MILLI),\n            timestamp_from_datetime\n        )\n    }\n}\n","traces":[{"line":49,"address":[4606192],"length":1,"stats":{"Line":3},"fn_name":"fmt"},{"line":51,"address":[1721061,1720952,1720997,1721029,1721013,1721045],"length":1,"stats":{"Line":5},"fn_name":null},{"line":52,"address":[1721020,1721036,1720988,1721052,1721004],"length":1,"stats":{"Line":3},"fn_name":null},{"line":59,"address":[1684368],"length":1,"stats":{"Line":2},"fn_name":"from"},{"line":60,"address":[1684415],"length":1,"stats":{"Line":2},"fn_name":null},{"line":61,"address":[1685036],"length":1,"stats":{"Line":2},"fn_name":null},{"line":62,"address":[1685081,1685533],"length":1,"stats":{"Line":2},"fn_name":null},{"line":64,"address":[1685480],"length":1,"stats":{"Line":2},"fn_name":null},{"line":66,"address":[1684915],"length":1,"stats":{"Line":1},"fn_name":null},{"line":67,"address":[1684960,1685592,1685855],"length":1,"stats":{"Line":2},"fn_name":null},{"line":68,"address":[1685799],"length":1,"stats":{"Line":1},"fn_name":null},{"line":70,"address":[1684794],"length":1,"stats":{"Line":1},"fn_name":null},{"line":71,"address":[1684839,1685898,1686067],"length":1,"stats":{"Line":2},"fn_name":null},{"line":72,"address":[1686011],"length":1,"stats":{"Line":1},"fn_name":null},{"line":74,"address":[1684673],"length":1,"stats":{"Line":1},"fn_name":null},{"line":75,"address":[1686185,1684718,1686113],"length":1,"stats":{"Line":2},"fn_name":null},{"line":76,"address":[1686129],"length":1,"stats":{"Line":1},"fn_name":null},{"line":78,"address":[1684457],"length":1,"stats":{"Line":2},"fn_name":null},{"line":79,"address":[1684545],"length":1,"stats":{"Line":1},"fn_name":null},{"line":80,"address":[1684593],"length":1,"stats":{"Line":1},"fn_name":null},{"line":81,"address":[1684617],"length":1,"stats":{"Line":1},"fn_name":null},{"line":91,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":92,"address":[1721172,1721217],"length":1,"stats":{"Line":4},"fn_name":null},{"line":119,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":120,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":123,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":124,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":129,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":144,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":163,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[1721536],"length":1,"stats":{"Line":4},"fn_name":"get"},{"line":172,"address":[1721539],"length":1,"stats":{"Line":4},"fn_name":null},{"line":179,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":180,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":184,"address":[1721760],"length":1,"stats":{"Line":1},"fn_name":"eq"},{"line":185,"address":[1721773],"length":1,"stats":{"Line":1},"fn_name":null},{"line":189,"address":[1721808],"length":1,"stats":{"Line":1},"fn_name":"eq"},{"line":190,"address":[1721821],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":37,"coverable":42},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","read_query.rs"],"content":"//! Read Query Builder returned by Query::raw_read_query\n//!\n//! Can only be instantiated by using Query::raw_read_query\n\nuse crate::query::{QueryType, ValidQuery};\nuse crate::{Error, Query};\n\n#[derive(Debug, Clone)]\npub struct ReadQuery {\n    queries: Vec<String>,\n}\n\nimpl ReadQuery {\n    /// Creates a new [`ReadQuery`]\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn new<S>(query: S) -> Self\n    where\n        S: Into<String>,\n    {\n        ReadQuery {\n            queries: vec![query.into()],\n        }\n    }\n\n    /// Adds a query to the [`ReadQuery`]\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn add_query<S>(mut self, query: S) -> Self\n    where\n        S: Into<String>,\n    {\n        self.queries.push(query.into());\n        self\n    }\n}\n\nimpl Query for ReadQuery {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        Ok(ValidQuery(self.queries.join(\";\")))\n    }\n\n    fn get_type(&self) -> QueryType {\n        QueryType::ReadQuery\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use crate::query::{Query, QueryType, ReadQuery};\n\n    #[test]\n    fn test_read_builder_single_query() {\n        let query = ReadQuery::new(\"SELECT * FROM aachen\").build();\n\n        assert_eq!(query.unwrap(), \"SELECT * FROM aachen\");\n    }\n\n    #[test]\n    fn test_read_builder_multi_query() {\n        let query = ReadQuery::new(\"SELECT * FROM aachen\")\n            .add_query(\"SELECT * FROM cologne\")\n            .build();\n\n        assert_eq!(query.unwrap(), \"SELECT * FROM aachen;SELECT * FROM cologne\");\n    }\n\n    #[test]\n    fn test_correct_query_type() {\n        let query = ReadQuery::new(\"SELECT * FROM aachen\");\n\n        assert_eq!(query.get_type(), QueryType::ReadQuery);\n    }\n}\n","traces":[{"line":16,"address":[1773312,1773572,1773229,1773284,1773024,1773517],"length":1,"stats":{"Line":5},"fn_name":"new<alloc::string::String>"},{"line":21,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":27,"address":[2204144,2204310],"length":1,"stats":{"Line":2},"fn_name":"add_query<&str>"},{"line":31,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":37,"address":[1568144],"length":1,"stats":{"Line":4},"fn_name":"build"},{"line":38,"address":[1568176],"length":1,"stats":{"Line":4},"fn_name":null},{"line":41,"address":[1568288],"length":1,"stats":{"Line":4},"fn_name":"get_type"},{"line":42,"address":[1568296],"length":1,"stats":{"Line":4},"fn_name":null}],"covered":9,"coverable":9},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","write_query.rs"],"content":"//! Write Query Builder returned by Query::write_query\n//!\n//! Can only be instantiated by using Query::write_query\n\nuse crate::query::line_proto_term::LineProtoTerm;\nuse crate::query::{QueryType, ValidQuery};\nuse crate::{Error, Query, Timestamp};\nuse std::fmt::{Display, Formatter};\n\npub trait WriteType {\n    fn add_to(self, tag: String, fields_or_tags: &mut Vec<(String, Type)>);\n}\n\nimpl<T: Into<Type>> WriteType for T {\n    fn add_to(self, tag: String, fields_or_tags: &mut Vec<(String, Type)>) {\n        let val: Type = self.into();\n        fields_or_tags.push((tag, val));\n    }\n}\n\nimpl<T: Into<Type>> WriteType for Option<T> {\n    fn add_to(self, tag: String, fields_or_tags: &mut Vec<(String, Type)>) {\n        if let Some(val) = self {\n            val.add_to(tag, fields_or_tags);\n        }\n    }\n}\n\n/// Internal Representation of a Write query that has not yet been built\n#[derive(Debug, Clone)]\npub struct WriteQuery {\n    fields: Vec<(String, Type)>,\n    tags: Vec<(String, Type)>,\n    measurement: String,\n    timestamp: Timestamp,\n}\n\nimpl WriteQuery {\n    /// Creates a new [`WriteQuery`](crate::query::write_query::WriteQuery)\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn new<S>(timestamp: Timestamp, measurement: S) -> Self\n    where\n        S: Into<String>,\n    {\n        WriteQuery {\n            fields: vec![],\n            tags: vec![],\n            measurement: measurement.into(),\n            timestamp,\n        }\n    }\n\n    /// Adds a field to the [`WriteQuery`](crate::WriteQuery)\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::{Query, Timestamp};\n    /// use influxdb::InfluxDbWriteable;\n    ///\n    /// Timestamp::Nanoseconds(0).into_query(\"measurement\").add_field(\"field1\", 5).build();\n    /// ```\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn add_field<S, F>(mut self, field: S, value: F) -> Self\n    where\n        S: Into<String>,\n        F: WriteType,\n    {\n        value.add_to(field.into(), &mut self.fields);\n        self\n    }\n\n    /// Adds a tag to the [`WriteQuery`](crate::WriteQuery)\n    ///\n    /// Please note that a [`WriteQuery`](crate::WriteQuery) requires at least one field. Composing a query with\n    /// only tags will result in a failure building the query.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::{Query, Timestamp};\n    /// use influxdb::InfluxDbWriteable;\n    ///\n    /// Timestamp::Nanoseconds(0)\n    ///     .into_query(\"measurement\")\n    ///     .add_tag(\"field1\", 5); // calling `.build()` now would result in a `Err(Error::InvalidQueryError)`\n    /// ```\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn add_tag<S, I>(mut self, tag: S, value: I) -> Self\n    where\n        S: Into<String>,\n        I: WriteType,\n    {\n        value.add_to(tag.into(), &mut self.tags);\n        self\n    }\n\n    pub fn get_precision(&self) -> String {\n        let modifier = match self.timestamp {\n            Timestamp::Nanoseconds(_) => \"ns\",\n            Timestamp::Microseconds(_) => \"u\",\n            Timestamp::Milliseconds(_) => \"ms\",\n            Timestamp::Seconds(_) => \"s\",\n            Timestamp::Minutes(_) => \"m\",\n            Timestamp::Hours(_) => \"h\",\n        };\n        modifier.to_string()\n    }\n}\n\n#[derive(Debug, Clone)]\npub enum Type {\n    Boolean(bool),\n    Float(f64),\n    SignedInteger(i64),\n    UnsignedInteger(u64),\n    Text(String),\n}\n\nimpl Display for Type {\n    fn fmt(&self, f: &mut Formatter) -> std::fmt::Result {\n        use Type::*;\n\n        match self {\n            Boolean(x) => write!(f, \"{}\", x),\n            Float(x) => write!(f, \"{}\", x),\n            SignedInteger(x) => write!(f, \"{}\", x),\n            UnsignedInteger(x) => write!(f, \"{}\", x),\n            Text(text) => write!(f, \"{text}\", text = text),\n        }\n    }\n}\n\nmacro_rules! from_impl {\n        ( $variant:ident => $( $typ:ident ),+ ) => (\n                $(\n                    impl From<$typ> for Type {\n                        fn from(b: $typ) -> Self {\n                            Type::$variant(b.into())\n                        }\n                    }\n                )+\n        )\n}\nfrom_impl! {Boolean => bool}\nfrom_impl! {Float => f32, f64}\nfrom_impl! {SignedInteger => i8, i16, i32, i64}\nfrom_impl! {UnsignedInteger => u8, u16, u32, u64}\nfrom_impl! {Text => String}\nimpl From<&str> for Type {\n    fn from(b: &str) -> Self {\n        Type::Text(b.into())\n    }\n}\nimpl<T> From<&T> for Type\nwhere\n    T: Copy + Into<Type>,\n{\n    fn from(t: &T) -> Self {\n        (*t).into()\n    }\n}\n\nimpl Query for WriteQuery {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        if self.fields.is_empty() {\n            return Err(Error::InvalidQueryError {\n                error: \"fields cannot be empty\".to_string(),\n            });\n        }\n\n        let mut tags = self\n            .tags\n            .iter()\n            .map(|(tag, value)| {\n                format!(\n                    \"{tag}={value}\",\n                    tag = LineProtoTerm::TagKey(tag).escape(),\n                    value = LineProtoTerm::TagValue(value).escape(),\n                )\n            })\n            .collect::<Vec<String>>()\n            .join(\",\");\n\n        if !tags.is_empty() {\n            tags.insert(0, ',');\n        }\n        let fields = self\n            .fields\n            .iter()\n            .map(|(field, value)| {\n                format!(\n                    \"{field}={value}\",\n                    field = LineProtoTerm::FieldKey(field).escape(),\n                    value = LineProtoTerm::FieldValue(value).escape(),\n                )\n            })\n            .collect::<Vec<String>>()\n            .join(\",\");\n\n        Ok(ValidQuery(format!(\n            \"{measurement}{tags} {fields} {time}\",\n            measurement = LineProtoTerm::Measurement(&self.measurement).escape(),\n            tags = tags,\n            fields = fields,\n            time = self.timestamp\n        )))\n    }\n\n    fn get_type(&self) -> QueryType {\n        QueryType::WriteQuery(self.get_precision())\n    }\n}\n\nimpl Query for Vec<WriteQuery> {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        let mut qlines = Vec::new();\n\n        for q in self {\n            let valid_query = q.build()?;\n            qlines.push(valid_query.0);\n        }\n\n        Ok(ValidQuery(qlines.join(\"\\n\")))\n    }\n\n    fn get_type(&self) -> QueryType {\n        QueryType::WriteQuery(\n            self.get(0)\n                .map(|q| q.get_precision())\n                // use \"ms\" as placeholder if query is empty\n                .unwrap_or_else(|| \"ms\".to_owned()),\n        )\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use crate::query::{InfluxDbWriteable, Query, Timestamp};\n\n    #[test]\n    fn test_write_builder_empty_query() {\n        let query = Timestamp::Hours(5)\n            .into_query(\"marina_3\".to_string())\n            .build();\n\n        assert!(query.is_err(), \"Query was not empty\");\n    }\n\n    #[test]\n    fn test_write_builder_single_field() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82)\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(query.unwrap(), \"weather temperature=82i 11\");\n    }\n\n    #[test]\n    fn test_write_builder_multiple_fields() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82)\n            .add_field(\"wind_strength\", 3.7)\n            .add_field(\"temperature_unsigned\", 82u64)\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(\n            query.unwrap(),\n            \"weather temperature=82i,wind_strength=3.7,temperature_unsigned=82u 11\"\n        );\n    }\n\n    #[test]\n    fn test_write_builder_optional_fields() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82u64)\n            .add_tag(\"wind_strength\", <Option<u64>>::None)\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(query.unwrap(), \"weather temperature=82u 11\");\n    }\n\n    #[test]\n    fn test_write_builder_only_tags() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_tag(\"season\", \"summer\")\n            .build();\n\n        assert!(query.is_err(), \"Query missing one or more fields\");\n    }\n\n    #[test]\n    fn test_write_builder_full_query() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82)\n            .add_tag(\"location\", \"us-midwest\")\n            .add_tag(\"season\", \"summer\")\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(\n            query.unwrap(),\n            r#\"weather,location=us-midwest,season=summer temperature=82i 11\"#\n        );\n    }\n\n    #[test]\n    fn test_correct_query_type() {\n        use crate::query::QueryType;\n\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82)\n            .add_tag(\"location\", \"us-midwest\")\n            .add_tag(\"season\", \"summer\");\n\n        assert_eq!(query.get_type(), QueryType::WriteQuery(\"h\".to_owned()));\n    }\n\n    #[test]\n    fn test_escaping() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"wea, ther=\")\n            .add_field(\"temperature\", 82)\n            .add_field(\"\\\"temp=era,t ure\\\"\", r#\"too\"\\\\hot\"#)\n            .add_field(\"float\", 82.0)\n            .add_tag(\"location\", \"us-midwest\")\n            .add_tag(\"loc, =\\\"ation\", r#\"us, \"mid=west\"#)\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        let query_res = query.unwrap().get();\n        assert_eq!(\n            query_res,\n            r#\"wea\\,\\ ther=,location=us-midwest,loc\\,\\ \\=\"ation=us\\,\\ \\\"mid\\=west temperature=82i,\"temp\\=era\\,t\\ ure\"=\"too\\\"\\\\\\\\hot\",float=82 11\"#\n        );\n    }\n\n    #[test]\n    fn test_batch() {\n        let q0 = Timestamp::Hours(11)\n            .into_query(\"weather\")\n            .add_field(\"temperature\", 82)\n            .add_tag(\"location\", \"us-midwest\");\n\n        let q1 = Timestamp::Hours(12)\n            .into_query(\"weather\")\n            .add_field(\"temperature\", 65)\n            .add_tag(\"location\", \"us-midwest\");\n\n        let query = vec![q0, q1].build();\n\n        assert_eq!(\n            query.unwrap().get(),\n            r#\"weather,location=us-midwest temperature=82i 11\nweather,location=us-midwest temperature=65i 12\"#\n        );\n    }\n}\n","traces":[{"line":15,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":16,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":17,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":22,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":23,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":24,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":41,"address":[1623920,1623552],"length":1,"stats":{"Line":3},"fn_name":"new<alloc::string::String>"},{"line":46,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":64,"address":[1624406,1623968,1624623,1624849,1624656,1624432,1624192,1624158],"length":1,"stats":{"Line":7},"fn_name":"add_field<&str, u64>"},{"line":69,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":70,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":89,"address":[1625136,1624880,1625098,1625354],"length":1,"stats":{"Line":4},"fn_name":"add_tag<&str, &str>"},{"line":94,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":95,"address":[1625317,1625061],"length":1,"stats":{"Line":4},"fn_name":null},{"line":98,"address":[1625392],"length":1,"stats":{"Line":3},"fn_name":"get_precision"},{"line":99,"address":[1625411],"length":1,"stats":{"Line":3},"fn_name":null},{"line":100,"address":[1625443],"length":1,"stats":{"Line":1},"fn_name":null},{"line":101,"address":[1625466],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[1625489],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[1625512],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[1625535],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[1625558],"length":1,"stats":{"Line":2},"fn_name":null},{"line":107,"address":[1625584],"length":1,"stats":{"Line":3},"fn_name":null},{"line":121,"address":[1625616],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":124,"address":[1625648],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[1625683],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[1625775],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[1625875],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[1625987],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[1626097],"length":1,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[1641488,1641360,1641616,1641424,1641552,1641232,1641184,1641296,1641136,1641744,1641680,1641072],"length":1,"stats":{"Line":6},"fn_name":"from"},{"line":139,"address":[1641573,1641317,1641456,1641508,1641645,1641758,1641712,1641097,1641203,1641155,1641389,1641252],"length":1,"stats":{"Line":6},"fn_name":null},{"line":151,"address":[1626224],"length":1,"stats":{"Line":2},"fn_name":"from"},{"line":152,"address":[1626247],"length":1,"stats":{"Line":2},"fn_name":null},{"line":159,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":160,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[1626728,1626304],"length":1,"stats":{"Line":3},"fn_name":"build"},{"line":166,"address":[1626354],"length":1,"stats":{"Line":3},"fn_name":null},{"line":167,"address":[1626497],"length":1,"stats":{"Line":1},"fn_name":null},{"line":168,"address":[1626464],"length":1,"stats":{"Line":1},"fn_name":null},{"line":172,"address":[1626677,1626371],"length":1,"stats":{"Line":6},"fn_name":null},{"line":175,"address":[1627918,1628338,1627872],"length":1,"stats":{"Line":6},"fn_name":"{closure#0}"},{"line":176,"address":[1628143,1628010,1628364],"length":1,"stats":{"Line":6},"fn_name":null},{"line":178,"address":[1627946],"length":1,"stats":{"Line":3},"fn_name":null},{"line":179,"address":[1628100],"length":1,"stats":{"Line":3},"fn_name":null},{"line":185,"address":[1626803],"length":1,"stats":{"Line":3},"fn_name":null},{"line":186,"address":[1626878],"length":1,"stats":{"Line":3},"fn_name":null},{"line":188,"address":[1627091,1626838,1626903],"length":1,"stats":{"Line":9},"fn_name":null},{"line":191,"address":[1628480,1628946,1628526],"length":1,"stats":{"Line":6},"fn_name":"{closure#1}"},{"line":192,"address":[1628618,1628972,1628751],"length":1,"stats":{"Line":6},"fn_name":null},{"line":194,"address":[1628554],"length":1,"stats":{"Line":3},"fn_name":null},{"line":195,"address":[1628708],"length":1,"stats":{"Line":3},"fn_name":null},{"line":201,"address":[1627276],"length":1,"stats":{"Line":3},"fn_name":null},{"line":203,"address":[1627194],"length":1,"stats":{"Line":3},"fn_name":null},{"line":210,"address":[1629088],"length":1,"stats":{"Line":3},"fn_name":"get_type"},{"line":211,"address":[1629107],"length":1,"stats":{"Line":3},"fn_name":null},{"line":216,"address":[1708400,1709049,1709213],"length":1,"stats":{"Line":1},"fn_name":"build"},{"line":217,"address":[1708430],"length":1,"stats":{"Line":1},"fn_name":null},{"line":219,"address":[1708457,1708616,1708525,1709025],"length":1,"stats":{"Line":4},"fn_name":null},{"line":220,"address":[1708835,1708637],"length":1,"stats":{"Line":1},"fn_name":null},{"line":221,"address":[1708766],"length":1,"stats":{"Line":1},"fn_name":null},{"line":224,"address":[1708588,1709069],"length":1,"stats":{"Line":2},"fn_name":null},{"line":227,"address":[1709232],"length":1,"stats":{"Line":0},"fn_name":"get_type"},{"line":229,"address":[1709264],"length":1,"stats":{"Line":0},"fn_name":null},{"line":230,"address":[1629184,1629168],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":232,"address":[1629212,1629200],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"}],"covered":51,"coverable":68},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","tests","derive_integration_tests.rs"],"content":"#[path = \"./utilities.rs\"]\nmod utilities;\n\n#[cfg(feature = \"derive\")]\nuse influxdb::InfluxDbWriteable;\n\nuse chrono::{DateTime, Utc};\nuse influxdb::{Query, ReadQuery, Timestamp};\n\n#[cfg(feature = \"use-serde\")]\nuse serde::Deserialize;\n\nuse utilities::{assert_result_ok, create_client, create_db, delete_db, run_test};\n\n#[derive(Debug, PartialEq)]\n#[cfg_attr(feature = \"derive\", derive(InfluxDbWriteable))]\nstruct WeatherReading {\n    time: DateTime<Utc>,\n    #[influxdb(ignore)]\n    humidity: i32,\n    pressure: i32,\n    #[influxdb(tag)]\n    wind_strength: Option<u64>,\n}\n\n#[derive(Debug)]\n#[cfg_attr(feature = \"use-serde\", derive(Deserialize))]\nstruct WeatherReadingWithoutIgnored {\n    time: DateTime<Utc>,\n    pressure: i32,\n    wind_strength: Option<u64>,\n}\n\n#[test]\nfn test_build_query() {\n    let weather_reading = WeatherReading {\n        time: Timestamp::Hours(1).into(),\n        humidity: 30,\n        pressure: 100,\n        wind_strength: Some(5),\n    };\n    let query = weather_reading.into_query(\"weather_reading\");\n    let query = query.build().unwrap();\n    assert_eq!(\n        query.get(),\n        \"weather_reading,wind_strength=5 pressure=100i 3600000000000\"\n    );\n}\n\n#[cfg(feature = \"derive\")]\n/// INTEGRATION TEST\n///\n/// This integration tests that writing data and retrieving the data again is working\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_derive_simple_write() {\n    const TEST_NAME: &str = \"test_derive_simple_write\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n            let client = create_client(TEST_NAME);\n            let weather_reading = WeatherReading {\n                time: Timestamp::Nanoseconds(0).into(),\n                humidity: 30,\n                wind_strength: Some(5),\n                pressure: 100,\n            };\n            let query = weather_reading.into_query(\"weather_reading\");\n            let result = client.query(&query).await;\n            assert!(result.is_ok(), \"unable to insert into db\");\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This integration tests that writing data and retrieving the data again is working\n#[cfg(feature = \"derive\")]\n#[cfg(feature = \"use-serde\")]\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_write_and_read_option() {\n    const TEST_NAME: &str = \"test_write_and_read_option\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n            let client = create_client(TEST_NAME);\n            let weather_reading = WeatherReading {\n                time: Timestamp::Hours(11).into(),\n                humidity: 30,\n                wind_strength: None,\n                pressure: 100,\n            };\n            let write_result = client\n                .query(&weather_reading.into_query(\"weather_reading\".to_string()))\n                .await;\n            assert_result_ok(&write_result);\n\n            let query = ReadQuery::new(\"SELECT time, pressure, wind_strength FROM weather_reading\");\n            let result = client.json_query(query).await.and_then(|mut db_result| {\n                println!(\"{:?}\", db_result);\n                db_result.deserialize_next::<WeatherReadingWithoutIgnored>()\n            });\n            assert_result_ok(&result);\n            let result = result.unwrap();\n            let value = &result.series[0].values[0];\n            assert_eq!(value.time, Timestamp::Hours(11).into());\n            assert_eq!(value.pressure, 100);\n            assert_eq!(value.wind_strength, None);\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","tests","integration_tests.rs"],"content":"extern crate influxdb;\n\n#[path = \"./utilities.rs\"]\nmod utilities;\nuse utilities::{\n    assert_result_err, assert_result_ok, create_client, create_db, delete_db, run_test,\n};\n\nuse influxdb::InfluxDbWriteable;\nuse influxdb::{Client, Error, ReadQuery, Timestamp};\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether the InfluxDB server can be connected to and gathers info about it - tested with async_std\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_ping_influx_db_async_std() {\n    let client = create_client(\"notusedhere\");\n    let result = client.ping().await;\n    assert_result_ok(&result);\n\n    let (build, version) = result.unwrap();\n    assert!(!build.is_empty(), \"Build should not be empty\");\n    assert!(!version.is_empty(), \"Build should not be empty\");\n\n    println!(\"build: {} version: {}\", build, version);\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether the InfluxDB server can be connected to and gathers info about it - tested with tokio 1.0\n#[tokio::test]\n#[cfg(not(any(tarpaulin_include, feature = \"hyper-client\")))]\nasync fn test_ping_influx_db_tokio() {\n    let client = create_client(\"notusedhere\");\n    let result = client.ping().await;\n    assert_result_ok(&result);\n\n    let (build, version) = result.unwrap();\n    assert!(!build.is_empty(), \"Build should not be empty\");\n    assert!(!version.is_empty(), \"Build should not be empty\");\n\n    println!(\"build: {} version: {}\", build, version);\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests connection error\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_connection_error() {\n    let test_name = \"test_connection_error\";\n    let client =\n        Client::new(\"http://127.0.0.1:10086\", test_name).with_auth(\"nopriv_user\", \"password\");\n    let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n    let read_result = client.query(read_query).await;\n    assert_result_err(&read_result);\n    match read_result {\n        Err(Error::ConnectionError { .. }) => {}\n        _ => panic!(\n            \"Should cause a ConnectionError: {}\",\n            read_result.unwrap_err()\n        ),\n    }\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_authed_write_and_read() {\n    const TEST_NAME: &str = \"test_authed_write_and_read\";\n\n    run_test(\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"CREATE DATABASE {}\", TEST_NAME);\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not setup db\");\n\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_ok(&write_result);\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_ok(&read_result);\n            assert!(\n                !read_result.unwrap().contains(\"error\"),\n                \"Data contained a database error\"\n            );\n        },\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"DROP DATABASE {}\", TEST_NAME);\n\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_wrong_authed_write_and_read() {\n    const TEST_NAME: &str = \"test_wrong_authed_write_and_read\";\n\n    run_test(\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"CREATE DATABASE {}\", TEST_NAME);\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not setup db\");\n\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"wrong_user\", \"password\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_err(&write_result);\n            match write_result {\n                Err(Error::AuthorizationError) => {}\n                _ => panic!(\n                    \"Should be an AuthorizationError: {}\",\n                    write_result.unwrap_err()\n                ),\n            }\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::AuthorizationError) => {}\n                _ => panic!(\n                    \"Should be an AuthorizationError: {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n\n            let client = Client::new(\"http://127.0.0.1:9086\", TEST_NAME)\n                .with_auth(\"nopriv_user\", \"password\");\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::AuthenticationError) => {}\n                _ => panic!(\n                    \"Should be an AuthenticationError: {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n        },\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"DROP DATABASE {}\", TEST_NAME);\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_non_authed_write_and_read() {\n    const TEST_NAME: &str = \"test_non_authed_write_and_read\";\n\n    run_test(\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"CREATE DATABASE {}\", TEST_NAME);\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not setup db\");\n            let non_authed_client = Client::new(\"http://127.0.0.1:9086\", TEST_NAME);\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = non_authed_client.query(write_query).await;\n            assert_result_err(&write_result);\n            match write_result {\n                Err(Error::AuthorizationError) => {}\n                _ => panic!(\n                    \"Should be an AuthorizationError: {}\",\n                    write_result.unwrap_err()\n                ),\n            }\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = non_authed_client.query(read_query).await;\n\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::AuthorizationError) => {}\n                _ => panic!(\n                    \"Should be an AuthorizationError: {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n        },\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"DROP DATABASE {}\", TEST_NAME);\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This integration tests that writing data and retrieving the data again is working\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_write_and_read_field() {\n    const TEST_NAME: &str = \"test_write_field\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n            let client = create_client(TEST_NAME);\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_ok(&write_result);\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_ok(&read_result);\n            assert!(\n                !read_result.unwrap().contains(\"error\"),\n                \"Data contained a database error\"\n            );\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This integration tests that writing data and retrieving the data again is working\n#[async_std::test]\n#[cfg(feature = \"use-serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_write_and_read_option() {\n    use serde::Deserialize;\n\n    const TEST_NAME: &str = \"test_write_and_read_option\";\n\n    run_test(\n        || {\n            async move {\n                create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n                let client = create_client(TEST_NAME);\n                // Todo: Convert this to derive based insert for easier comparison of structs\n                let write_query = Timestamp::Hours(11)\n                    .into_query(\"weather\")\n                    .add_field(\"temperature\", 82)\n                    .add_field(\"wind_strength\", <Option<u64>>::None);\n                let write_result = client.query(write_query).await;\n                assert_result_ok(&write_result);\n\n                #[derive(Deserialize, Debug, PartialEq)]\n                struct Weather {\n                    time: String,\n                    // different order to verify field names\n                    // are being used instead of just order\n                    wind_strength: Option<u64>,\n                    temperature: i32,\n                }\n\n                let query = ReadQuery::new(\"SELECT time, temperature, wind_strength FROM weather\");\n                let result = client\n                    .json_query(query)\n                    .await\n                    .and_then(|mut db_result| db_result.deserialize_next::<Weather>());\n                assert_result_ok(&result);\n\n                assert_eq!(\n                    result.unwrap().series[0].values[0],\n                    Weather {\n                        time: \"1970-01-01T11:00:00Z\".to_string(),\n                        temperature: 82,\n                        wind_strength: None,\n                    }\n                );\n            }\n        },\n        || async move {\n            delete_db(\"test_write_and_read_option\")\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether JSON can be decoded from a InfluxDB response and whether that JSON\n/// is equal to the data which was written to the database\n#[async_std::test]\n#[cfg(feature = \"use-serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_json_query() {\n    use serde::Deserialize;\n\n    const TEST_NAME: &str = \"test_json_query\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n            let client = create_client(TEST_NAME);\n\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_ok(&write_result);\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Weather {\n                time: String,\n                temperature: i32,\n            }\n\n            let query = ReadQuery::new(\"SELECT * FROM weather\");\n            let result = client\n                .json_query(query)\n                .await\n                .and_then(|mut db_result| db_result.deserialize_next::<Weather>());\n            assert_result_ok(&result);\n\n            assert_eq!(\n                result.unwrap().series[0].values[0],\n                Weather {\n                    time: \"1970-01-01T11:00:00Z\".to_string(),\n                    temperature: 82\n                }\n            );\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether the response to a GROUP BY can be parsed by\n/// deserialize_next_tagged into a tags struct\n#[async_std::test]\n#[cfg(feature = \"use-serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_json_query_tagged() {\n    use serde::Deserialize;\n\n    const TEST_NAME: &str = \"test_json_query_tagged\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n            let client = create_client(TEST_NAME);\n\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_tag(\"location\", \"London\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_ok(&write_result);\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct WeatherMeta {\n                location: String,\n            }\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Weather {\n                time: String,\n                temperature: i32,\n            }\n\n            let query = ReadQuery::new(\"SELECT * FROM weather GROUP BY location\");\n            let result = client.json_query(query).await.and_then(|mut db_result| {\n                db_result.deserialize_next_tagged::<WeatherMeta, Weather>()\n            });\n            assert_result_ok(&result);\n            let result = result.unwrap();\n\n            assert_eq!(\n                result.series[0].tags,\n                WeatherMeta {\n                    location: \"London\".to_string(),\n                }\n            );\n            assert_eq!(\n                result.series[0].values[0],\n                Weather {\n                    time: \"1970-01-01T11:00:00Z\".to_string(),\n                    temperature: 82\n                }\n            );\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether JSON can be decoded from a InfluxDB response and wether that JSON\n/// is equal to the data which was written to the database\n/// (tested with tokio)\n#[tokio::test]\n#[cfg(all(\n    feature = \"use-serde\",\n    not(any(tarpaulin_include, feature = \"hyper-client\"))\n))]\nasync fn test_json_query_vec() {\n    use serde::Deserialize;\n\n    const TEST_NAME: &str = \"test_json_query_vec\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n            let client = create_client(TEST_NAME);\n            let write_query1 = Timestamp::Hours(11)\n                .into_query(\"temperature_vec\")\n                .add_field(\"temperature\", 16);\n            let write_query2 = Timestamp::Hours(12)\n                .into_query(\"temperature_vec\")\n                .add_field(\"temperature\", 17);\n            let write_query3 = Timestamp::Hours(13)\n                .into_query(\"temperature_vec\")\n                .add_field(\"temperature\", 18);\n\n            let _write_result = client.query(write_query1).await;\n            let _write_result2 = client.query(write_query2).await;\n            let _write_result2 = client.query(write_query3).await;\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Weather {\n                time: String,\n                temperature: i32,\n            }\n\n            let query = ReadQuery::new(\"SELECT * FROM temperature_vec\");\n            let result = client\n                .json_query(query)\n                .await\n                .and_then(|mut db_result| db_result.deserialize_next::<Weather>());\n            assert_result_ok(&result);\n            assert_eq!(result.unwrap().series[0].values.len(), 3);\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This integration test tests whether using the wrong query method fails building the query\n#[async_std::test]\n#[cfg(feature = \"use-serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_serde_multi_query() {\n    use serde::Deserialize;\n\n    const TEST_NAME: &str = \"test_serde_multi_query\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Temperature {\n                time: String,\n                temperature: i32,\n            }\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Humidity {\n                time: String,\n                humidity: i32,\n            }\n\n            let client = create_client(TEST_NAME);\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"temperature\")\n                .add_field(\"temperature\", 16);\n            let write_query2 = Timestamp::Hours(11)\n                .into_query(\"humidity\")\n                .add_field(\"humidity\", 69);\n\n            let write_result = client.query(write_query).await;\n            let write_result2 = client.query(write_query2).await;\n            assert_result_ok(&write_result);\n            assert_result_ok(&write_result2);\n\n            let result = client\n                .json_query(\n                    ReadQuery::new(\"SELECT * FROM temperature\").add_query(\"SELECT * FROM humidity\"),\n                )\n                .await\n                .and_then(|mut db_result| {\n                    let temp = db_result.deserialize_next::<Temperature>()?;\n                    let humidity = db_result.deserialize_next::<Humidity>()?;\n\n                    Ok((temp, humidity))\n                });\n            assert_result_ok(&result);\n\n            let (temp, humidity) = result.unwrap();\n            assert_eq!(\n                temp.series[0].values[0],\n                Temperature {\n                    time: \"1970-01-01T11:00:00Z\".to_string(),\n                    temperature: 16\n                },\n            );\n            assert_eq!(\n                humidity.series[0].values[0],\n                Humidity {\n                    time: \"1970-01-01T11:00:00Z\".to_string(),\n                    humidity: 69\n                }\n            );\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This integration test tests whether using the wrong query method fails building the query\n#[async_std::test]\n#[cfg(feature = \"use-serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_wrong_query_errors() {\n    let client = create_client(\"test_name\");\n    let result = client\n        .json_query(ReadQuery::new(\"CREATE DATABASE this_should_fail\"))\n        .await;\n    assert!(\n        result.is_err(),\n        \"Should only build SELECT and SHOW queries.\"\n    );\n}\n","traces":[{"line":32,"address":[2308144,2308264,2307780,2307639,2308668,2308332,2308169,2309512],"length":1,"stats":{"Line":5},"fn_name":"{async_block#0}"},{"line":34,"address":[2307602,2307632,2308065,2308116,2307584],"length":1,"stats":{"Line":3},"fn_name":"{closure#0}"},{"line":35,"address":[2308222],"length":1,"stats":{"Line":1},"fn_name":null},{"line":36,"address":[2267347],"length":1,"stats":{"Line":4},"fn_name":null},{"line":37,"address":[2308831],"length":1,"stats":{"Line":1},"fn_name":null},{"line":39,"address":[2308879],"length":1,"stats":{"Line":1},"fn_name":null},{"line":43,"address":[2307811,2309243,2308076,2309164],"length":1,"stats":{"Line":4},"fn_name":null},{"line":455,"address":[2343273,2343674,2343731,2343248,2343344,2343412,2342749,2342890],"length":1,"stats":{"Line":5},"fn_name":"{async_block#0}"},{"line":460,"address":[2342706,2342736,2342688,2343175,2343226],"length":1,"stats":{"Line":3},"fn_name":"{closure#0}"},{"line":466,"address":[2343790,2343858,2344344,2343824,2344003,2344637,2343776],"length":1,"stats":{"Line":4},"fn_name":"{closure#0}"},{"line":467,"address":[2344030,2344472,2344648,2344296,2343920],"length":1,"stats":{"Line":5},"fn_name":null},{"line":469,"address":[2344838],"length":1,"stats":{"Line":1},"fn_name":null},{"line":470,"address":[2344872,2345026],"length":1,"stats":{"Line":2},"fn_name":null},{"line":472,"address":[2345067],"length":1,"stats":{"Line":1},"fn_name":null},{"line":473,"address":[2345233,2345082],"length":1,"stats":{"Line":2},"fn_name":null},{"line":475,"address":[2345281],"length":1,"stats":{"Line":1},"fn_name":null},{"line":476,"address":[2345296,2345447],"length":1,"stats":{"Line":2},"fn_name":null},{"line":478,"address":[2345488],"length":1,"stats":{"Line":1},"fn_name":null},{"line":480,"address":[2235753],"length":1,"stats":{"Line":4},"fn_name":null},{"line":481,"address":[2235774],"length":1,"stats":{"Line":4},"fn_name":null},{"line":482,"address":[2235795],"length":1,"stats":{"Line":4},"fn_name":null},{"line":484,"address":[2361488,2361990,2361499,2363148,2363428,2363856,2363609,2362185,2361698,2361840,2361968,2363350,2364000,2361929,2361648,2364063,2361609,2363898,2361584,2361852,2363237,2361904],"length":1,"stats":{"Line":13},"fn_name":"deserialize<serde::de::value::MapAccessDeserializer<influxdb::integrations::serde_integration::de::HeaderMapAccess<&mut serde_json::value::de::SeqDeserializer>>>"},{"line":486,"address":[2364023,2363884],"length":1,"stats":{"Line":0},"fn_name":null},{"line":487,"address":[2364028,2363889],"length":1,"stats":{"Line":0},"fn_name":null},{"line":490,"address":[2346986],"length":1,"stats":{"Line":1},"fn_name":null},{"line":491,"address":[2347060,2347345,2347282,2347107,2347490],"length":1,"stats":{"Line":5},"fn_name":null},{"line":492,"address":[2347075],"length":1,"stats":{"Line":1},"fn_name":null},{"line":493,"address":[2235816],"length":1,"stats":{"Line":4},"fn_name":null},{"line":494,"address":[2348208,2348192,2347497],"length":1,"stats":{"Line":3},"fn_name":"{closure#0}"},{"line":495,"address":[2347513],"length":1,"stats":{"Line":1},"fn_name":null},{"line":496,"address":[2347561],"length":1,"stats":{"Line":1},"fn_name":null},{"line":498,"address":[2348318,2348528,2348304,2348377,2348460,2348352,2348789],"length":1,"stats":{"Line":4},"fn_name":"{closure#1}"},{"line":499,"address":[2348430,2348650,2348800,2348481],"length":1,"stats":{"Line":4},"fn_name":null},{"line":502,"address":[2343365,2343534,2343186,2342964,2343630,2343112,2343685],"length":1,"stats":{"Line":5},"fn_name":null}],"covered":32,"coverable":34},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","tests","integration_tests_v2.rs"],"content":"extern crate influxdb;\n\n#[path = \"./utilities.rs\"]\nmod utilities;\nuse utilities::{assert_result_err, assert_result_ok, run_test};\n\nuse influxdb::InfluxDbWriteable;\nuse influxdb::{Client, Error, ReadQuery, Timestamp};\n\n/// INTEGRATION TEST\n///\n\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin))]\nasync fn test_authed_write_and_read() {\n    run_test(\n        || async move {\n            let client = Client::new(\"http://127.0.0.1:9086\", \"mydb\").with_token(\"admintoken\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(&write_query).await;\n            assert_result_ok(&write_result);\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_ok(&read_result);\n            assert!(\n                !read_result.unwrap().contains(\"error\"),\n                \"Data contained a database error\"\n            );\n        },\n        || async move {\n            let client = Client::new(\"http://127.0.0.1:9086\", \"mydb\").with_token(\"admintoken\");\n            let read_query = ReadQuery::new(\"DELETE MEASUREMENT weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_ok(&read_result);\n            assert!(!read_result.unwrap().contains(\"error\"), \"Teardown failed\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin))]\nasync fn test_wrong_authed_write_and_read() {\n    run_test(\n        || async move {\n            let client = Client::new(\"http://127.0.0.1:9086\", \"mydb\").with_token(\"falsetoken\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(&write_query).await;\n            assert_result_err(&write_result);\n            match write_result {\n                Err(Error::AuthorizationError) => {}\n                _ => panic!(\n                    \"Should be an AuthorizationError: {}\",\n                    write_result.unwrap_err()\n                ),\n            }\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(&read_query).await;\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::AuthorizationError) => {}\n                _ => panic!(\n                    \"Should be an AuthorizationError: {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n        },\n        || async move {},\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin))]\nasync fn test_non_authed_write_and_read() {\n    run_test(\n        || async move {\n            let non_authed_client = Client::new(\"http://127.0.0.1:9086\", \"mydb\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = non_authed_client.query(&write_query).await;\n            assert_result_err(&write_result);\n            match write_result {\n                Err(Error::AuthorizationError) => {}\n                _ => panic!(\n                    \"Should be an AuthorizationError: {}\",\n                    write_result.unwrap_err()\n                ),\n            }\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = non_authed_client.query(&read_query).await;\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::AuthorizationError) => {}\n                _ => panic!(\n                    \"Should be an AuthorizationError: {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n        },\n        || async move {},\n    )\n    .await;\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","tests","utilities.rs"],"content":"use futures_util::FutureExt;\nuse influxdb::{Client, Error, ReadQuery};\nuse std::future::Future;\nuse std::panic::{AssertUnwindSafe, UnwindSafe};\n\n#[allow(dead_code)]\n#[cfg(not(tarpaulin_include))]\npub fn assert_result_err<A: std::fmt::Debug, B: std::fmt::Debug>(result: &Result<A, B>) {\n    result.as_ref().expect_err(\"assert_result_err failed\");\n}\n\n#[cfg(not(tarpaulin_include))]\npub fn assert_result_ok<A: std::fmt::Debug, B: std::fmt::Debug>(result: &Result<A, B>) {\n    result.as_ref().expect(\"assert_result_ok failed\");\n}\n\n#[allow(dead_code)]\n#[cfg(not(tarpaulin_include))]\npub fn create_client<T>(db_name: T) -> Client\nwhere\n    T: Into<String>,\n{\n    Client::new(\"http://127.0.0.1:8086\", db_name)\n}\n\n#[allow(dead_code)]\n#[cfg(not(tarpaulin_include))]\npub async fn create_db<T>(name: T) -> Result<String, Error>\nwhere\n    T: Into<String>,\n{\n    let test_name = name.into();\n    let query = format!(\"CREATE DATABASE {}\", test_name);\n    create_client(test_name).query(ReadQuery::new(query)).await\n}\n\n#[allow(dead_code)]\n#[cfg(not(tarpaulin_include))]\npub async fn delete_db<T>(name: T) -> Result<String, Error>\nwhere\n    T: Into<String>,\n{\n    let test_name = name.into();\n    let query = format!(\"DROP DATABASE {}\", test_name);\n    create_client(test_name).query(ReadQuery::new(query)).await\n}\n\n#[cfg(not(tarpaulin_include))]\npub async fn run_test<F, T, Fut1, Fut2>(test_fn: F, teardown: T)\nwhere\n    F: FnOnce() -> Fut1 + UnwindSafe,\n    T: FnOnce() -> Fut2,\n    Fut1: Future,\n    Fut2: Future,\n{\n    let test_result = AssertUnwindSafe(test_fn()).catch_unwind().await;\n    AssertUnwindSafe(teardown())\n        .catch_unwind()\n        .await\n        .expect(\"failed teardown\");\n    test_result.expect(\"failed test\");\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb_derive","src","lib.rs"],"content":"use proc_macro::TokenStream;\nuse proc_macro2::TokenStream as TokenStream2;\nuse quote::quote;\n\nmod writeable;\nuse writeable::expand_writeable;\n\nfn krate() -> TokenStream2 {\n    quote!(::influxdb)\n}\n\n#[proc_macro_derive(InfluxDbWriteable, attributes(influxdb))]\npub fn derive_writeable(tokens: TokenStream) -> TokenStream {\n    expand_writeable(tokens)\n}\n","traces":[{"line":8,"address":[251024,250912],"length":1,"stats":{"Line":0},"fn_name":"krate"},{"line":9,"address":[250929],"length":1,"stats":{"Line":0},"fn_name":null},{"line":13,"address":[251056],"length":1,"stats":{"Line":0},"fn_name":"derive_writeable"},{"line":14,"address":[251061],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":4},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb_derive","src","writeable.rs"],"content":"use proc_macro::TokenStream;\nuse proc_macro2::{TokenStream as TokenStream2, TokenTree};\nuse quote::{format_ident, quote};\nuse syn::{parse_macro_input, Field, Fields, Ident, ItemStruct};\n\n#[derive(Debug)]\nstruct WriteableField {\n    ident: Ident,\n    is_tag: bool,\n    is_ignore: bool,\n}\n\nimpl From<Field> for WriteableField {\n    fn from(field: Field) -> WriteableField {\n        let ident = field.ident.expect(\"fields without ident are not supported\");\n\n        let check_influx_aware = |attr: &syn::Attribute| -> bool {\n            attr.path\n                .segments\n                .iter()\n                .last()\n                .map(|seg| seg.ident.to_string())\n                .unwrap_or_default()\n                == \"influxdb\"\n        };\n\n        let check_for_attr = |token_tree, ident_cmp: &str| -> bool {\n            match token_tree {\n                TokenTree::Group(group) => group\n                    .stream()\n                    .into_iter()\n                    .next()\n                    .map(|token_tree| match token_tree {\n                        TokenTree::Ident(ident) => ident == ident_cmp,\n                        _ => false,\n                    })\n                    .unwrap(),\n                _ => false,\n            }\n        };\n\n        let is_ignore = field.attrs.iter().any(|attr| {\n            if !check_influx_aware(attr) {\n                return false;\n            }\n\n            attr.tokens\n                .clone()\n                .into_iter()\n                .next()\n                .map(|token_tree| check_for_attr(token_tree, \"ignore\"))\n                .unwrap()\n        });\n\n        let is_tag = field.attrs.iter().any(|attr| {\n            if !check_influx_aware(attr) {\n                return false;\n            }\n            attr.tokens\n                .clone()\n                .into_iter()\n                .next()\n                .map(|token_tree| check_for_attr(token_tree, \"tag\"))\n                .unwrap()\n        });\n\n        WriteableField {\n            ident,\n            is_tag,\n            is_ignore,\n        }\n    }\n}\n\npub fn expand_writeable(tokens: TokenStream) -> TokenStream {\n    let krate = super::krate();\n    let input = parse_macro_input!(tokens as ItemStruct);\n    let ident = input.ident;\n    let generics = input.generics;\n\n    let time_field = format_ident!(\"time\");\n    #[allow(clippy::cmp_owned)] // that's not how idents work clippy\n    let fields: Vec<TokenStream2> = match input.fields {\n        Fields::Named(fields) => fields\n            .named\n            .into_iter()\n            .map(WriteableField::from)\n            .filter(|field| !field.is_ignore)\n            .filter(|field| field.ident.to_string() != time_field.to_string())\n            .map(|field| {\n                let ident = field.ident;\n                #[allow(clippy::match_bool)]\n                match field.is_tag {\n                    true => quote!(query.add_tag(stringify!(#ident), self.#ident)),\n                    false => quote!(query.add_field(stringify!(#ident), self.#ident)),\n                }\n            })\n            .collect(),\n        _ => panic!(\"a struct without named fields is not supported\"),\n    };\n\n    let output = quote! {\n        impl #generics #krate::InfluxDbWriteable for #ident #generics\n        {\n            fn into_query<I: Into<String>>(self, name : I) -> #krate::WriteQuery\n            {\n                let timestamp : #krate::Timestamp = self.#time_field.into();\n                let mut query = timestamp.into_query(name);\n                #(\n                    query = #fields;\n                )*\n                query\n            }\n        }\n    };\n    output.into()\n}\n","traces":[{"line":14,"address":[240789,240112,240742],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":15,"address":[240134],"length":1,"stats":{"Line":0},"fn_name":null},{"line":17,"address":[241097,240928],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":18,"address":[240955],"length":1,"stats":{"Line":0},"fn_name":null},{"line":22,"address":[241136,241120],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":27,"address":[241632,241543,241152],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"},{"line":28,"address":[241182],"length":1,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[241372,241233,241468],"length":1,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[242014,241460,241728,241742,241950],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":34,"address":[241787,241892],"length":1,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[241843],"length":1,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[241282],"length":1,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[240332,242096,240259,242373],"length":1,"stats":{"Line":0},"fn_name":"{closure#2}"},{"line":43,"address":[242129],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[242221],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[242298,242171],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[242286,242400,242409],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":55,"address":[240464,242512,242789],"length":1,"stats":{"Line":0},"fn_name":"{closure#3}"},{"line":56,"address":[242545],"length":1,"stats":{"Line":0},"fn_name":null},{"line":57,"address":[242637],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[242714,242587],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[242816,242825,242702],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":75,"address":[242928,243586,247084],"length":1,"stats":{"Line":0},"fn_name":"expand_writeable"},{"line":76,"address":[242939],"length":1,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[243032,243097,243436,243597],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[243218],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[243274],"length":1,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[243736,243394],"length":1,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[243955],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[244175,243966,244129],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[247133,247120],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":89,"address":[247152,247171,244167],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"},{"line":90,"address":[248757,247376,247909],"length":1,"stats":{"Line":0},"fn_name":"{closure#2}"},{"line":91,"address":[247414],"length":1,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[247434],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[247920,247519,247462],"length":1,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[247440,248132],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[244252,244311],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[246511],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":39}]}