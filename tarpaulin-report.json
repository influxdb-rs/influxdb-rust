{"files":[{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","benches","client.rs"],"content":"use chrono::{DateTime, Utc};\nuse influxdb::Error;\nuse influxdb::InfluxDbWriteable;\nuse influxdb::{Client, ReadQuery};\nuse std::sync::Arc;\nuse std::time::Instant;\nuse tokio::sync::mpsc::unbounded_channel;\nuse tokio::sync::Semaphore;\n\n#[derive(InfluxDbWriteable, Clone)]\nstruct WeatherReading {\n    time: DateTime<Utc>,\n    humidity: i32,\n    #[influxdb(tag)]\n    wind_direction: String,\n}\n\n#[tokio::main]\nasync fn main() {\n    let db_name = \"bench\";\n    let url = \"http://localhost:8086\";\n    let number_of_total_requests = 20000;\n    let concurrent_requests = 1000;\n\n    let client = Client::new(url, db_name);\n    let concurrency_limit = Arc::new(Semaphore::new(concurrent_requests));\n\n    prepare_influxdb(&client, db_name).await;\n    let measurements = generate_measurements(number_of_total_requests);\n    let (tx, mut rx) = unbounded_channel::<Result<String, Error>>();\n\n    let start = Instant::now();\n    for m in measurements {\n        let permit = concurrency_limit.clone().acquire_owned().await;\n        let client_task = client.clone();\n        let tx_task = tx.clone();\n        tokio::spawn(async move {\n            let res = client_task.query(&m.into_query(\"weather\")).await;\n            let _ = tx_task.send(res);\n            drop(permit);\n        });\n    }\n    drop(tx);\n\n    let mut successful_count = 0;\n    let mut error_count = 0;\n    while let Some(res) = rx.recv().await {\n        if res.is_err() {\n            error_count += 1;\n        } else {\n            successful_count += 1;\n        }\n    }\n\n    let end = Instant::now();\n\n    println!(\n        \"Throughput: {:.1} request/s\",\n        1000000.0 * successful_count as f64 / (end - start).as_micros() as f64\n    );\n    println!(\n        \"{} successful requests, {} errors\",\n        successful_count, error_count\n    );\n}\n\nasync fn prepare_influxdb(client: &Client, db_name: &str) {\n    let create_db_stmt = format!(\"CREATE DATABASE {}\", db_name);\n    client\n        .query(&ReadQuery::new(create_db_stmt))\n        .await\n        .expect(\"failed to create database\");\n}\n\nfn generate_measurements(n: u64) -> Vec<WeatherReading> {\n    (0..n)\n        .collect::<Vec<u64>>()\n        .iter_mut()\n        .map(|_| WeatherReading {\n            time: Utc::now(),\n            humidity: 30,\n            wind_direction: String::from(\"north\"),\n        })\n        .collect()\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","client","mod.rs"],"content":"//! Client which can read and write data from InfluxDB.\n//!\n//! # Arguments\n//!\n//!  * `url`: The URL where InfluxDB is running (ex. `http://localhost:8086`).\n//!  * `database`: The Database against which queries and writes will be run.\n//!\n//! # Examples\n//!\n//! ```rust\n//! use influxdb::Client;\n//!\n//! let client = Client::new(\"http://localhost:8086\", \"test\");\n//!\n//! assert_eq!(client.database_name(), \"test\");\n//! ```\n\nuse futures_util::TryFutureExt;\n#[cfg(feature = \"reqwest\")]\nuse reqwest::{Client as HttpClient, RequestBuilder, Response as HttpResponse};\nuse std::collections::{BTreeMap, HashMap};\nuse std::fmt::{self, Debug, Formatter};\nuse std::sync::Arc;\n#[cfg(feature = \"surf\")]\nuse surf::{Client as HttpClient, RequestBuilder, Response as HttpResponse};\n\nuse crate::query::QueryType;\nuse crate::Error;\nuse crate::Query;\n\n#[derive(Clone)]\n/// Internal Representation of a Client\npub struct Client {\n    pub(crate) url: Arc<String>,\n    pub(crate) parameters: Arc<HashMap<&'static str, String>>,\n    pub(crate) token: Option<String>,\n    pub(crate) client: HttpClient,\n}\n\nstruct RedactPassword<'a>(&'a HashMap<&'static str, String>);\n\nimpl<'a> Debug for RedactPassword<'a> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n        let entries = self\n            .0\n            .iter()\n            .map(|(k, v)| match *k {\n                \"p\" => (*k, \"<redacted>\"),\n                _ => (*k, v.as_str()),\n            })\n            .collect::<BTreeMap<&'static str, &str>>();\n        f.debug_map().entries(entries).finish()\n    }\n}\n\nimpl Debug for Client {\n    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"Client\")\n            .field(\"url\", &self.url)\n            .field(\"parameters\", &RedactPassword(&self.parameters))\n            .finish_non_exhaustive()\n    }\n}\n\nimpl Client {\n    /// Instantiates a new [`Client`](crate::Client)\n    ///\n    /// # Arguments\n    ///\n    ///  * `url`: The URL where InfluxDB is running (ex. `http://localhost:8086`).\n    ///  * `database`: The Database against which queries and writes will be run.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::Client;\n    ///\n    /// let _client = Client::new(\"http://localhost:8086\", \"test\");\n    /// ```\n    #[must_use = \"Creating a client is pointless unless you use it\"]\n    pub fn new<S1, S2>(url: S1, database: S2) -> Self\n    where\n        S1: Into<String>,\n        S2: Into<String>,\n    {\n        let mut parameters = HashMap::<&str, String>::new();\n        parameters.insert(\"db\", database.into());\n        Client {\n            url: Arc::new(url.into()),\n            parameters: Arc::new(parameters),\n            client: HttpClient::new(),\n            token: None,\n        }\n    }\n\n    /// Add authentication/authorization information to [`Client`](crate::Client)\n    ///\n    /// # Arguments\n    ///\n    /// * username: The Username for InfluxDB.\n    /// * password: The Password for the user.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::Client;\n    ///\n    /// let _client = Client::new(\"http://localhost:9086\", \"test\").with_auth(\"admin\", \"password\");\n    /// ```\n    #[must_use = \"Creating a client is pointless unless you use it\"]\n    pub fn with_auth<S1, S2>(mut self, username: S1, password: S2) -> Self\n    where\n        S1: Into<String>,\n        S2: Into<String>,\n    {\n        let mut with_auth = self.parameters.as_ref().clone();\n        with_auth.insert(\"u\", username.into());\n        with_auth.insert(\"p\", password.into());\n        self.parameters = Arc::new(with_auth);\n        self\n    }\n\n    /// Replaces the HTTP Client\n    #[must_use = \"Creating a client is pointless unless you use it\"]\n    pub fn with_http_client(mut self, http_client: HttpClient) -> Self {\n        self.client = http_client;\n        self\n    }\n\n    /// Add authorization token to [`Client`](crate::Client)\n    ///\n    /// This is designed for influxdb 2.0's backward-compatible API which\n    /// requires authorization by default. You can create such token from\n    /// console of influxdb 2.0 .\n    pub fn with_token<S>(mut self, token: S) -> Self\n    where\n        S: Into<String>,\n    {\n        self.token = Some(token.into());\n        self\n    }\n\n    /// Returns the name of the database the client is using\n    pub fn database_name(&self) -> &str {\n        // safe to unwrap: we always set the database name in `Self::new`\n        self.parameters.get(\"db\").unwrap()\n    }\n\n    /// Returns the URL of the InfluxDB installation the client is using\n    pub fn database_url(&self) -> &str {\n        &self.url\n    }\n\n    /// Pings the InfluxDB Server\n    ///\n    /// Returns a tuple of build type and version number\n    pub async fn ping(&self) -> Result<(String, String), Error> {\n        let url = &format!(\"{}/ping\", self.url);\n        let res = self\n            .client\n            .get(url)\n            .send()\n            .await\n            .map_err(|err| Error::ProtocolError {\n                error: err.to_string(),\n            })?;\n\n        const BUILD_HEADER: &str = \"X-Influxdb-Build\";\n        const VERSION_HEADER: &str = \"X-Influxdb-Version\";\n\n        #[cfg(feature = \"reqwest\")]\n        let (build, version) = {\n            let hdrs = res.headers();\n            (\n                hdrs.get(BUILD_HEADER).and_then(|value| value.to_str().ok()),\n                hdrs.get(VERSION_HEADER)\n                    .and_then(|value| value.to_str().ok()),\n            )\n        };\n\n        #[cfg(feature = \"surf\")]\n        let build = res.header(BUILD_HEADER).map(|value| value.as_str());\n        #[cfg(feature = \"surf\")]\n        let version = res.header(VERSION_HEADER).map(|value| value.as_str());\n\n        Ok((build.unwrap().to_owned(), version.unwrap().to_owned()))\n    }\n\n    /// Sends a [`ReadQuery`](crate::ReadQuery) or [`WriteQuery`](crate::WriteQuery) to the InfluxDB Server.\n    ///\n    /// A version capable of parsing the returned string is available under the [serde_integration](crate::integrations::serde_integration)\n    ///\n    /// # Arguments\n    ///\n    ///  * `q`: Query of type [`ReadQuery`](crate::ReadQuery) or [`WriteQuery`](crate::WriteQuery)\n    ///\n    /// # Examples\n    ///\n    /// ```rust,no_run\n    /// use influxdb::{Client, Query, Timestamp};\n    /// use influxdb::InfluxDbWriteable;\n    /// use std::time::{SystemTime, UNIX_EPOCH};\n    ///\n    /// # #[async_std::main]\n    /// # async fn main() -> Result<(), influxdb::Error> {\n    /// let start = SystemTime::now();\n    /// let since_the_epoch = start\n    ///   .duration_since(UNIX_EPOCH)\n    ///   .expect(\"Time went backwards\")\n    ///   .as_millis();\n    ///\n    /// let client = Client::new(\"http://localhost:8086\", \"test\");\n    /// let query = Timestamp::Milliseconds(since_the_epoch)\n    ///     .into_query(\"weather\")\n    ///     .add_field(\"temperature\", 82);\n    /// let results = client.query(query).await?;\n    ///\n    /// # Ok(())\n    /// # }\n    /// ```\n    /// # Errors\n    ///\n    /// If the function can not finish the query,\n    /// a [`Error`] variant will be returned.\n    ///\n    /// [`Error`]: enum.Error.html\n    pub async fn query<Q>(&self, q: Q) -> Result<String, Error>\n    where\n        Q: Query,\n    {\n        let query = q.build().map_err(|err| Error::InvalidQueryError {\n            error: err.to_string(),\n        })?;\n\n        let mut parameters = self.parameters.as_ref().clone();\n        let request_builder = match q.get_type() {\n            QueryType::ReadQuery => {\n                let read_query = query.get();\n                let url = &format!(\"{}/query\", &self.url);\n                parameters.insert(\"q\", read_query.clone());\n\n                if read_query.contains(\"SELECT\") || read_query.contains(\"SHOW\") {\n                    self.client.get(url).query(&parameters)\n                } else {\n                    self.client.post(url).query(&parameters)\n                }\n            }\n            QueryType::WriteQuery(precision) => {\n                let url = &format!(\"{}/write\", &self.url);\n                let mut parameters = self.parameters.as_ref().clone();\n                parameters.insert(\"precision\", precision);\n\n                self.client.post(url).body(query.get()).query(&parameters)\n            }\n        };\n\n        #[cfg(feature = \"surf\")]\n        let request_builder = request_builder.map_err(|err| Error::UrlConstructionError {\n            error: err.to_string(),\n        })?;\n\n        let res = self\n            .auth_if_needed(request_builder)\n            .send()\n            .map_err(|err| Error::ConnectionError {\n                error: err.to_string(),\n            })\n            .await?;\n        check_status(&res)?;\n\n        #[cfg(feature = \"reqwest\")]\n        let body = res.text();\n        #[cfg(feature = \"surf\")]\n        let mut res = res;\n        #[cfg(feature = \"surf\")]\n        let body = res.body_string();\n\n        let s = body.await.map_err(|_| Error::DeserializationError {\n            error: \"response could not be converted to UTF-8\".into(),\n        })?;\n\n        // todo: improve error parsing without serde\n        if s.contains(\"\\\"error\\\"\") || s.contains(\"\\\"Error\\\"\") {\n            return Err(Error::DatabaseError {\n                error: format!(\"influxdb error: {s:?}\"),\n            });\n        }\n\n        Ok(s)\n    }\n\n    fn auth_if_needed(&self, rb: RequestBuilder) -> RequestBuilder {\n        if let Some(ref token) = self.token {\n            rb.header(\"Authorization\", format!(\"Token {token}\"))\n        } else {\n            rb\n        }\n    }\n}\n\npub(crate) fn check_status(res: &HttpResponse) -> Result<(), Error> {\n    let status = res.status();\n    if !status.is_success() {\n        return Err(Error::ApiError(status.into()));\n    }\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::Client;\n    use indoc::indoc;\n\n    #[test]\n    fn test_client_debug_redacted_password() {\n        let client = Client::new(\"https://localhost:8086\", \"db\").with_auth(\"user\", \"pass\");\n        let actual = format!(\"{client:#?}\");\n        let expected = indoc! { r#\"\n            Client {\n                url: \"https://localhost:8086\",\n                parameters: {\n                    \"db\": \"db\",\n                    \"p\": \"<redacted>\",\n                    \"u\": \"user\",\n                },\n                ..\n            }\n        \"# };\n        assert_eq!(actual.trim(), expected.trim());\n    }\n\n    #[test]\n    fn test_fn_database() {\n        let client = Client::new(\"http://localhost:8068\", \"database\");\n        assert_eq!(client.database_name(), \"database\");\n        assert_eq!(client.database_url(), \"http://localhost:8068\");\n    }\n\n    #[test]\n    fn test_with_auth() {\n        let client = Client::new(\"http://localhost:8068\", \"database\");\n        assert_eq!(client.parameters.len(), 1);\n        assert_eq!(client.parameters.get(\"db\").unwrap(), \"database\");\n\n        let with_auth = client.with_auth(\"username\", \"password\");\n        assert_eq!(with_auth.parameters.len(), 3);\n        assert_eq!(with_auth.parameters.get(\"db\").unwrap(), \"database\");\n        assert_eq!(with_auth.parameters.get(\"u\").unwrap(), \"username\");\n        assert_eq!(with_auth.parameters.get(\"p\").unwrap(), \"password\");\n\n        let client = Client::new(\"http://localhost:8068\", \"database\");\n        let with_auth = client.with_token(\"token\");\n        assert_eq!(with_auth.parameters.len(), 1);\n        assert_eq!(with_auth.parameters.get(\"db\").unwrap(), \"database\");\n        assert_eq!(with_auth.token.unwrap(), \"token\");\n    }\n}\n","traces":[{"line":43,"address":[7573200,7573482,7573511],"length":1,"stats":{"Line":1}},{"line":44,"address":[7107020,7107079],"length":1,"stats":{"Line":2}},{"line":45,"address":[],"length":0,"stats":{"Line":0}},{"line":47,"address":[2013653,2013888,2013927],"length":1,"stats":{"Line":3}},{"line":48,"address":[2013937,2014040],"length":1,"stats":{"Line":2}},{"line":49,"address":[],"length":0,"stats":{"Line":1}},{"line":52,"address":[2013743,2013686],"length":1,"stats":{"Line":2}},{"line":57,"address":[7107520],"length":1,"stats":{"Line":1}},{"line":58,"address":[2014114],"length":1,"stats":{"Line":1}},{"line":59,"address":[7107565],"length":1,"stats":{"Line":1}},{"line":60,"address":[7107608],"length":1,"stats":{"Line":1}},{"line":81,"address":[2014956,2014256,2014921],"length":1,"stats":{"Line":11}},{"line":86,"address":[2014325],"length":1,"stats":{"Line":11}},{"line":87,"address":[2014428,2014508],"length":1,"stats":{"Line":22}},{"line":89,"address":[],"length":0,"stats":{"Line":10}},{"line":90,"address":[2563634,2563518,2564394,2564278],"length":1,"stats":{"Line":20}},{"line":91,"address":[2316834,2317578],"length":1,"stats":{"Line":10}},{"line":111,"address":[2014976,2015613,2015647],"length":1,"stats":{"Line":6}},{"line":116,"address":[2015058,2015165],"length":1,"stats":{"Line":10}},{"line":117,"address":[2015190,2015262],"length":1,"stats":{"Line":12}},{"line":118,"address":[2015331],"length":1,"stats":{"Line":6}},{"line":119,"address":[2576355],"length":1,"stats":{"Line":5}},{"line":120,"address":[2015567],"length":1,"stats":{"Line":6}},{"line":125,"address":[2015789,2015664],"length":1,"stats":{"Line":0}},{"line":126,"address":[7107785,7107716],"length":1,"stats":{"Line":0}},{"line":127,"address":[2015769],"length":1,"stats":{"Line":0}},{"line":135,"address":[2015808,2016070],"length":1,"stats":{"Line":1}},{"line":139,"address":[2015928,2015866],"length":1,"stats":{"Line":2}},{"line":140,"address":[2016047],"length":1,"stats":{"Line":1}},{"line":144,"address":[2016096],"length":1,"stats":{"Line":1}},{"line":146,"address":[7574143,7574056],"length":1,"stats":{"Line":2}},{"line":150,"address":[7107952],"length":1,"stats":{"Line":1}},{"line":151,"address":[7107957],"length":1,"stats":{"Line":1}},{"line":157,"address":[7108589,7108221,7107992,7109880,7108178,7108016,7108063,7107984],"length":1,"stats":{"Line":4}},{"line":158,"address":[7108155,7108271],"length":1,"stats":{"Line":2}},{"line":159,"address":[2017180,2017049,2016655,2016772,2017113],"length":1,"stats":{"Line":4}},{"line":161,"address":[7108407],"length":1,"stats":{"Line":1}},{"line":163,"address":[7108501,7108615,7108808,7108208,7108558],"length":1,"stats":{"Line":4}},{"line":164,"address":[7575039,7576176,7576251,7576304,7576310],"length":1,"stats":{"Line":1}},{"line":165,"address":[7576194],"length":1,"stats":{"Line":0}},{"line":172,"address":[7575551],"length":1,"stats":{"Line":1}},{"line":173,"address":[7575288,7575355],"length":1,"stats":{"Line":2}},{"line":175,"address":[2018320,2017386,2018329],"length":1,"stats":{"Line":3}},{"line":176,"address":[2017460],"length":1,"stats":{"Line":1}},{"line":177,"address":[7576377,7576368,7575478],"length":1,"stats":{"Line":3}},{"line":186,"address":[7109417,7109507],"length":1,"stats":{"Line":2}},{"line":227,"address":[2323036,2317824,2318028,2317872],"length":1,"stats":{"Line":16}},{"line":231,"address":[2575418,2575600,2575674,2575722,2567799,2570211,2570382,2565060,2565234,2572885,2565328,2570476,2575296,2575370],"length":1,"stats":{"Line":17}},{"line":232,"address":[2327810,2327954],"length":1,"stats":{"Line":0}},{"line":235,"address":[2318513,2318589,2323489,2323565],"length":1,"stats":{"Line":18}},{"line":236,"address":[2565553,2565650,2570783,2570692],"length":1,"stats":{"Line":18}},{"line":237,"address":[],"length":0,"stats":{"Line":0}},{"line":238,"address":[],"length":0,"stats":{"Line":6}},{"line":239,"address":[2571072,2570989,2565942,2565859],"length":1,"stats":{"Line":12}},{"line":240,"address":[],"length":0,"stats":{"Line":8}},{"line":242,"address":[],"length":0,"stats":{"Line":8}},{"line":243,"address":[2319587,2324358,2324543,2319398],"length":1,"stats":{"Line":2}},{"line":245,"address":[],"length":0,"stats":{"Line":4}},{"line":248,"address":[2323712,2318748],"length":1,"stats":{"Line":3}},{"line":249,"address":[2318788,2319788,2323752,2324740],"length":1,"stats":{"Line":6}},{"line":250,"address":[],"length":0,"stats":{"Line":6}},{"line":251,"address":[],"length":0,"stats":{"Line":6}},{"line":253,"address":[2572831,2567745,2572376,2572537,2567436,2567158,2572238,2572265,2567131,2567272],"length":1,"stats":{"Line":6}},{"line":258,"address":[],"length":0,"stats":{"Line":0}},{"line":259,"address":[],"length":0,"stats":{"Line":0}},{"line":262,"address":[2568043,2573723,2568154,2573228,2572774,2573141,2568067,2567682,2568673,2573120],"length":1,"stats":{"Line":18}},{"line":263,"address":[],"length":0,"stats":{"Line":6}},{"line":265,"address":[],"length":0,"stats":{"Line":10}},{"line":266,"address":[2328098,2328402],"length":1,"stats":{"Line":1}},{"line":268,"address":[],"length":0,"stats":{"Line":24}},{"line":269,"address":[2321267,2321343,2321621,2326274,2326552,2326198],"length":1,"stats":{"Line":10}},{"line":272,"address":[2321463,2326394],"length":1,"stats":{"Line":4}},{"line":274,"address":[],"length":0,"stats":{"Line":0}},{"line":276,"address":[],"length":0,"stats":{"Line":0}},{"line":278,"address":[2290012,2290354],"length":1,"stats":{"Line":6}},{"line":279,"address":[],"length":0,"stats":{"Line":0}},{"line":283,"address":[2574197,2574268,2574370,2569230,2569332,2569159],"length":1,"stats":{"Line":12}},{"line":284,"address":[2327566,2322713],"length":1,"stats":{"Line":0}},{"line":285,"address":[2574693,2569292,2569673,2574330],"length":1,"stats":{"Line":0}},{"line":289,"address":[2327254,2322327],"length":1,"stats":{"Line":4}},{"line":292,"address":[7110582,7110208,7110611],"length":1,"stats":{"Line":4}},{"line":293,"address":[7110242,7110366],"length":1,"stats":{"Line":6}},{"line":294,"address":[7576579,7576504,7576803],"length":1,"stats":{"Line":0}},{"line":296,"address":[2018564],"length":1,"stats":{"Line":4}},{"line":301,"address":[2018832],"length":1,"stats":{"Line":2}},{"line":302,"address":[2018862],"length":1,"stats":{"Line":2}},{"line":303,"address":[2018872],"length":1,"stats":{"Line":2}},{"line":304,"address":[2018886],"length":1,"stats":{"Line":1}},{"line":306,"address":[2018966],"length":1,"stats":{"Line":2}}],"covered":74,"coverable":89},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","error.rs"],"content":"//! Errors that might happen in the crate\n\nuse thiserror::Error;\n\n#[derive(Debug, Eq, PartialEq, Error)]\n#[non_exhaustive]\npub enum Error {\n    #[error(\"query is invalid: {error}\")]\n    /// Error happens when a query is invalid\n    InvalidQueryError { error: String },\n\n    #[error(\"Failed to build URL: {error}\")]\n    /// Error happens when a query is invalid\n    UrlConstructionError { error: String },\n\n    #[error(\"http protocol error: {error}\")]\n    /// Error happens when a query is invalid\n    ProtocolError { error: String },\n\n    #[error(\"http protocol error: {error}\")]\n    /// Error happens when Serde cannot deserialize the response\n    DeserializationError { error: String },\n\n    #[error(\"InfluxDB encountered the following error: {error}\")]\n    /// Error which has happened inside InfluxDB\n    DatabaseError { error: String },\n\n    #[error(\"API error with a status code: {0}\")]\n    /// Error happens when API returns non 2xx status code.\n    ApiError(u16),\n\n    #[error(\"connection error: {error}\")]\n    /// Error happens when HTTP request fails\n    ConnectionError { error: String },\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","integrations","serde_integration","de.rs"],"content":"use super::{Series, TaggedSeries};\nuse serde::de::{\n    value, Deserialize, DeserializeSeed, Deserializer, Error, IntoDeserializer, MapAccess,\n    SeqAccess, Visitor,\n};\nuse serde_derive::Deserialize;\nuse std::fmt;\nuse std::marker::PhantomData;\n\n// Based on https://serde.rs/deserialize-struct.html\nimpl<'de, T> Deserialize<'de> for Series<T>\nwhere\n    T: Deserialize<'de>,\n{\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        // Field name deserializer\n        #[derive(Deserialize)]\n        #[serde(field_identifier, rename_all = \"lowercase\")]\n        enum Field {\n            Name,\n            Columns,\n            Values,\n        }\n\n        struct SeriesVisitor<T> {\n            _inner_type: PhantomData<T>,\n        }\n\n        impl<'de, T> Visitor<'de> for SeriesVisitor<T>\n        where\n            T: Deserialize<'de>,\n        {\n            type Value = Series<T>;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"struct Series\")\n            }\n\n            fn visit_map<V>(self, mut map: V) -> Result<Series<T>, V::Error>\n            where\n                V: MapAccess<'de>,\n            {\n                let mut name = None;\n                let mut columns: Option<Vec<String>> = None;\n                let mut values: Option<Vec<T>> = None;\n                while let Some(key) = map.next_key()? {\n                    match key {\n                        Field::Name => {\n                            if name.is_some() {\n                                return Err(Error::duplicate_field(\"name\"));\n                            }\n                            name = Some(map.next_value()?);\n                        }\n                        Field::Columns => {\n                            if columns.is_some() {\n                                return Err(Error::duplicate_field(\"columns\"));\n                            }\n                            columns = Some(map.next_value()?);\n                        }\n                        Field::Values => {\n                            if values.is_some() {\n                                return Err(Error::duplicate_field(\"values\"));\n                            }\n                            // Error out if \"values\" is encountered before \"columns\"\n                            // Hopefully, InfluxDB never does this.\n                            if columns.is_none() {\n                                return Err(Error::custom(\n                                    \"series values encountered before columns\",\n                                ));\n                            }\n                            // Deserialize using a HeaderVec deserializer\n                            // seeded with the headers from the \"columns\" field\n                            values = Some(map.next_value_seed(HeaderVec::<T> {\n                                header: columns.as_ref().unwrap(),\n                                _inner_type: PhantomData,\n                            })?);\n                        }\n                    }\n                }\n                let name = name.ok_or_else(|| Error::missing_field(\"name\"))?;\n                let values = values.unwrap_or_default();\n\n                Ok(Series { name, values })\n            }\n        }\n\n        const FIELDS: &[&str] = &[\"name\", \"values\"];\n        deserializer.deserialize_struct(\n            \"Series\",\n            FIELDS,\n            SeriesVisitor::<T> {\n                _inner_type: PhantomData,\n            },\n        )\n    }\n}\n\n// Based on https://serde.rs/deserialize-struct.html\nimpl<'de, TAG, T> Deserialize<'de> for TaggedSeries<TAG, T>\nwhere\n    TAG: Deserialize<'de>,\n    T: Deserialize<'de>,\n{\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        // Field name deserializer\n        #[derive(Deserialize)]\n        #[serde(field_identifier, rename_all = \"lowercase\")]\n        enum Field {\n            Name,\n            Tags,\n            Columns,\n            Values,\n        }\n\n        struct SeriesVisitor<TAG, T> {\n            _tag_type: PhantomData<TAG>,\n            _value_type: PhantomData<T>,\n        }\n\n        impl<'de, TAG, T> Visitor<'de> for SeriesVisitor<TAG, T>\n        where\n            TAG: Deserialize<'de>,\n            T: Deserialize<'de>,\n        {\n            type Value = TaggedSeries<TAG, T>;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"struct TaggedSeries\")\n            }\n\n            fn visit_map<V>(self, mut map: V) -> Result<TaggedSeries<TAG, T>, V::Error>\n            where\n                V: MapAccess<'de>,\n            {\n                let mut name = None;\n                let mut tags: Option<TAG> = None;\n                let mut columns: Option<Vec<String>> = None;\n                let mut values: Option<Vec<T>> = None;\n                while let Some(key) = map.next_key()? {\n                    match key {\n                        Field::Name => {\n                            if name.is_some() {\n                                return Err(Error::duplicate_field(\"name\"));\n                            }\n                            name = Some(map.next_value()?);\n                        }\n                        Field::Tags => {\n                            if tags.is_some() {\n                                return Err(Error::duplicate_field(\"tags\"));\n                            }\n                            tags = Some(map.next_value()?);\n                        }\n                        Field::Columns => {\n                            if columns.is_some() {\n                                return Err(Error::duplicate_field(\"columns\"));\n                            }\n                            columns = Some(map.next_value()?);\n                        }\n                        Field::Values => {\n                            if values.is_some() {\n                                return Err(Error::duplicate_field(\"values\"));\n                            }\n                            // Error out if \"values\" is encountered before \"columns\"\n                            // Hopefully, InfluxDB never does this.\n                            if columns.is_none() {\n                                return Err(Error::custom(\n                                    \"series values encountered before columns\",\n                                ));\n                            }\n                            // Deserialize using a HeaderVec deserializer\n                            // seeded with the headers from the \"columns\" field\n                            values = Some(map.next_value_seed(HeaderVec::<T> {\n                                header: columns.as_ref().unwrap(),\n                                _inner_type: PhantomData,\n                            })?);\n                        }\n                    }\n                }\n                let name = name.ok_or_else(|| Error::missing_field(\"name\"))?;\n                let tags = tags.ok_or_else(|| Error::missing_field(\"tags\"))?;\n                let values = values.ok_or_else(|| Error::missing_field(\"values\"))?;\n                Ok(TaggedSeries { name, tags, values })\n            }\n        }\n\n        const FIELDS: &[&str] = &[\"name\", \"tags\", \"values\"];\n        deserializer.deserialize_struct(\n            \"TaggedSeries\",\n            FIELDS,\n            SeriesVisitor::<TAG, T> {\n                _tag_type: PhantomData,\n                _value_type: PhantomData,\n            },\n        )\n    }\n}\n\n// Deserializer that takes a header as a seed\n// and deserializes an array of arrays into a\n// Vec of map-like values using the header as\n// keys and the values as values.\nstruct HeaderVec<'h, T> {\n    header: &'h [String],\n    _inner_type: PhantomData<T>,\n}\n\nimpl<'de, 'h, T> DeserializeSeed<'de> for HeaderVec<'h, T>\nwhere\n    T: Deserialize<'de>,\n{\n    type Value = Vec<T>;\n\n    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct HeaderVecVisitor<'h, T> {\n            header: &'h [String],\n            _inner_type: PhantomData<T>,\n        }\n        impl<'de, 'h, T> Visitor<'de> for HeaderVecVisitor<'h, T>\n        where\n            T: Deserialize<'de>,\n        {\n            type Value = Vec<T>;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                write!(formatter, \"an array of arrays\")\n            }\n\n            fn visit_seq<A>(self, mut seq: A) -> Result<Vec<T>, A::Error>\n            where\n                A: SeqAccess<'de>,\n            {\n                let mut vec = Vec::new();\n\n                while let Some(v) = seq.next_element_seed(RowWithHeader {\n                    header: self.header,\n                    _inner_type: PhantomData,\n                })? {\n                    vec.push(v);\n                }\n\n                Ok(vec)\n            }\n        }\n        deserializer.deserialize_seq(HeaderVecVisitor {\n            header: self.header,\n            _inner_type: PhantomData,\n        })\n    }\n}\n\n// Deserializer that takes a header as a seed\n// and deserializes an array into a map-like\n// value using the header as keys and the values\n// as values.\nstruct RowWithHeader<'h, T> {\n    header: &'h [String],\n    _inner_type: PhantomData<T>,\n}\n\nimpl<'de, 'h, T> DeserializeSeed<'de> for RowWithHeader<'h, T>\nwhere\n    T: Deserialize<'de>,\n{\n    type Value = T;\n\n    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct RowWithHeaderVisitor<'h, T> {\n            header: &'h [String],\n            _inner: PhantomData<fn() -> T>,\n        }\n\n        impl<'de, 'h, T> Visitor<'de> for RowWithHeaderVisitor<'h, T>\n        where\n            T: Deserialize<'de>,\n        {\n            type Value = T;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"array\")\n            }\n\n            fn visit_seq<A>(self, seq: A) -> Result<T, A::Error>\n            where\n                A: SeqAccess<'de>,\n            {\n                // `MapAccessDeserializer` is a wrapper that turns a `MapAccess`\n                // into a `Deserializer`, allowing it to be used as the input to T's\n                // `Deserialize` implementation. T then deserializes itself using\n                // the entries from the map visitor.\n                Deserialize::deserialize(value::MapAccessDeserializer::new(HeaderMapAccess {\n                    header: self.header,\n                    field: 0,\n                    data: seq,\n                }))\n            }\n        }\n\n        deserializer.deserialize_seq(RowWithHeaderVisitor {\n            header: self.header,\n            _inner: PhantomData,\n        })\n    }\n}\n\n// MapAccess implementation that holds a reference to\n// the header for keys and a serde sequence for values.\n// When asked for a key, it returns the next header and\n// advances its header field index. When asked for a value,\n// it tries to deserialize the next element in the serde\n// sequence into the desired type, and returns an error\n// if no element is returned (the sequence is exhausted).\nstruct HeaderMapAccess<'h, A> {\n    header: &'h [String],\n    field: usize,\n    data: A,\n}\n\nimpl<'de, 'h, A> MapAccess<'de> for HeaderMapAccess<'h, A>\nwhere\n    A: SeqAccess<'de>,\n{\n    type Error = <A as SeqAccess<'de>>::Error;\n\n    fn next_key_seed<K: DeserializeSeed<'de>>(\n        &mut self,\n        seed: K,\n    ) -> Result<Option<K::Value>, Self::Error> {\n        let field = match self.header.get(self.field) {\n            None => return Ok(None),\n            Some(field) => field,\n        };\n        self.field += 1;\n        seed.deserialize(field.clone().into_deserializer())\n            .map(Some)\n    }\n\n    fn next_value_seed<K: DeserializeSeed<'de>>(\n        &mut self,\n        seed: K,\n    ) -> Result<K::Value, Self::Error> {\n        match self.data.next_element_seed(seed)? {\n            Some(value) => Ok(value),\n            None => Err(Error::custom(\"next_value_seed called but no value\")),\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::Series;\n    use std::borrow::Cow;\n    use std::collections::HashMap;\n\n    const TEST_DATA: &str = r#\"\n    {\n        \"name\": \"series_name\",\n        \"columns\": [\"foo\", \"bar\"],\n        \"values\": [\n            [\"foo_a\", \"bar_a\"],\n            [\"foo_b\", \"bar_b\"]\n        ]\n    }\n    \"#;\n\n    // we can derive all the impls we want here\n    #[derive(Debug, PartialEq, Eq)]\n    struct EqSeries<T> {\n        pub name: String,\n        pub values: Vec<T>,\n    }\n\n    impl<T> From<Series<T>> for EqSeries<T> {\n        fn from(Series { name, values }: Series<T>) -> Self {\n            EqSeries { name, values }\n        }\n    }\n\n    #[test]\n    fn test_deserialize_cow() {\n        // Unfortunately, Cow is not automatically borrowed,\n        // so this is basically equivalent to String, String\n        let result = serde_json::from_str::<Series<HashMap<Cow<str>, Cow<str>>>>(TEST_DATA);\n        assert!(result.is_ok());\n        assert_eq!(\n            EqSeries::from(result.unwrap()),\n            EqSeries {\n                name: \"series_name\".into(),\n                values: vec![\n                    {\n                        let mut h = std::collections::HashMap::new();\n                        h.insert(\"foo\".into(), \"foo_a\".into());\n                        h.insert(\"bar\".into(), \"bar_a\".into());\n                        h\n                    },\n                    {\n                        let mut h = std::collections::HashMap::new();\n                        h.insert(\"foo\".into(), \"foo_b\".into());\n                        h.insert(\"bar\".into(), \"bar_b\".into());\n                        h\n                    },\n                ],\n            },\n        );\n    }\n\n    #[test]\n    fn test_deserialize_borrowed() {\n        use serde_derive::Deserialize;\n\n        // Deserializing a string that cannot be passed through\n        // without escaping will result in an error like this:\n        // `invalid type: string \"\\n\", expected a borrowed string at line 6 column 43`\n        // but if it doesn't need escaping it's fine.\n        #[derive(Deserialize, Debug, PartialEq, Eq)]\n        struct BorrowingStruct<'a> {\n            foo: &'a str,\n            bar: &'a str,\n        }\n\n        let result = serde_json::from_str::<Series<BorrowingStruct>>(TEST_DATA);\n        assert!(result.is_ok(), \"{}\", result.unwrap_err());\n        assert_eq!(\n            EqSeries::from(result.unwrap()),\n            EqSeries {\n                name: \"series_name\".into(),\n                values: vec![\n                    BorrowingStruct {\n                        foo: \"foo_a\",\n                        bar: \"bar_a\",\n                    },\n                    BorrowingStruct {\n                        foo: \"foo_b\",\n                        bar: \"bar_b\",\n                    },\n                ],\n            },\n        );\n    }\n}\n","traces":[{"line":15,"address":[2774320,2774368,2774416,2774464,2774512],"length":1,"stats":{"Line":8}},{"line":32,"address":[],"length":0,"stats":{"Line":0}},{"line":38,"address":[],"length":0,"stats":{"Line":0}},{"line":39,"address":[1978025,1978089],"length":1,"stats":{"Line":0}},{"line":42,"address":[],"length":0,"stats":{"Line":8}},{"line":46,"address":[1980750,1978158],"length":1,"stats":{"Line":8}},{"line":47,"address":[1980792,1978200],"length":1,"stats":{"Line":8}},{"line":48,"address":[],"length":0,"stats":{"Line":8}},{"line":49,"address":[1978257,1978321,1980534,1980849,1980913,1983126],"length":1,"stats":{"Line":16}},{"line":50,"address":[1978454,1981046],"length":1,"stats":{"Line":8}},{"line":51,"address":[2340465],"length":1,"stats":{"Line":8}},{"line":52,"address":[1978541,1981204,1978612,1981133],"length":1,"stats":{"Line":16}},{"line":53,"address":[2340500,2340125],"length":1,"stats":{"Line":0}},{"line":55,"address":[],"length":0,"stats":{"Line":16}},{"line":57,"address":[],"length":0,"stats":{"Line":8}},{"line":58,"address":[],"length":0,"stats":{"Line":16}},{"line":59,"address":[2340900,2340549],"length":1,"stats":{"Line":0}},{"line":61,"address":[2340885,2340542,2340596,2340757],"length":1,"stats":{"Line":16}},{"line":63,"address":[2341433],"length":1,"stats":{"Line":8}},{"line":64,"address":[],"length":0,"stats":{"Line":16}},{"line":65,"address":[2729319,2722173,2726759,2727293,2729853,2719079,2724199,2719613,2724733,2721639],"length":1,"stats":{"Line":0}},{"line":69,"address":[2340986,2340940],"length":1,"stats":{"Line":16}},{"line":70,"address":[1982128,1979536,1979979,1982571],"length":1,"stats":{"Line":0}},{"line":71,"address":[],"length":0,"stats":{"Line":0}},{"line":76,"address":[],"length":0,"stats":{"Line":8}},{"line":77,"address":[1979568,1982160,1982116,1979524],"length":1,"stats":{"Line":16}},{"line":78,"address":[],"length":0,"stats":{"Line":0}},{"line":83,"address":[],"length":0,"stats":{"Line":16}},{"line":84,"address":[2341673],"length":1,"stats":{"Line":8}},{"line":86,"address":[],"length":0,"stats":{"Line":8}},{"line":91,"address":[],"length":0,"stats":{"Line":8}},{"line":93,"address":[],"length":0,"stats":{"Line":0}},{"line":94,"address":[],"length":0,"stats":{"Line":0}},{"line":95,"address":[],"length":0,"stats":{"Line":0}},{"line":107,"address":[2774560],"length":1,"stats":{"Line":1}},{"line":126,"address":[],"length":0,"stats":{"Line":0}},{"line":133,"address":[2730720],"length":1,"stats":{"Line":0}},{"line":134,"address":[],"length":0,"stats":{"Line":0}},{"line":137,"address":[],"length":0,"stats":{"Line":1}},{"line":141,"address":[],"length":0,"stats":{"Line":1}},{"line":142,"address":[],"length":0,"stats":{"Line":1}},{"line":143,"address":[],"length":0,"stats":{"Line":1}},{"line":144,"address":[2730897],"length":1,"stats":{"Line":1}},{"line":145,"address":[2730936,2731000,2734171],"length":1,"stats":{"Line":2}},{"line":146,"address":[],"length":0,"stats":{"Line":1}},{"line":147,"address":[],"length":0,"stats":{"Line":1}},{"line":148,"address":[],"length":0,"stats":{"Line":2}},{"line":149,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":2}},{"line":153,"address":[],"length":0,"stats":{"Line":1}},{"line":154,"address":[2731733,2731240],"length":1,"stats":{"Line":2}},{"line":155,"address":[],"length":0,"stats":{"Line":0}},{"line":157,"address":[2731752,2731967,2732111,2731806],"length":1,"stats":{"Line":2}},{"line":159,"address":[],"length":0,"stats":{"Line":1}},{"line":160,"address":[2731262,2732152],"length":1,"stats":{"Line":2}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":163,"address":[2732514,2732171,2732225,2732386],"length":1,"stats":{"Line":2}},{"line":165,"address":[],"length":0,"stats":{"Line":1}},{"line":166,"address":[],"length":0,"stats":{"Line":2}},{"line":167,"address":[2732580,2733114],"length":1,"stats":{"Line":0}},{"line":171,"address":[2732569,2732615],"length":1,"stats":{"Line":2}},{"line":172,"address":[2732641,2733082],"length":1,"stats":{"Line":0}},{"line":173,"address":[],"length":0,"stats":{"Line":0}},{"line":178,"address":[2732739,2732923,2732827,2733067],"length":1,"stats":{"Line":1}},{"line":179,"address":[],"length":0,"stats":{"Line":2}},{"line":180,"address":[],"length":0,"stats":{"Line":0}},{"line":185,"address":[2733136,2734496,2734166,2734497,2731147],"length":1,"stats":{"Line":2}},{"line":186,"address":[],"length":0,"stats":{"Line":2}},{"line":187,"address":[],"length":0,"stats":{"Line":2}},{"line":188,"address":[],"length":0,"stats":{"Line":1}},{"line":193,"address":[],"length":0,"stats":{"Line":1}},{"line":195,"address":[],"length":0,"stats":{"Line":0}},{"line":196,"address":[],"length":0,"stats":{"Line":0}},{"line":197,"address":[],"length":0,"stats":{"Line":0}},{"line":198,"address":[],"length":0,"stats":{"Line":0}},{"line":219,"address":[2332800],"length":1,"stats":{"Line":9}},{"line":227,"address":[],"length":0,"stats":{"Line":0}},{"line":233,"address":[1983504,1983568],"length":1,"stats":{"Line":0}},{"line":234,"address":[2335586],"length":1,"stats":{"Line":0}},{"line":237,"address":[1984159,1983685,1983632,1984176,1984229,1984675],"length":1,"stats":{"Line":9}},{"line":241,"address":[2714244,2713166,2714286,2715300,2713124,2714804,2715342,2715860,2715902,2713726,2714846,2713684],"length":1,"stats":{"Line":18}},{"line":243,"address":[2715981,2716039,2713245,2714925,2713863,2713303,2714974,2714365,2715927,2714423,2715367,2714871,2713805,2715421,2713751,2714311,2715479,2713191],"length":1,"stats":{"Line":18}},{"line":244,"address":[2335712],"length":1,"stats":{"Line":9}},{"line":245,"address":[],"length":0,"stats":{"Line":0}},{"line":247,"address":[1984019,1984048,1984525,1984564],"length":1,"stats":{"Line":18}},{"line":250,"address":[2336048],"length":1,"stats":{"Line":9}},{"line":253,"address":[2711501,2711437,2711373,2711565,2711629,2711693],"length":1,"stats":{"Line":9}},{"line":254,"address":[1983414,1983478],"length":1,"stats":{"Line":9}},{"line":255,"address":[],"length":0,"stats":{"Line":0}},{"line":275,"address":[1984752,1984688],"length":1,"stats":{"Line":9}},{"line":284,"address":[],"length":0,"stats":{"Line":0}},{"line":290,"address":[2336160],"length":1,"stats":{"Line":0}},{"line":291,"address":[],"length":0,"stats":{"Line":0}},{"line":294,"address":[1985088,1984944],"length":1,"stats":{"Line":9}},{"line":302,"address":[],"length":0,"stats":{"Line":9}},{"line":303,"address":[2336252],"length":1,"stats":{"Line":9}},{"line":304,"address":[],"length":0,"stats":{"Line":0}},{"line":305,"address":[],"length":0,"stats":{"Line":0}},{"line":310,"address":[2333037],"length":1,"stats":{"Line":9}},{"line":311,"address":[1984726,1984790],"length":1,"stats":{"Line":9}},{"line":312,"address":[],"length":0,"stats":{"Line":0}},{"line":336,"address":[2331552,2331979],"length":1,"stats":{"Line":9}},{"line":340,"address":[1985713,1985358,1985806,1985265],"length":1,"stats":{"Line":18}},{"line":341,"address":[],"length":0,"stats":{"Line":9}},{"line":342,"address":[1985396,1985844],"length":1,"stats":{"Line":9}},{"line":344,"address":[],"length":0,"stats":{"Line":18}},{"line":345,"address":[1985649,1985486,1985958,1986020,1985545,1986127],"length":1,"stats":{"Line":18}},{"line":346,"address":[1985642,1986120],"length":1,"stats":{"Line":9}},{"line":349,"address":[2332608,2332224,2332000,2332384],"length":1,"stats":{"Line":8}},{"line":353,"address":[1986181,1986476,1986642],"length":1,"stats":{"Line":8}},{"line":354,"address":[],"length":0,"stats":{"Line":8}},{"line":355,"address":[],"length":0,"stats":{"Line":0}}],"covered":74,"coverable":112},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","integrations","serde_integration","mod.rs"],"content":"//! Serde Integration for InfluxDB. Provides deserialization of query returns.\n//!\n//! When querying multiple series in the same query (e.g. with a regex query), it might be desirable to flat map\n//! the resulting series into a single `Vec` like so. The example assumes, that there are weather readings in multiple\n//! series named `weather_<city_name>` (e.g. `weather_berlin`, or `weather_london`). Since we're using a Regex query,\n//! we don't actually know which series will be returned. To assign the city name to the series, we can use the series\n//! `name`, InfluxDB provides alongside query results.\n//!\n//! ```rust,no_run\n//! use influxdb::{Client, Query};\n//! use serde_derive::Deserialize;\n//!\n//! #[derive(Deserialize)]\n//! struct WeatherWithoutCityName {\n//!     temperature: i32,\n//! }\n//!\n//! #[derive(Deserialize)]\n//! struct Weather {\n//!     city_name: String,\n//!     weather: WeatherWithoutCityName,\n//! }\n//!\n//! # #[async_std::main]\n//! # async fn main() -> Result<(), influxdb::Error> {\n//! let client = Client::new(\"http://localhost:8086\", \"test\");\n//! let query = Query::raw_read_query(\n//!     \"SELECT temperature FROM /weather_[a-z]*$/ WHERE time > now() - 1m ORDER BY DESC\",\n//! );\n//! let mut db_result = client.json_query(query).await?;\n//! let _result = db_result\n//!     .deserialize_next::<WeatherWithoutCityName>()?\n//!     .series\n//!     .into_iter()\n//!     .map(|mut city_series| {\n//!         let city_name =\n//!             city_series.name.split(\"_\").collect::<Vec<&str>>().remove(2);\n//!         Weather {\n//!             weather: city_series.values.remove(0),\n//!             city_name: city_name.to_string(),\n//!         }\n//!     })\n//!     .collect::<Vec<Weather>>();\n//! # Ok(())\n//! # }\n//! ```\n\nmod de;\n\nuse serde::de::DeserializeOwned;\nuse serde_derive::Deserialize;\n\nuse crate::{client::check_status, Client, Error, Query, ReadQuery};\n\n#[derive(Deserialize)]\n#[doc(hidden)]\nstruct _DatabaseError {\n    error: String,\n}\n\n#[derive(Deserialize, Debug)]\n#[doc(hidden)]\npub struct DatabaseQueryResult {\n    pub results: Vec<serde_json::Value>,\n}\n\nimpl DatabaseQueryResult {\n    pub fn deserialize_next<T: 'static>(&mut self) -> Result<Return<T>, Error>\n    where\n        T: DeserializeOwned + Send,\n    {\n        serde_json::from_value::<Return<T>>(self.results.remove(0)).map_err(|err| {\n            Error::DeserializationError {\n                error: format!(\"could not deserialize: {err}\"),\n            }\n        })\n    }\n\n    pub fn deserialize_next_tagged<TAG, T: 'static>(\n        &mut self,\n    ) -> Result<TaggedReturn<TAG, T>, Error>\n    where\n        TAG: DeserializeOwned + Send,\n        T: DeserializeOwned + Send,\n    {\n        serde_json::from_value::<TaggedReturn<TAG, T>>(self.results.remove(0)).map_err(|err| {\n            Error::DeserializationError {\n                error: format!(\"could not deserialize: {err}\"),\n            }\n        })\n    }\n}\n\n#[derive(Deserialize, Debug)]\n#[doc(hidden)]\npub struct Return<T> {\n    #[serde(default = \"Vec::new\")]\n    pub series: Vec<Series<T>>,\n}\n\n#[derive(Debug)]\n/// Represents a returned series from InfluxDB\npub struct Series<T> {\n    pub name: String,\n    pub values: Vec<T>,\n}\n\n#[derive(Deserialize, Debug)]\n#[doc(hidden)]\npub struct TaggedReturn<TAG, T> {\n    #[serde(default = \"Vec::new\")]\n    pub series: Vec<TaggedSeries<TAG, T>>,\n}\n\n#[derive(Debug)]\n/// Represents a returned series from InfluxDB\npub struct TaggedSeries<TAG, T> {\n    pub name: String,\n    pub tags: TAG,\n    pub values: Vec<T>,\n}\n\nimpl Client {\n    pub async fn json_query(&self, q: ReadQuery) -> Result<DatabaseQueryResult, Error> {\n        let query = q.build().map_err(|err| Error::InvalidQueryError {\n            error: err.to_string(),\n        })?;\n\n        let read_query = query.get();\n        let read_query_lower = read_query.to_lowercase();\n\n        if !read_query_lower.contains(\"select\") && !read_query_lower.contains(\"show\") {\n            let error = Error::InvalidQueryError {\n                error: \"Only SELECT and SHOW queries supported with JSON deserialization\".into(),\n            };\n            return Err(error);\n        }\n\n        let url = &format!(\"{}/query\", &self.url);\n        let mut parameters = self.parameters.as_ref().clone();\n        parameters.insert(\"q\", read_query);\n        let mut request_builder = self.client.get(url);\n        if let Some(ref token) = self.token {\n            request_builder = request_builder.header(\"Authorization\", format!(\"Token {token}\"))\n        }\n        let request_builder = request_builder.query(&parameters);\n\n        #[cfg(feature = \"surf\")]\n        let request_builder = request_builder.map_err(|err| Error::UrlConstructionError {\n            error: err.to_string(),\n        })?;\n\n        let res = request_builder\n            .send()\n            .await\n            .map_err(|err| Error::ConnectionError {\n                error: err.to_string(),\n            })?;\n        check_status(&res)?;\n\n        #[cfg(feature = \"reqwest\")]\n        let body = res.bytes();\n        #[cfg(feature = \"surf\")]\n        let mut res = res;\n        #[cfg(feature = \"surf\")]\n        let body = res.body_bytes();\n\n        let body = body.await.map_err(|err| Error::ProtocolError {\n            error: err.to_string(),\n        })?;\n\n        // Try parsing InfluxDBs { \"error\": \"error message here\" }\n        if let Ok(error) = serde_json::from_slice::<_DatabaseError>(&body) {\n            return Err(Error::DatabaseError { error: error.error });\n        }\n\n        // Json has another structure, let's try actually parsing it to the type we're deserializing\n        serde_json::from_slice::<DatabaseQueryResult>(&body).map_err(|err| {\n            Error::DeserializationError {\n                error: format!(\"serde error: {err}\"),\n            }\n        })\n    }\n}\n","traces":[{"line":68,"address":[2351632],"length":1,"stats":{"Line":6}},{"line":72,"address":[],"length":0,"stats":{"Line":6}},{"line":73,"address":[],"length":0,"stats":{"Line":0}},{"line":74,"address":[2772759,2772694,2772503,2772950,2773206,2773271,2773462,2773527,2772438,2773015],"length":1,"stats":{"Line":0}},{"line":79,"address":[2773696],"length":1,"stats":{"Line":1}},{"line":86,"address":[],"length":0,"stats":{"Line":1}},{"line":87,"address":[],"length":0,"stats":{"Line":0}},{"line":88,"address":[2773798,2773863],"length":1,"stats":{"Line":0}},{"line":124,"address":[7035804,7031366,7031166,7031104,7033331,7033540],"length":1,"stats":{"Line":8}},{"line":125,"address":[7036250,7036176,7031586,7031335,7031472,7036298,7033497],"length":1,"stats":{"Line":4}},{"line":126,"address":[2042135],"length":1,"stats":{"Line":0}},{"line":129,"address":[7497910,7498051],"length":1,"stats":{"Line":4}},{"line":130,"address":[7498165,7498066],"length":1,"stats":{"Line":4}},{"line":132,"address":[7498425,7498188,7498287],"length":1,"stats":{"Line":5}},{"line":134,"address":[2038318],"length":1,"stats":{"Line":1}},{"line":136,"address":[7032350],"length":1,"stats":{"Line":1}},{"line":139,"address":[7498370,7498648],"length":1,"stats":{"Line":4}},{"line":140,"address":[7032650,7032577],"length":1,"stats":{"Line":4}},{"line":141,"address":[7499022,7498881],"length":1,"stats":{"Line":4}},{"line":142,"address":[7032846],"length":1,"stats":{"Line":2}},{"line":143,"address":[2038921,2039330],"length":1,"stats":{"Line":2}},{"line":144,"address":[7499272,7499507,7499133,7499520],"length":1,"stats":{"Line":0}},{"line":146,"address":[7499231],"length":1,"stats":{"Line":2}},{"line":153,"address":[7034423,7033749,7033804,7033433,7033891],"length":1,"stats":{"Line":6}},{"line":155,"address":[7499614,7499774,7499674,7497604,7499959],"length":1,"stats":{"Line":7}},{"line":156,"address":[7502662,7502656,7499985,7502603,7502528],"length":1,"stats":{"Line":2}},{"line":157,"address":[2042284],"length":1,"stats":{"Line":0}},{"line":159,"address":[2040126,2040032,2040398],"length":1,"stats":{"Line":5}},{"line":162,"address":[7034226],"length":1,"stats":{"Line":2}},{"line":168,"address":[2287398],"length":1,"stats":{"Line":4}},{"line":169,"address":[2042428],"length":1,"stats":{"Line":0}},{"line":173,"address":[7034874,7034945,7035023],"length":1,"stats":{"Line":4}},{"line":174,"address":[2041047],"length":1,"stats":{"Line":0}},{"line":178,"address":[2041299,2042773,2042779,2041375,2042544],"length":1,"stats":{"Line":4}},{"line":179,"address":[2042717],"length":1,"stats":{"Line":0}},{"line":180,"address":[2042627,2042579],"length":1,"stats":{"Line":0}}],"covered":25,"coverable":36},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","lib.rs"],"content":"//! Pull requests are always welcome. See [Contributing](https://github.com/influxdb-rs/influxdb-rust/blob/main/CONTRIBUTING.md) and [Code of Conduct](https://github.com/influxdb-rs/influxdb-rust/blob/main/CODE_OF_CONDUCT.md). For a list of past changes, see [CHANGELOG.md](https://github.com/influxdb-rs/influxdb-rust/blob/main/CHANGELOG.md).\n//!\n//! ## Currently Supported Features\n//!\n//! -   Reading and writing to InfluxDB\n//! -   Optional Serde support for deserialization\n//! -   Running multiple queries in one request (e.g. `SELECT * FROM weather_berlin; SELECT * FROM weather_london`)\n//! -   Writing single or multiple measurements in one request (e.g. `WriteQuery` or `Vec<WriteQuery>` argument)\n//! -   Authenticated and unauthenticated connections\n//! -   `async`/`await` support\n//! -   `#[derive(InfluxDbWriteable)]` derive macro for writing / reading into structs\n//! -   `GROUP BY` support\n//! -   Tokio and async-std support (see example below) or [available backends](https://github.com/influxdb-rs/influxdb-rust/blob/main/influxdb/Cargo.toml)\n//! -   Swappable HTTP backends ([see below](#Choice-of-HTTP-backend))\n//!\n//! # Quickstart\n//!\n//! Add the following to your `Cargo.toml`\n//!\n#![doc = cargo_toml!(indent=\"\", \"derive\")]\n//!\n//! For an example with using Serde deserialization, please refer to [serde_integration](crate::integrations::serde_integration)\n//!\n//! ```rust,no_run\n//! use chrono::{DateTime, Utc};\n//! use influxdb::{Client, Error, InfluxDbWriteable, ReadQuery, Timestamp};\n//!\n//! #[tokio::main]\n//! // or #[async_std::main] if you prefer\n//! async fn main() -> Result<(), Error> {\n//!     // Connect to db `test` on `http://localhost:8086`\n//!     let client = Client::new(\"http://localhost:8086\", \"test\");\n//!\n//!     #[derive(InfluxDbWriteable)]\n//!     struct WeatherReading {\n//!         time: DateTime<Utc>,\n//!         humidity: i32,\n//!         #[influxdb(tag)]\n//!         wind_direction: String,\n//!     }\n//!\n//!     // Let's write some data into a measurement called `weather`\n//!     let weather_readings = vec![\n//!         WeatherReading {\n//!             time: Timestamp::Hours(1).into(),\n//!             humidity: 30,\n//!             wind_direction: String::from(\"north\"),\n//!         }\n//!         .into_query(\"weather\"),\n//!         WeatherReading {\n//!             time: Timestamp::Hours(2).into(),\n//!             humidity: 40,\n//!             wind_direction: String::from(\"west\"),\n//!         }\n//!         .into_query(\"weather\"),\n//!     ];\n//!\n//!     client.query(weather_readings).await?;\n//!\n//!     // Read back all records\n//!     let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n//!\n//!     let read_result = client.query(read_query).await?;\n//!     println!(\"{}\", read_result);\n//!     Ok(())\n//! }\n//! ```\n//!\n//! For further examples, check out the integration tests in `tests/integration_tests.rs`\n//! in the repository.\n//!\n//! # Choice of HTTP backend\n//!\n//! To communicate with InfluxDB, you can choose the HTTP backend to be used configuring the appropriate feature. We recommend sticking with the default reqwest-based client, unless you really need async-std compatibility.\n//!\n//! - **[hyper](https://github.com/hyperium/hyper)** (through reqwest, used by default), with [rustls](https://github.com/ctz/rustls)\n#![doc = cargo_toml!(indent=\"\\t\", \"derive\")]\n//! - **[hyper](https://github.com/hyperium/hyper)** (through reqwest), with native TLS (OpenSSL)\n#![doc = cargo_toml!(indent=\"\\t\", default-features = false, \"derive\", \"serde\", \"reqwest-client-native-tls\")]\n//! - **[hyper](https://github.com/hyperium/hyper)** (through reqwest), with vendored native TLS (OpenSSL)\n#![doc = cargo_toml!(indent=\"\\t\", default-features = false, \"derive\", \"serde\", \"reqwest-client-native-tls-vendored\")]\n//! - **[hyper](https://github.com/hyperium/hyper)** (through surf), use this if you need tokio 0.2 compatibility\n#![doc = cargo_toml!(indent=\"\\t\", default-features = false, \"derive\", \"serde\", \"hyper-client\")]\n//! - **[curl](https://github.com/alexcrichton/curl-rust)**, using [libcurl](https://curl.se/libcurl/)\n#![doc = cargo_toml!(indent=\"\\t\", default-features = false, \"derive\", \"serde\", \"curl-client\")]\n//! - **[async-h1](https://github.com/http-rs/async-h1)** with native TLS (OpenSSL)\n#![doc = cargo_toml!(indent=\"\\t\", default-features = false, \"derive\", \"serde\", \"h1-client\")]\n//! - **[async-h1](https://github.com/http-rs/async-h1)** with [rustls](https://github.com/ctz/rustls)\n#![doc = cargo_toml!(indent=\"\\t\", default-features = false, \"derive\", \"serde\", \"h1-client-rustls\")]\n//! - WebAssembly's `window.fetch`, via `web-sys` and **[wasm-bindgen](https://github.com/rustwasm/wasm-bindgen)**\n#![doc = cargo_toml!(indent=\"\\t\", default-features = false, \"derive\", \"serde\", \"wasm-client\")]\n//!\n//! # License\n//!\n//! [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nmacro_rules! cargo_toml {\n    (indent=$indent:literal, $firstfeat:literal $(, $feature:literal)*) => {\n        cargo_toml_private!($indent, \"\", $firstfeat $(, $feature)*)\n    };\n\n    (indent=$indent:literal, default-features = false, $firstfeat:literal $(, $feature:literal)*) => {\n        cargo_toml_private!($indent, \"default-features = false, \", $firstfeat $(, $feature)*)\n    };\n}\nuse cargo_toml;\n\nmacro_rules! cargo_toml_private {\n    ($indent:literal, $deffeats:literal, $firstfeat:literal $(, $feature:literal)*) => {\n        concat!(\n            $indent,\n            \"```toml\\n\",\n\n            $indent,\n            \"influxdb = { version = \\\"\",\n            env!(\"CARGO_PKG_VERSION\"),\n            \"\\\", \",\n            $deffeats,\n            \"features = [\",\n            \"\\\"\", $firstfeat, \"\\\"\",\n            $(\", \\\"\", $feature, \"\\\"\",)*\n            \"] }\\n\",\n\n            $indent,\n            \"```\"\n        )\n    };\n}\nuse cargo_toml_private;\n\n#[cfg(all(feature = \"reqwest\", feature = \"surf\"))]\ncompile_error!(\"You need to choose between reqwest and surf; enabling both is not supported\");\n\n#[cfg(not(any(feature = \"reqwest\", feature = \"surf\")))]\ncompile_error!(\"You need to choose an http client; consider not disabling default features\");\n\nmod client;\nmod error;\nmod query;\n\npub use client::Client;\npub use error::Error;\npub use query::{\n    read_query::ReadQuery,\n    write_query::{Type, WriteQuery},\n    InfluxDbWriteable, Query, QueryType, Timestamp, ValidQuery,\n};\n\n#[cfg(feature = \"serde\")]\npub mod integrations {\n    #[cfg(feature = \"serde\")]\n    pub mod serde_integration;\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","consts.rs"],"content":"pub const MINUTES_PER_HOUR: u128 = 60;\npub const SECONDS_PER_MINUTE: u128 = 60;\npub const MILLIS_PER_SECOND: u128 = 1000;\npub const NANOS_PER_MILLI: u128 = 1_000_000;\npub const NANOS_PER_MICRO: u128 = 1000;\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","line_proto_term.rs"],"content":"/// InfluxDB Line Protocol escaping helper module.\n/// https://docs.influxdata.com/influxdb/v1.7/write_protocols/line_protocol_tutorial/\nuse crate::Type;\nuse lazy_regex::{lazy_regex, Lazy, Regex};\n\npub static COMMAS_SPACES: Lazy<Regex> = lazy_regex!(\"[, ]\");\npub static COMMAS_SPACES_EQUALS: Lazy<Regex> = lazy_regex!(\"[, =]\");\npub static QUOTES_SLASHES: Lazy<Regex> = lazy_regex!(r#\"[\"\\\\]\"#);\npub static SLASHES: Lazy<Regex> = lazy_regex!(r#\"(\\\\|,| |=|\")\"#);\n\npub enum LineProtoTerm<'a> {\n    Measurement(&'a str), // escape commas, spaces\n    TagKey(&'a str),      // escape commas, equals, spaces\n    TagValue(&'a Type),   // escape commas, equals, spaces\n    FieldKey(&'a str),    // escape commas, equals, spaces\n    FieldValue(&'a Type), // escape quotes, backslashes + quote\n}\n\nimpl LineProtoTerm<'_> {\n    pub fn escape(self) -> String {\n        use LineProtoTerm::*;\n        match self {\n            Measurement(x) => Self::escape_any(x, &COMMAS_SPACES),\n            TagKey(x) | FieldKey(x) => Self::escape_any(x, &COMMAS_SPACES_EQUALS),\n            FieldValue(x) => Self::escape_field_value(x, false),\n            TagValue(x) => Self::escape_tag_value(x),\n        }\n    }\n\n    pub fn escape_v2(self) -> String {\n        use LineProtoTerm::*;\n        match self {\n            Measurement(x) => Self::escape_any(x, &COMMAS_SPACES),\n            TagKey(x) | FieldKey(x) => Self::escape_any(x, &COMMAS_SPACES_EQUALS),\n            FieldValue(x) => Self::escape_field_value(x, true),\n            TagValue(x) => Self::escape_tag_value(x),\n        }\n    }\n\n    fn escape_field_value(v: &Type, use_v2: bool) -> String {\n        use Type::*;\n        match v {\n            Boolean(v) => {\n                if *v {\n                    \"true\"\n                } else {\n                    \"false\"\n                }\n            }\n            .to_string(),\n            Float(v) => v.to_string(),\n            SignedInteger(v) => format!(\"{v}i\"),\n            UnsignedInteger(v) => {\n                if use_v2 {\n                    format!(\"{v}u\")\n                } else {\n                    format!(\"{v}i\")\n                }\n            }\n            Text(v) => format!(r#\"\"{}\"\"#, Self::escape_any(v, &QUOTES_SLASHES)),\n        }\n    }\n\n    fn escape_tag_value(v: &Type) -> String {\n        use Type::*;\n        match v {\n            Boolean(v) => {\n                if *v {\n                    \"true\"\n                } else {\n                    \"false\"\n                }\n            }\n            .into(),\n            Float(v) => v.to_string(),\n            SignedInteger(v) => v.to_string(),\n            UnsignedInteger(v) => v.to_string(),\n            Text(v) => Self::escape_any(v, &SLASHES),\n        }\n    }\n\n    fn escape_any(s: &str, re: &Regex) -> String {\n        re.replace_all(s, r\"\\$0\").to_string()\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use crate::query::line_proto_term::LineProtoTerm::*;\n    use crate::Type;\n\n    #[test]\n    fn test() {\n        assert_eq!(TagValue(&Type::Boolean(true)).escape(), r#\"true\"#);\n        assert_eq!(TagValue(&Type::Float(1.8324f64)).escape(), r#\"1.8324\"#);\n        assert_eq!(TagValue(&Type::SignedInteger(-1i64)).escape(), r#\"-1\"#);\n        assert_eq!(TagValue(&Type::UnsignedInteger(1u64)).escape(), r#\"1\"#);\n\n        assert_eq!(\n            TagValue(&Type::Text(\"this is my special string\".into())).escape(),\n            r\"this\\ is\\ my\\ special\\ string\"\n        );\n        assert_eq!(\n            TagValue(&Type::Text(\"a tag w=i th == tons of escapes\".into())).escape(),\n            r\"a\\ tag\\ w\\=i\\ th\\ \\=\\=\\ tons\\ of\\ escapes\"\n        );\n        assert_eq!(\n            TagValue(&Type::Text(\"no_escapes\".into())).escape(),\n            r#\"no_escapes\"#\n        );\n        assert_eq!(\n            TagValue(&Type::Text(\"some,commas,here\".into())).escape(),\n            r\"some\\,commas\\,here\"\n        );\n\n        assert_eq!(Measurement(r#\"wea\", ther\"#).escape(), r#\"wea\"\\,\\ ther\"#);\n        assert_eq!(TagKey(r\"locat\\ ,=ion\").escape(), r\"locat\\\\ \\,\\=ion\");\n\n        assert_eq!(FieldValue(&Type::Boolean(true)).escape(), r#\"true\"#);\n        assert_eq!(FieldValue(&Type::Boolean(false)).escape(), r#\"false\"#);\n\n        assert_eq!(FieldValue(&Type::Float(0.0)).escape(), r#\"0\"#);\n        assert_eq!(FieldValue(&Type::Float(-0.1)).escape(), r#\"-0.1\"#);\n\n        assert_eq!(FieldValue(&Type::SignedInteger(0)).escape(), r#\"0i\"#);\n        assert_eq!(FieldValue(&Type::SignedInteger(83)).escape(), r#\"83i\"#);\n\n        assert_eq!(FieldValue(&Type::UnsignedInteger(0)).escape(), r#\"0i\"#);\n        assert_eq!(FieldValue(&Type::UnsignedInteger(83)).escape(), r#\"83i\"#);\n\n        assert_eq!(FieldValue(&Type::UnsignedInteger(0)).escape_v2(), r#\"0u\"#);\n        assert_eq!(FieldValue(&Type::UnsignedInteger(83)).escape_v2(), r#\"83u\"#);\n\n        assert_eq!(FieldValue(&Type::Text(\"\".into())).escape(), r#\"\"\"\"#);\n        assert_eq!(FieldValue(&Type::Text(\"0\".into())).escape(), r#\"\"0\"\"#);\n        assert_eq!(FieldValue(&Type::Text(\"\\\"\".into())).escape(), r#\"\"\\\"\"\"#);\n        assert_eq!(\n            FieldValue(&Type::Text(r#\"locat\"\\ ,=ion\"#.into())).escape(),\n            r#\"\"locat\\\"\\\\ ,=ion\"\"#\n        );\n    }\n\n    #[test]\n    fn test_empty_tag_value() {\n        // InfluxDB doesn't support empty tag values. But that's a job\n        // of a calling site to validate an entire write request.\n        assert_eq!(TagValue(&Type::Text(\"\".into())).escape(), r#\"\"#);\n    }\n}\n","traces":[{"line":6,"address":[7503072,7503097],"length":1,"stats":{"Line":6}},{"line":7,"address":[7037168,7037193],"length":1,"stats":{"Line":6}},{"line":8,"address":[2075296,2075321],"length":1,"stats":{"Line":2}},{"line":9,"address":[2075625,2075600],"length":1,"stats":{"Line":4}},{"line":20,"address":[7495232],"length":1,"stats":{"Line":3}},{"line":22,"address":[2071874,2071823,2071699],"length":1,"stats":{"Line":10}},{"line":23,"address":[7029079],"length":1,"stats":{"Line":3}},{"line":24,"address":[2071856,2071912,2071805],"length":1,"stats":{"Line":10}},{"line":25,"address":[7495439],"length":1,"stats":{"Line":3}},{"line":26,"address":[7029180],"length":1,"stats":{"Line":3}},{"line":30,"address":[7495536],"length":1,"stats":{"Line":1}},{"line":32,"address":[2072003,2072127,2072178],"length":1,"stats":{"Line":2}},{"line":33,"address":[2072039],"length":1,"stats":{"Line":2}},{"line":34,"address":[2072160,2072109,2072219],"length":1,"stats":{"Line":2}},{"line":35,"address":[2072190],"length":1,"stats":{"Line":1}},{"line":36,"address":[7495692],"length":1,"stats":{"Line":0}},{"line":40,"address":[2073205,2072288,2073211],"length":1,"stats":{"Line":3}},{"line":42,"address":[7029677],"length":1,"stats":{"Line":3}},{"line":43,"address":[2072398],"length":1,"stats":{"Line":1}},{"line":44,"address":[2072413,2072737,2072765],"length":1,"stats":{"Line":3}},{"line":45,"address":[2072739],"length":1,"stats":{"Line":1}},{"line":47,"address":[7496274],"length":1,"stats":{"Line":1}},{"line":51,"address":[7495990],"length":1,"stats":{"Line":1}},{"line":52,"address":[7496018],"length":1,"stats":{"Line":3}},{"line":53,"address":[2072595],"length":1,"stats":{"Line":1}},{"line":54,"address":[7029953],"length":1,"stats":{"Line":1}},{"line":55,"address":[2072922],"length":1,"stats":{"Line":1}},{"line":57,"address":[7496352],"length":1,"stats":{"Line":1}},{"line":60,"address":[7496179,7496608],"length":1,"stats":{"Line":1}},{"line":64,"address":[7030576],"length":1,"stats":{"Line":3}},{"line":66,"address":[7030600],"length":1,"stats":{"Line":3}},{"line":67,"address":[2073321],"length":1,"stats":{"Line":1}},{"line":68,"address":[7030894,7030866,7030677],"length":1,"stats":{"Line":2}},{"line":69,"address":[7030868],"length":1,"stats":{"Line":1}},{"line":71,"address":[2073497],"length":1,"stats":{"Line":0}},{"line":75,"address":[2073358],"length":1,"stats":{"Line":1}},{"line":76,"address":[2073387],"length":1,"stats":{"Line":1}},{"line":77,"address":[2073416],"length":1,"stats":{"Line":2}},{"line":78,"address":[2073440],"length":1,"stats":{"Line":2}},{"line":82,"address":[2073584,2073731,2073737],"length":1,"stats":{"Line":3}},{"line":83,"address":[2073629],"length":1,"stats":{"Line":3}}],"covered":39,"coverable":41},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","mod.rs"],"content":"//! Used to create queries of type [`ReadQuery`](crate::query::read_query::ReadQuery) or\n//! [`WriteQuery`](crate::query::write_query::WriteQuery) which can be executed in InfluxDB\n//!\n//! # Examples\n//!\n//! ```rust\n//! use influxdb::{Query, Timestamp};\n//! use influxdb::InfluxDbWriteable;\n//!\n//! let write_query = Timestamp::Nanoseconds(0).into_query(\"measurement\")\n//!     .add_field(\"field1\", 5)\n//!     .add_tag(\"author\", \"Gero\")\n//!     .build();\n//!\n//! assert!(write_query.is_ok());\n//!\n//! let read_query = Query::raw_read_query(\"SELECT * FROM weather\")\n//!     .build();\n//!\n//! assert!(read_query.is_ok());\n//! ```\n\nuse chrono::prelude::{DateTime, TimeZone, Utc};\nuse std::convert::TryInto;\n\npub mod consts;\nmod line_proto_term;\npub mod read_query;\npub mod write_query;\nuse std::fmt;\n\nuse crate::{Error, ReadQuery, WriteQuery};\nuse consts::{\n    MILLIS_PER_SECOND, MINUTES_PER_HOUR, NANOS_PER_MICRO, NANOS_PER_MILLI, SECONDS_PER_MINUTE,\n};\n\n#[cfg(feature = \"derive\")]\npub use influxdb_derive::InfluxDbWriteable;\n\n#[derive(PartialEq, Eq, Debug, Copy, Clone)]\npub enum Timestamp {\n    Nanoseconds(u128),\n    Microseconds(u128),\n    Milliseconds(u128),\n    Seconds(u128),\n    Minutes(u128),\n    Hours(u128),\n}\n\nimpl fmt::Display for Timestamp {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        use Timestamp::*;\n        match self {\n            Nanoseconds(ts) | Microseconds(ts) | Milliseconds(ts) | Seconds(ts) | Minutes(ts)\n            | Hours(ts) => write!(f, \"{ts}\"),\n        }\n    }\n}\n\nimpl From<Timestamp> for DateTime<Utc> {\n    fn from(ts: Timestamp) -> DateTime<Utc> {\n        match ts {\n            Timestamp::Hours(h) => {\n                let nanos =\n                    h * MINUTES_PER_HOUR * SECONDS_PER_MINUTE * MILLIS_PER_SECOND * NANOS_PER_MILLI;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n            Timestamp::Minutes(m) => {\n                let nanos = m * SECONDS_PER_MINUTE * MILLIS_PER_SECOND * NANOS_PER_MILLI;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n            Timestamp::Seconds(s) => {\n                let nanos = s * MILLIS_PER_SECOND * NANOS_PER_MILLI;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n            Timestamp::Milliseconds(millis) => {\n                let nanos = millis * NANOS_PER_MILLI;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n            Timestamp::Nanoseconds(nanos) => Utc.timestamp_nanos(nanos.try_into().unwrap()),\n            Timestamp::Microseconds(micros) => {\n                let nanos = micros * NANOS_PER_MICRO;\n                Utc.timestamp_nanos(nanos.try_into().unwrap())\n            }\n        }\n    }\n}\n\nimpl<T> From<DateTime<T>> for Timestamp\nwhere\n    T: TimeZone,\n{\n    fn from(date_time: DateTime<T>) -> Self {\n        Timestamp::Nanoseconds(date_time.timestamp_nanos_opt().unwrap() as u128)\n    }\n}\n\npub trait Query {\n    /// Builds valid InfluxSQL which can be run against the Database.\n    /// In case no fields have been specified, it will return an error,\n    /// as that is invalid InfluxSQL syntax.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::{Query, Timestamp};\n    /// use influxdb::InfluxDbWriteable;\n    ///\n    /// let invalid_query = Timestamp::Nanoseconds(0).into_query(\"measurement\").build();\n    /// assert!(invalid_query.is_err());\n    ///\n    /// let valid_query = Timestamp::Nanoseconds(0).into_query(\"measurement\").add_field(\"myfield1\", 11).build();\n    /// assert!(valid_query.is_ok());\n    /// ```\n    fn build(&self) -> Result<ValidQuery, Error>;\n\n    /// Like [build] but with additional support for unsigned integers in the line protocol.\n    /// Please note, this crate can only interact with InfluxDB 2.0 in compatibility mode\n    /// and does not natively support InfluxDB 2.0.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::{Query, Timestamp};\n    /// use influxdb::InfluxDbWriteable;\n    ///\n    /// let use_v2 = true;\n    ///\n    /// let invalid_query = Timestamp::Nanoseconds(0).into_query(\"measurement\").build_with_opts(use_v2);\n    /// assert!(invalid_query.is_err());\n    ///\n    /// let valid_query = Timestamp::Nanoseconds(0).into_query(\"measurement\").add_field(\"myfield1\", 11).build_with_opts(use_v2);\n    /// assert!(valid_query.is_ok());\n    /// ```\n    fn build_with_opts(&self, use_v2: bool) -> Result<ValidQuery, Error>;\n\n    fn get_type(&self) -> QueryType;\n}\n\nimpl<Q: Query> Query for &Q {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        Q::build_with_opts(self, false)\n    }\n\n    fn build_with_opts(&self, use_v2: bool) -> Result<ValidQuery, Error> {\n        Q::build_with_opts(self, use_v2)\n    }\n\n    fn get_type(&self) -> QueryType {\n        Q::get_type(self)\n    }\n}\n\nimpl<Q: Query> Query for Box<Q> {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        Q::build(self)\n    }\n\n    fn build_with_opts(&self, use_v2: bool) -> Result<ValidQuery, Error> {\n        Q::build_with_opts(self, use_v2)\n    }\n\n    fn get_type(&self) -> QueryType {\n        Q::get_type(self)\n    }\n}\n\npub trait InfluxDbWriteable {\n    fn into_query<I: Into<String>>(self, name: I) -> WriteQuery;\n}\n\nimpl InfluxDbWriteable for Timestamp {\n    fn into_query<I: Into<String>>(self, name: I) -> WriteQuery {\n        WriteQuery::new(self, name.into())\n    }\n}\n\nimpl dyn Query {\n    /// Returns a [`ReadQuery`](crate::ReadQuery) builder.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::Query;\n    ///\n    /// Query::raw_read_query(\"SELECT * FROM weather\"); // Is of type [`ReadQuery`](crate::ReadQuery)\n    /// ```\n    #[deprecated(since = \"0.5.0\", note = \"Use ReadQuery::new instead\")]\n    pub fn raw_read_query<S>(read_query: S) -> ReadQuery\n    where\n        S: Into<String>,\n    {\n        ReadQuery::new(read_query)\n    }\n}\n\n#[derive(Debug)]\n#[doc(hidden)]\npub struct ValidQuery(String);\nimpl ValidQuery {\n    pub fn get(self) -> String {\n        self.0\n    }\n}\nimpl<T> From<T> for ValidQuery\nwhere\n    T: Into<String>,\n{\n    fn from(string: T) -> Self {\n        Self(string.into())\n    }\n}\nimpl PartialEq<String> for ValidQuery {\n    fn eq(&self, other: &String) -> bool {\n        &self.0 == other\n    }\n}\nimpl PartialEq<&str> for ValidQuery {\n    fn eq(&self, other: &&str) -> bool {\n        &self.0 == other\n    }\n}\n\n/// Internal Enum used to decide if a `POST` or `GET` request should be sent to InfluxDB. See [InfluxDB Docs](https://docs.influxdata.com/influxdb/v1.7/tools/api/#query-http-endpoint).\n#[derive(PartialEq, Eq, Debug)]\npub enum QueryType {\n    ReadQuery,\n    /// write query with precision\n    WriteQuery(String),\n}\n\n#[cfg(test)]\nmod tests {\n    use super::consts::{\n        MILLIS_PER_SECOND, MINUTES_PER_HOUR, NANOS_PER_MICRO, NANOS_PER_MILLI, SECONDS_PER_MINUTE,\n    };\n    use crate::query::{Timestamp, ValidQuery};\n    use chrono::prelude::{DateTime, TimeZone, Utc};\n    use std::convert::TryInto;\n    #[test]\n    fn test_equality_str() {\n        assert_eq!(ValidQuery::from(\"hello\"), \"hello\");\n    }\n    #[test]\n    fn test_equality_string() {\n        assert_eq!(\n            ValidQuery::from(String::from(\"hello\")),\n            String::from(\"hello\")\n        );\n    }\n    #[test]\n    fn test_format_for_timestamp_else() {\n        assert!(format!(\"{}\", Timestamp::Nanoseconds(100)) == \"100\");\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_hours() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Hours(2).into();\n        assert_eq!(\n            Utc.timestamp_nanos(\n                (2 * MINUTES_PER_HOUR * SECONDS_PER_MINUTE * MILLIS_PER_SECOND * NANOS_PER_MILLI)\n                    .try_into()\n                    .unwrap()\n            ),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_minutes() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Minutes(2).into();\n        assert_eq!(\n            Utc.timestamp_nanos(\n                (2 * SECONDS_PER_MINUTE * MILLIS_PER_SECOND * NANOS_PER_MILLI)\n                    .try_into()\n                    .unwrap()\n            ),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_seconds() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Seconds(2).into();\n        assert_eq!(\n            Utc.timestamp_nanos(\n                (2 * MILLIS_PER_SECOND * NANOS_PER_MILLI)\n                    .try_into()\n                    .unwrap()\n            ),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_millis() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Milliseconds(2).into();\n        assert_eq!(\n            Utc.timestamp_nanos((2 * NANOS_PER_MILLI).try_into().unwrap()),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_nanos() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Nanoseconds(1).into();\n        assert_eq!(Utc.timestamp_nanos(1), datetime_from_timestamp)\n    }\n    #[test]\n    fn test_chrono_datetime_from_timestamp_micros() {\n        let datetime_from_timestamp: DateTime<Utc> = Timestamp::Microseconds(2).into();\n        assert_eq!(\n            Utc.timestamp_nanos((2 * NANOS_PER_MICRO).try_into().unwrap()),\n            datetime_from_timestamp\n        )\n    }\n    #[test]\n    fn test_timestamp_from_chrono_date() {\n        let timestamp_from_datetime: Timestamp = Utc\n            .with_ymd_and_hms(1970, 1, 1, 0, 0, 1)\n            .single()\n            .unwrap()\n            .into();\n        assert_eq!(\n            Timestamp::Nanoseconds(MILLIS_PER_SECOND * NANOS_PER_MILLI),\n            timestamp_from_datetime\n        )\n    }\n}\n","traces":[{"line":51,"address":[7483024],"length":1,"stats":{"Line":3}},{"line":53,"address":[1977131,1977022,1977067,1977099,1977115,1977083],"length":1,"stats":{"Line":5}},{"line":54,"address":[1977090,1977058,1977106,1977074,1977122],"length":1,"stats":{"Line":4}},{"line":61,"address":[6981408],"length":1,"stats":{"Line":2}},{"line":62,"address":[7447671],"length":1,"stats":{"Line":2}},{"line":63,"address":[6982076],"length":1,"stats":{"Line":2}},{"line":64,"address":[6983177,6982121,6982872],"length":1,"stats":{"Line":4}},{"line":66,"address":[2020925],"length":1,"stats":{"Line":2}},{"line":68,"address":[2019762],"length":1,"stats":{"Line":1}},{"line":69,"address":[7449054,7448826,7448208],"length":1,"stats":{"Line":2}},{"line":70,"address":[2020595],"length":1,"stats":{"Line":1}},{"line":72,"address":[2019641],"length":1,"stats":{"Line":1}},{"line":73,"address":[2020396,2020228,2019686],"length":1,"stats":{"Line":2}},{"line":74,"address":[2020342],"length":1,"stats":{"Line":1}},{"line":76,"address":[6981713],"length":1,"stats":{"Line":1}},{"line":77,"address":[7447966,7448534,7448605],"length":1,"stats":{"Line":2}},{"line":78,"address":[6982342],"length":1,"stats":{"Line":1}},{"line":80,"address":[2019313],"length":1,"stats":{"Line":2}},{"line":81,"address":[2019399],"length":1,"stats":{"Line":1}},{"line":82,"address":[6982297,6982229,6981637],"length":1,"stats":{"Line":2}},{"line":83,"address":[2020052],"length":1,"stats":{"Line":1}},{"line":93,"address":[],"length":0,"stats":{"Line":2}},{"line":94,"address":[1977316,1977259],"length":1,"stats":{"Line":4}},{"line":141,"address":[],"length":0,"stats":{"Line":1}},{"line":142,"address":[],"length":0,"stats":{"Line":1}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":0}},{"line":149,"address":[],"length":0,"stats":{"Line":2}},{"line":150,"address":[],"length":0,"stats":{"Line":2}},{"line":155,"address":[],"length":0,"stats":{"Line":0}},{"line":156,"address":[],"length":0,"stats":{"Line":0}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":163,"address":[],"length":0,"stats":{"Line":0}},{"line":164,"address":[],"length":0,"stats":{"Line":0}},{"line":173,"address":[],"length":0,"stats":{"Line":5}},{"line":174,"address":[],"length":0,"stats":{"Line":5}},{"line":193,"address":[],"length":0,"stats":{"Line":0}},{"line":201,"address":[7017056],"length":1,"stats":{"Line":7}},{"line":202,"address":[1977699],"length":1,"stats":{"Line":7}},{"line":209,"address":[],"length":0,"stats":{"Line":2}},{"line":210,"address":[],"length":0,"stats":{"Line":2}},{"line":214,"address":[7483296],"length":1,"stats":{"Line":1}},{"line":215,"address":[1977917],"length":1,"stats":{"Line":1}},{"line":219,"address":[1977952],"length":1,"stats":{"Line":1}},{"line":220,"address":[1977965],"length":1,"stats":{"Line":1}}],"covered":37,"coverable":46},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","read_query.rs"],"content":"//! Read Query Builder returned by Query::raw_read_query\n//!\n//! Can only be instantiated by using Query::raw_read_query\n\nuse crate::query::{QueryType, ValidQuery};\nuse crate::{Error, Query};\n\n#[derive(Debug, Clone)]\npub struct ReadQuery {\n    queries: Vec<String>,\n}\n\nimpl ReadQuery {\n    /// Creates a new [`ReadQuery`]\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn new<S>(query: S) -> Self\n    where\n        S: Into<String>,\n    {\n        ReadQuery {\n            queries: vec![query.into()],\n        }\n    }\n\n    /// Adds a query to the [`ReadQuery`]\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn add_query<S>(mut self, query: S) -> Self\n    where\n        S: Into<String>,\n    {\n        self.queries.push(query.into());\n        self\n    }\n}\n\nimpl Query for ReadQuery {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        Ok(ValidQuery(self.queries.join(\";\")))\n    }\n\n    fn build_with_opts(&self, _use_v2: bool) -> Result<ValidQuery, Error> {\n        Ok(ValidQuery(self.queries.join(\";\")))\n    }\n\n    fn get_type(&self) -> QueryType {\n        QueryType::ReadQuery\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use crate::query::{Query, QueryType, ReadQuery};\n\n    #[test]\n    fn test_read_builder_single_query() {\n        let query = ReadQuery::new(\"SELECT * FROM aachen\").build();\n\n        assert_eq!(query.unwrap(), \"SELECT * FROM aachen\");\n    }\n\n    #[test]\n    fn test_read_builder_multi_query() {\n        let query = ReadQuery::new(\"SELECT * FROM aachen\")\n            .add_query(\"SELECT * FROM cologne\")\n            .build();\n\n        assert_eq!(query.unwrap(), \"SELECT * FROM aachen;SELECT * FROM cologne\");\n    }\n\n    #[test]\n    fn test_correct_query_type() {\n        let query = ReadQuery::new(\"SELECT * FROM aachen\");\n\n        assert_eq!(query.get_type(), QueryType::ReadQuery);\n    }\n}\n","traces":[{"line":16,"address":[2073760,2074121,2074132],"length":1,"stats":{"Line":8}},{"line":21,"address":[],"length":0,"stats":{"Line":16}},{"line":27,"address":[2074336,2074160],"length":1,"stats":{"Line":2}},{"line":31,"address":[],"length":0,"stats":{"Line":4}},{"line":32,"address":[2074309],"length":1,"stats":{"Line":2}},{"line":37,"address":[2074352],"length":1,"stats":{"Line":7}},{"line":38,"address":[2074384],"length":1,"stats":{"Line":7}},{"line":41,"address":[2074496],"length":1,"stats":{"Line":0}},{"line":42,"address":[2074534],"length":1,"stats":{"Line":0}},{"line":45,"address":[2074656],"length":1,"stats":{"Line":7}},{"line":46,"address":[2074664],"length":1,"stats":{"Line":7}}],"covered":9,"coverable":11},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","src","query","write_query.rs"],"content":"//! Write Query Builder returned by Query::write_query\n//!\n//! Can only be instantiated by using Query::write_query\n\nuse crate::query::line_proto_term::LineProtoTerm;\nuse crate::query::{QueryType, ValidQuery};\nuse crate::{Error, Query, Timestamp};\nuse std::fmt::{Display, Formatter};\n\npub trait WriteType {\n    fn add_to(self, tag: String, fields_or_tags: &mut Vec<(String, Type)>);\n}\n\nimpl<T: Into<Type>> WriteType for T {\n    fn add_to(self, tag: String, fields_or_tags: &mut Vec<(String, Type)>) {\n        let val: Type = self.into();\n        fields_or_tags.push((tag, val));\n    }\n}\n\nimpl<T: Into<Type>> WriteType for Option<T> {\n    fn add_to(self, tag: String, fields_or_tags: &mut Vec<(String, Type)>) {\n        if let Some(val) = self {\n            val.add_to(tag, fields_or_tags);\n        }\n    }\n}\n\n/// Internal Representation of a Write query that has not yet been built\n#[derive(Debug, Clone)]\npub struct WriteQuery {\n    fields: Vec<(String, Type)>,\n    tags: Vec<(String, Type)>,\n    measurement: String,\n    timestamp: Timestamp,\n}\n\nimpl WriteQuery {\n    /// Creates a new [`WriteQuery`](crate::query::write_query::WriteQuery)\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn new<S>(timestamp: Timestamp, measurement: S) -> Self\n    where\n        S: Into<String>,\n    {\n        WriteQuery {\n            fields: vec![],\n            tags: vec![],\n            measurement: measurement.into(),\n            timestamp,\n        }\n    }\n\n    /// Adds a field to the [`WriteQuery`](crate::WriteQuery)\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::{Query, Timestamp};\n    /// use influxdb::InfluxDbWriteable;\n    ///\n    /// Timestamp::Nanoseconds(0).into_query(\"measurement\").add_field(\"field1\", 5).build();\n    /// ```\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn add_field<S, F>(mut self, field: S, value: F) -> Self\n    where\n        S: Into<String>,\n        F: WriteType,\n    {\n        value.add_to(field.into(), &mut self.fields);\n        self\n    }\n\n    /// Adds a tag to the [`WriteQuery`](crate::WriteQuery)\n    ///\n    /// Please note that a [`WriteQuery`](crate::WriteQuery) requires at least one field. Composing a query with\n    /// only tags will result in a failure building the query.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use influxdb::{Query, Timestamp};\n    /// use influxdb::InfluxDbWriteable;\n    ///\n    /// Timestamp::Nanoseconds(0)\n    ///     .into_query(\"measurement\")\n    ///     .add_tag(\"field1\", 5); // calling `.build()` now would result in a `Err(Error::InvalidQueryError)`\n    /// ```\n    #[must_use = \"Creating a query is pointless unless you execute it\"]\n    pub fn add_tag<S, I>(mut self, tag: S, value: I) -> Self\n    where\n        S: Into<String>,\n        I: WriteType,\n    {\n        value.add_to(tag.into(), &mut self.tags);\n        self\n    }\n\n    pub fn get_precision(&self) -> String {\n        let modifier = match self.timestamp {\n            Timestamp::Nanoseconds(_) => \"ns\",\n            Timestamp::Microseconds(_) => \"u\",\n            Timestamp::Milliseconds(_) => \"ms\",\n            Timestamp::Seconds(_) => \"s\",\n            Timestamp::Minutes(_) => \"m\",\n            Timestamp::Hours(_) => \"h\",\n        };\n        modifier.to_string()\n    }\n}\n\n#[derive(Debug, Clone)]\npub enum Type {\n    Boolean(bool),\n    Float(f64),\n    SignedInteger(i64),\n    UnsignedInteger(u64),\n    Text(String),\n}\n\nimpl Display for Type {\n    fn fmt(&self, f: &mut Formatter) -> std::fmt::Result {\n        use Type::*;\n\n        match self {\n            Boolean(x) => write!(f, \"{x}\"),\n            Float(x) => write!(f, \"{x}\"),\n            SignedInteger(x) => write!(f, \"{x}\"),\n            UnsignedInteger(x) => write!(f, \"{x}\"),\n            Text(text) => write!(f, \"{text}\"),\n        }\n    }\n}\n\nmacro_rules! from_impl {\n        ( $variant:ident => $( $typ:ident ),+ ) => (\n                $(\n                    impl From<$typ> for Type {\n                        fn from(b: $typ) -> Self {\n                            Type::$variant(b.into())\n                        }\n                    }\n                )+\n        )\n}\nfrom_impl! {Boolean => bool}\nfrom_impl! {Float => f32, f64}\nfrom_impl! {SignedInteger => i8, i16, i32, i64}\nfrom_impl! {UnsignedInteger => u8, u16, u32, u64}\nfrom_impl! {Text => String}\nimpl From<&str> for Type {\n    fn from(b: &str) -> Self {\n        Type::Text(b.into())\n    }\n}\nimpl<T> From<&T> for Type\nwhere\n    T: Copy + Into<Type>,\n{\n    fn from(t: &T) -> Self {\n        (*t).into()\n    }\n}\n\nimpl Query for WriteQuery {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        self.build_with_opts(false)\n    }\n\n    fn build_with_opts(&self, use_v2: bool) -> Result<ValidQuery, Error> {\n        if self.fields.is_empty() {\n            return Err(Error::InvalidQueryError {\n                error: \"fields cannot be empty\".to_string(),\n            });\n        }\n\n        let mut tags = self\n            .tags\n            .iter()\n            .map(|(tag, value)| {\n                let escaped_tag_key = if use_v2 {\n                    LineProtoTerm::TagKey(tag).escape_v2()\n                } else {\n                    LineProtoTerm::TagKey(tag).escape()\n                };\n                let escaped_tag_value = if use_v2 {\n                    LineProtoTerm::TagValue(value).escape_v2()\n                } else {\n                    LineProtoTerm::TagValue(value).escape()\n                };\n                format!(\"{escaped_tag_key}={escaped_tag_value}\")\n            })\n            .collect::<Vec<String>>()\n            .join(\",\");\n\n        if !tags.is_empty() {\n            tags.insert(0, ',');\n        }\n        let fields = self\n            .fields\n            .iter()\n            .map(|(field, value)| {\n                let escaped_field_key = if use_v2 {\n                    LineProtoTerm::FieldKey(field).escape_v2()\n                } else {\n                    LineProtoTerm::FieldKey(field).escape()\n                };\n                let escaped_field_value = if use_v2 {\n                    LineProtoTerm::FieldValue(value).escape_v2()\n                } else {\n                    LineProtoTerm::FieldValue(value).escape()\n                };\n                format!(\"{escaped_field_key}={escaped_field_value}\")\n            })\n            .collect::<Vec<String>>()\n            .join(\",\");\n\n        let escaped_measurement = if use_v2 {\n            LineProtoTerm::Measurement(&self.measurement).escape_v2()\n        } else {\n            LineProtoTerm::Measurement(&self.measurement).escape()\n        };\n\n        Ok(ValidQuery(format!(\n            \"{measurement}{tags} {fields} {time}\",\n            measurement = escaped_measurement,\n            tags = tags,\n            fields = fields,\n            time = self.timestamp\n        )))\n    }\n\n    fn get_type(&self) -> QueryType {\n        QueryType::WriteQuery(self.get_precision())\n    }\n}\n\nimpl Query for Vec<WriteQuery> {\n    fn build(&self) -> Result<ValidQuery, Error> {\n        let mut qlines = Vec::new();\n\n        for q in self {\n            let valid_query = q.build()?;\n            qlines.push(valid_query.0);\n        }\n\n        Ok(ValidQuery(qlines.join(\"\\n\")))\n    }\n\n    fn build_with_opts(&self, use_v2: bool) -> Result<ValidQuery, Error> {\n        let mut qlines = Vec::new();\n\n        for q in self {\n            let valid_query = q.build_with_opts(use_v2)?;\n            qlines.push(valid_query.0);\n        }\n\n        Ok(ValidQuery(qlines.join(\"\\n\")))\n    }\n\n    fn get_type(&self) -> QueryType {\n        QueryType::WriteQuery(\n            self.first()\n                .map(|q| q.get_precision())\n                // use \"ms\" as placeholder if query is empty\n                .unwrap_or_else(|| \"ms\".to_owned()),\n        )\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use crate::query::{InfluxDbWriteable, Query, Timestamp};\n\n    #[test]\n    fn test_write_builder_empty_query() {\n        let query = Timestamp::Hours(5)\n            .into_query(\"marina_3\".to_string())\n            .build();\n\n        assert!(query.is_err(), \"Query was not empty\");\n    }\n\n    #[test]\n    fn test_write_builder_single_field() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82)\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(query.unwrap(), \"weather temperature=82i 11\");\n    }\n\n    #[test]\n    fn test_write_builder_multiple_fields() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82)\n            .add_field(\"wind_strength\", 3.7)\n            .add_field(\"temperature_unsigned\", 82u64)\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(\n            query.unwrap(),\n            \"weather temperature=82i,wind_strength=3.7,temperature_unsigned=82i 11\"\n        );\n    }\n\n    #[test]\n    fn test_write_builder_multiple_fields_with_v2() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82)\n            .add_field(\"wind_strength\", 3.7)\n            .add_field(\"temperature_unsigned\", 82u64)\n            .build_with_opts(true);\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(\n            query.unwrap(),\n            \"weather temperature=82i,wind_strength=3.7,temperature_unsigned=82u 11\"\n        );\n    }\n\n    #[test]\n    fn test_write_builder_optional_fields() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82u64)\n            .add_tag(\"wind_strength\", <Option<u64>>::None)\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(query.unwrap(), \"weather temperature=82i 11\");\n    }\n\n    #[test]\n    fn test_write_builder_optional_fields_with_v2() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82u64)\n            .add_tag(\"wind_strength\", <Option<u64>>::None)\n            .build_with_opts(true);\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(query.unwrap(), \"weather temperature=82u 11\");\n    }\n\n    #[test]\n    fn test_write_builder_only_tags() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_tag(\"season\", \"summer\")\n            .build();\n\n        assert!(query.is_err(), \"Query missing one or more fields\");\n    }\n\n    #[test]\n    fn test_write_builder_full_query() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82)\n            .add_tag(\"location\", \"us-midwest\")\n            .add_tag(\"season\", \"summer\")\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        assert_eq!(\n            query.unwrap(),\n            r#\"weather,location=us-midwest,season=summer temperature=82i 11\"#\n        );\n    }\n\n    #[test]\n    fn test_correct_query_type() {\n        use crate::query::QueryType;\n\n        let query = Timestamp::Hours(11)\n            .into_query(\"weather\".to_string())\n            .add_field(\"temperature\", 82)\n            .add_tag(\"location\", \"us-midwest\")\n            .add_tag(\"season\", \"summer\");\n\n        assert_eq!(query.get_type(), QueryType::WriteQuery(\"h\".to_owned()));\n    }\n\n    #[test]\n    fn test_escaping() {\n        let query = Timestamp::Hours(11)\n            .into_query(\"wea, ther=\")\n            .add_field(\"temperature\", 82)\n            .add_field(\"\\\"temp=era,t ure\\\"\", r#\"too\"\\\\hot\"#)\n            .add_field(\"float\", 82.0)\n            .add_tag(\"location\", \"us-midwest\")\n            .add_tag(\"loc, =\\\"ation\", r#\"us, \"mid=west\"#)\n            .build();\n\n        assert!(query.is_ok(), \"Query was empty\");\n        let query_res = query.unwrap().get();\n        assert_eq!(\n            query_res,\n            r#\"wea\\,\\ ther=,location=us-midwest,loc\\,\\ \\=\"ation=us\\,\\ \\\"mid\\=west temperature=82i,\"temp\\=era\\,t\\ ure\"=\"too\\\"\\\\\\\\hot\",float=82 11\"#\n        );\n    }\n\n    #[test]\n    fn test_batch() {\n        let q0 = Timestamp::Hours(11)\n            .into_query(\"weather\")\n            .add_field(\"temperature\", 82)\n            .add_tag(\"location\", \"us-midwest\");\n\n        let q1 = Timestamp::Hours(12)\n            .into_query(\"weather\")\n            .add_field(\"temperature\", 65)\n            .add_tag(\"location\", \"us-midwest\");\n\n        let query = vec![q0, q1].build();\n\n        assert_eq!(\n            query.unwrap().get(),\n            r#\"weather,location=us-midwest temperature=82i 11\nweather,location=us-midwest temperature=65i 12\"#\n        );\n    }\n}\n","traces":[{"line":15,"address":[],"length":0,"stats":{"Line":13}},{"line":16,"address":[2349335,2349090],"length":1,"stats":{"Line":13}},{"line":17,"address":[],"length":0,"stats":{"Line":13}},{"line":22,"address":[2316299,2316096],"length":1,"stats":{"Line":3}},{"line":23,"address":[2316124],"length":1,"stats":{"Line":3}},{"line":24,"address":[2316179,2316248],"length":1,"stats":{"Line":2}},{"line":41,"address":[2093568,2093963],"length":1,"stats":{"Line":4}},{"line":46,"address":[2093641],"length":1,"stats":{"Line":5}},{"line":47,"address":[],"length":0,"stats":{"Line":5}},{"line":48,"address":[],"length":0,"stats":{"Line":5}},{"line":64,"address":[2353006,2352800],"length":1,"stats":{"Line":9}},{"line":69,"address":[2094064,2094769,2094290,2094426,2094525,2094199,2094671,2094904],"length":1,"stats":{"Line":9}},{"line":70,"address":[2094636,2094872,2094167,2094394],"length":1,"stats":{"Line":10}},{"line":89,"address":[2352773,2352544],"length":1,"stats":{"Line":5}},{"line":94,"address":[2095005,2095151,2095261,2095407],"length":1,"stats":{"Line":5}},{"line":95,"address":[2352732],"length":1,"stats":{"Line":7}},{"line":98,"address":[2095440],"length":1,"stats":{"Line":4}},{"line":99,"address":[7524611],"length":1,"stats":{"Line":4}},{"line":100,"address":[2095490],"length":1,"stats":{"Line":2}},{"line":101,"address":[7524665],"length":1,"stats":{"Line":0}},{"line":102,"address":[7058480],"length":1,"stats":{"Line":0}},{"line":103,"address":[2095559],"length":1,"stats":{"Line":0}},{"line":104,"address":[2095582],"length":1,"stats":{"Line":0}},{"line":105,"address":[7524757],"length":1,"stats":{"Line":2}},{"line":107,"address":[7524783],"length":1,"stats":{"Line":4}},{"line":121,"address":[2095664],"length":1,"stats":{"Line":0}},{"line":124,"address":[2095696],"length":1,"stats":{"Line":0}},{"line":125,"address":[7058704],"length":1,"stats":{"Line":0}},{"line":126,"address":[7525010],"length":1,"stats":{"Line":0}},{"line":127,"address":[2095979],"length":1,"stats":{"Line":0}},{"line":128,"address":[2096106],"length":1,"stats":{"Line":0}},{"line":129,"address":[7525385],"length":1,"stats":{"Line":0}},{"line":138,"address":[7064656,7063952,7064576,7063888,7064176,7064096,7064336,7063792,7064416,7064016,7064256,7064496],"length":1,"stats":{"Line":8}},{"line":139,"address":[2104541,2103987,2104304,2104372,2104453,2104685,2103923,2104133,2104624,2103833,2104052,2104221],"length":1,"stats":{"Line":8}},{"line":151,"address":[7525520],"length":1,"stats":{"Line":5}},{"line":152,"address":[7059335],"length":1,"stats":{"Line":5}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":165,"address":[7059408],"length":1,"stats":{"Line":3}},{"line":166,"address":[2096481],"length":1,"stats":{"Line":3}},{"line":169,"address":[7525664,7527226,7527232],"length":1,"stats":{"Line":3}},{"line":170,"address":[2096573],"length":1,"stats":{"Line":3}},{"line":171,"address":[2096729],"length":1,"stats":{"Line":1}},{"line":172,"address":[7525864],"length":1,"stats":{"Line":1}},{"line":176,"address":[2096671,2096594],"length":1,"stats":{"Line":6}},{"line":179,"address":[2098646,2098064,2098652,2096638,2098106],"length":1,"stats":{"Line":9}},{"line":180,"address":[7527315],"length":1,"stats":{"Line":3}},{"line":181,"address":[2098188],"length":1,"stats":{"Line":0}},{"line":183,"address":[7061119],"length":1,"stats":{"Line":4}},{"line":185,"address":[2098232],"length":1,"stats":{"Line":4}},{"line":186,"address":[7061402,7061266],"length":1,"stats":{"Line":0}},{"line":188,"address":[2098371,2098245],"length":1,"stats":{"Line":7}},{"line":190,"address":[2098378,2098466],"length":1,"stats":{"Line":7}},{"line":195,"address":[7059957],"length":1,"stats":{"Line":3}},{"line":196,"address":[2097017,2097077],"length":1,"stats":{"Line":8}},{"line":198,"address":[7060017,7060139],"length":1,"stats":{"Line":8}},{"line":201,"address":[7061690,7062230,7061648,7060085,7062236],"length":1,"stats":{"Line":12}},{"line":202,"address":[7527923],"length":1,"stats":{"Line":4}},{"line":203,"address":[2098796],"length":1,"stats":{"Line":1}},{"line":205,"address":[2098751],"length":1,"stats":{"Line":4}},{"line":207,"address":[7528024],"length":1,"stats":{"Line":4}},{"line":208,"address":[7528218,7528082],"length":1,"stats":{"Line":3}},{"line":210,"address":[7061829,7061955],"length":1,"stats":{"Line":8}},{"line":212,"address":[2098986,2099074],"length":1,"stats":{"Line":8}},{"line":217,"address":[7060317],"length":1,"stats":{"Line":4}},{"line":218,"address":[7060552,7060364],"length":1,"stats":{"Line":3}},{"line":220,"address":[7526606,7526543],"length":1,"stats":{"Line":8}},{"line":223,"address":[7526675,7526860],"length":1,"stats":{"Line":8}},{"line":232,"address":[2099280],"length":1,"stats":{"Line":4}},{"line":233,"address":[7062275],"length":1,"stats":{"Line":4}},{"line":238,"address":[7551622,7550848,7551592],"length":1,"stats":{"Line":1}},{"line":239,"address":[7084670],"length":1,"stats":{"Line":1}},{"line":241,"address":[2099417,2099485,2100060],"length":1,"stats":{"Line":3}},{"line":242,"address":[2099571,2099781],"length":1,"stats":{"Line":2}},{"line":243,"address":[2099947],"length":1,"stats":{"Line":1}},{"line":246,"address":[7551081],"length":1,"stats":{"Line":1}},{"line":249,"address":[7086220,7086250,7085440],"length":1,"stats":{"Line":0}},{"line":250,"address":[2100173],"length":1,"stats":{"Line":0}},{"line":252,"address":[2100200,2100268,2100861],"length":1,"stats":{"Line":0}},{"line":253,"address":[2100350,2100576],"length":1,"stats":{"Line":0}},{"line":254,"address":[7086077],"length":1,"stats":{"Line":0}},{"line":257,"address":[2100374],"length":1,"stats":{"Line":0}},{"line":260,"address":[2100944],"length":1,"stats":{"Line":0}},{"line":262,"address":[2100976],"length":1,"stats":{"Line":0}},{"line":263,"address":[2100995,2101072,2101088],"length":1,"stats":{"Line":0}},{"line":265,"address":[2101104,2101005,2101116],"length":1,"stats":{"Line":0}}],"covered":61,"coverable":86},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","tests","derive_integration_tests.rs"],"content":"#[path = \"./utilities.rs\"]\nmod utilities;\n\n#[cfg(feature = \"derive\")]\nuse influxdb::InfluxDbWriteable;\n\nuse chrono::{DateTime, Utc};\nuse influxdb::{Query, ReadQuery, Timestamp};\n\n#[cfg(feature = \"serde\")]\nuse serde_derive::Deserialize;\n\nuse utilities::{assert_result_ok, create_client, create_db, delete_db, run_test};\n\n#[derive(Debug, PartialEq)]\n#[cfg_attr(feature = \"derive\", derive(InfluxDbWriteable))]\nstruct WeatherReading {\n    time: DateTime<Utc>,\n    #[influxdb(ignore)]\n    humidity: i32,\n    pressure: i32,\n    #[influxdb(tag)]\n    wind_strength: Option<u64>,\n}\n\n#[derive(Debug)]\n#[cfg_attr(feature = \"serde\", derive(Deserialize))]\nstruct WeatherReadingWithoutIgnored {\n    time: DateTime<Utc>,\n    pressure: i32,\n    wind_strength: Option<u64>,\n}\n\n#[test]\nfn test_build_query() {\n    let weather_reading = WeatherReading {\n        time: Timestamp::Hours(1).into(),\n        humidity: 30,\n        pressure: 100,\n        wind_strength: Some(5),\n    };\n    let query = weather_reading.into_query(\"weather_reading\");\n    let query = query.build().unwrap();\n    assert_eq!(\n        query.get(),\n        \"weather_reading,wind_strength=5 pressure=100i 3600000000000\"\n    );\n}\n\n#[cfg(feature = \"derive\")]\n/// INTEGRATION TEST\n///\n/// This integration tests that writing data and retrieving the data again is working\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_derive_simple_write() {\n    const TEST_NAME: &str = \"test_derive_simple_write\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n            let client = create_client(TEST_NAME);\n            let weather_reading = WeatherReading {\n                time: Timestamp::Nanoseconds(0).into(),\n                humidity: 30,\n                wind_strength: Some(5),\n                pressure: 100,\n            };\n            let query = weather_reading.into_query(\"weather_reading\");\n            let result = client.query(&query).await;\n            assert!(result.is_ok(), \"unable to insert into db\");\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This integration tests that writing data and retrieving the data again is working\n#[cfg(feature = \"derive\")]\n#[cfg(feature = \"serde\")]\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_write_and_read_option() {\n    const TEST_NAME: &str = \"test_write_and_read_option\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n            let client = create_client(TEST_NAME);\n            let weather_reading = WeatherReading {\n                time: Timestamp::Hours(11).into(),\n                humidity: 30,\n                wind_strength: None,\n                pressure: 100,\n            };\n            let write_result = client\n                .query(&weather_reading.into_query(\"weather_reading\".to_string()))\n                .await;\n            assert_result_ok(&write_result);\n\n            let query = ReadQuery::new(\"SELECT time, pressure, wind_strength FROM weather_reading\");\n            let result = client.json_query(query).await.and_then(|mut db_result| {\n                println!(\"{db_result:?}\");\n                db_result.deserialize_next::<WeatherReadingWithoutIgnored>()\n            });\n            assert_result_ok(&result);\n            let result = result.unwrap();\n            let value = &result.series[0].values[0];\n            assert_eq!(value.time, Timestamp::Hours(11).into());\n            assert_eq!(value.pressure, 100);\n            assert_eq!(value.wind_strength, None);\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","tests","integration_tests.rs"],"content":"extern crate influxdb;\n\n#[path = \"./utilities.rs\"]\nmod utilities;\n\nuse serde_derive::Deserialize;\nuse utilities::{\n    assert_result_err, assert_result_ok, create_client, create_db, delete_db, run_test,\n};\n\nuse influxdb::InfluxDbWriteable;\nuse influxdb::{Client, Error, ReadQuery, Timestamp};\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether the InfluxDB server can be connected to and gathers info about it - tested with async_std\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_ping_influx_db_async_std() {\n    let client = create_client(\"notusedhere\");\n    let result = client.ping().await;\n    assert_result_ok(&result);\n\n    let (build, version) = result.unwrap();\n    assert!(!build.is_empty(), \"Build should not be empty\");\n    assert!(!version.is_empty(), \"Build should not be empty\");\n\n    println!(\"build: {build} version: {version}\");\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether the InfluxDB server can be connected to and gathers info about it - tested with tokio 1.0\n#[tokio::test]\n#[cfg(not(any(tarpaulin_include, feature = \"hyper-client\")))]\nasync fn test_ping_influx_db_tokio() {\n    let client = create_client(\"notusedhere\");\n    let result = client.ping().await;\n    assert_result_ok(&result);\n\n    let (build, version) = result.unwrap();\n    assert!(!build.is_empty(), \"Build should not be empty\");\n    assert!(!version.is_empty(), \"Build should not be empty\");\n\n    println!(\"build: {build} version: {version}\");\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests connection error\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_connection_error() {\n    let test_name = \"test_connection_error\";\n    let client =\n        Client::new(\"http://127.0.0.1:10086\", test_name).with_auth(\"nopriv_user\", \"password\");\n    let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n    let read_result = client.query(read_query).await;\n    assert_result_err(&read_result);\n    match read_result {\n        Err(Error::ConnectionError { .. }) => {}\n        _ => panic!(\n            \"Should cause a ConnectionError: {}\",\n            read_result.unwrap_err()\n        ),\n    }\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_authed_write_and_read() {\n    const TEST_NAME: &str = \"test_authed_write_and_read\";\n\n    run_test(\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"CREATE DATABASE {TEST_NAME}\");\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not setup db\");\n\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_ok(&write_result);\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_ok(&read_result);\n            assert!(\n                !read_result.unwrap().contains(\"error\"),\n                \"Data contained a database error\"\n            );\n        },\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"DROP DATABASE {TEST_NAME}\");\n\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_wrong_authed_write_and_read() {\n    use http::StatusCode;\n\n    const TEST_NAME: &str = \"test_wrong_authed_write_and_read\";\n\n    run_test(\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"CREATE DATABASE {TEST_NAME}\");\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not setup db\");\n\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"wrong_user\", \"password\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_err(&write_result);\n            match write_result {\n                Err(Error::ApiError(code)) if code == StatusCode::UNAUTHORIZED.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHORIZED): {}\",\n                    write_result.unwrap_err()\n                ),\n            }\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::ApiError(code)) if code == StatusCode::UNAUTHORIZED.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHORIZED): {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n\n            let client = Client::new(\"http://127.0.0.1:9086\", TEST_NAME)\n                .with_auth(\"nopriv_user\", \"password\");\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::ApiError(code)) if code == StatusCode::FORBIDDEN.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHENTICATED): {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n        },\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"DROP DATABASE {TEST_NAME}\");\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_non_authed_write_and_read() {\n    use http::StatusCode;\n\n    const TEST_NAME: &str = \"test_non_authed_write_and_read\";\n\n    run_test(\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"CREATE DATABASE {TEST_NAME}\");\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not setup db\");\n            let non_authed_client = Client::new(\"http://127.0.0.1:9086\", TEST_NAME);\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = non_authed_client.query(write_query).await;\n            assert_result_err(&write_result);\n            match write_result {\n                Err(Error::ApiError(code)) if code == StatusCode::UNAUTHORIZED.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHORIZED): {}\",\n                    write_result.unwrap_err()\n                ),\n            }\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = non_authed_client.query(read_query).await;\n\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::ApiError(code)) if code == StatusCode::UNAUTHORIZED.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHORIZED): {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n        },\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"DROP DATABASE {TEST_NAME}\");\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This integration tests that writing data and retrieving the data again is working\n#[async_std::test]\n#[cfg(not(tarpaulin_include))]\nasync fn test_write_and_read_field() {\n    const TEST_NAME: &str = \"test_write_field\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n            let client = create_client(TEST_NAME);\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_ok(&write_result);\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_ok(&read_result);\n            assert!(\n                !read_result.unwrap().contains(\"error\"),\n                \"Data contained a database error\"\n            );\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the authentication on json reads\n#[async_std::test]\n#[cfg(feature = \"serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_json_non_authed_read() {\n    use http::StatusCode;\n\n    const TEST_NAME: &str = \"test_json_non_authed_read\";\n\n    run_test(\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"CREATE DATABASE {TEST_NAME}\");\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not setup db\");\n            let non_authed_client = Client::new(\"http://127.0.0.1:9086\", TEST_NAME);\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = non_authed_client.json_query(read_query).await;\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::ApiError(code)) if code == StatusCode::UNAUTHORIZED.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHORIZED): {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n        },\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"DROP DATABASE {TEST_NAME}\");\n\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the authentication on json reads\n#[async_std::test]\n#[cfg(feature = \"serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_json_authed_read() {\n    const TEST_NAME: &str = \"test_json_authed_read\";\n\n    run_test(\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"CREATE DATABASE {TEST_NAME}\");\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not setup db\");\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.json_query(read_query).await;\n            assert_result_ok(&read_result);\n        },\n        || async move {\n            let client =\n                Client::new(\"http://127.0.0.1:9086\", TEST_NAME).with_auth(\"admin\", \"password\");\n            let query = format!(\"DROP DATABASE {TEST_NAME}\");\n\n            client\n                .query(ReadQuery::new(query))\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await\n}\n\n/// INTEGRATION TEST\n///\n/// This integration tests that writing data and retrieving the data again is working\n#[async_std::test]\n#[cfg(feature = \"serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_write_and_read_option() {\n    const TEST_NAME: &str = \"test_write_and_read_option\";\n\n    run_test(\n        || {\n            async move {\n                create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n                let client = create_client(TEST_NAME);\n                // Todo: Convert this to derive based insert for easier comparison of structs\n                let write_query = Timestamp::Hours(11)\n                    .into_query(\"weather\")\n                    .add_field(\"temperature\", 82)\n                    .add_field(\"wind_strength\", <Option<u64>>::None);\n                let write_result = client.query(write_query).await;\n                assert_result_ok(&write_result);\n\n                #[derive(Deserialize, Debug, PartialEq)]\n                struct Weather {\n                    time: String,\n                    // different order to verify field names\n                    // are being used instead of just order\n                    wind_strength: Option<u64>,\n                    temperature: i32,\n                }\n\n                let query = ReadQuery::new(\"SELECT time, temperature, wind_strength FROM weather\");\n                let result = client\n                    .json_query(query)\n                    .await\n                    .and_then(|mut db_result| db_result.deserialize_next::<Weather>());\n                assert_result_ok(&result);\n\n                assert_eq!(\n                    result.unwrap().series[0].values[0],\n                    Weather {\n                        time: \"1970-01-01T11:00:00Z\".to_string(),\n                        temperature: 82,\n                        wind_strength: None,\n                    }\n                );\n            }\n        },\n        || async move {\n            delete_db(\"test_write_and_read_option\")\n                .await\n                .expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether JSON can be decoded from a InfluxDB response and whether that JSON\n/// is equal to the data which was written to the database\n#[async_std::test]\n#[cfg(feature = \"serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_json_query() {\n    const TEST_NAME: &str = \"test_json_query\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n            let client = create_client(TEST_NAME);\n\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_ok(&write_result);\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Weather {\n                time: String,\n                temperature: i32,\n            }\n\n            let query = ReadQuery::new(\"SELECT * FROM weather\");\n            let result = client\n                .json_query(query)\n                .await\n                .and_then(|mut db_result| db_result.deserialize_next::<Weather>());\n            assert_result_ok(&result);\n\n            assert_eq!(\n                result.unwrap().series[0].values[0],\n                Weather {\n                    time: \"1970-01-01T11:00:00Z\".to_string(),\n                    temperature: 82\n                }\n            );\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether the response to a GROUP BY can be parsed by\n/// deserialize_next_tagged into a tags struct\n#[async_std::test]\n#[cfg(feature = \"serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_json_query_tagged() {\n    const TEST_NAME: &str = \"test_json_query_tagged\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n            let client = create_client(TEST_NAME);\n\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_tag(\"location\", \"London\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(write_query).await;\n            assert_result_ok(&write_result);\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct WeatherMeta {\n                location: String,\n            }\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Weather {\n                time: String,\n                temperature: i32,\n            }\n\n            let query = ReadQuery::new(\"SELECT * FROM weather GROUP BY location\");\n            let result = client.json_query(query).await.and_then(|mut db_result| {\n                db_result.deserialize_next_tagged::<WeatherMeta, Weather>()\n            });\n            assert_result_ok(&result);\n            let result = result.unwrap();\n\n            assert_eq!(\n                result.series[0].tags,\n                WeatherMeta {\n                    location: \"London\".to_string(),\n                }\n            );\n            assert_eq!(\n                result.series[0].values[0],\n                Weather {\n                    time: \"1970-01-01T11:00:00Z\".to_string(),\n                    temperature: 82\n                }\n            );\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests whether JSON can be decoded from a InfluxDB response and whether that JSON\n/// is equal to the data which was written to the database\n/// (tested with tokio)\n#[tokio::test]\n#[cfg(all(\n    feature = \"serde\",\n    not(any(tarpaulin_include, feature = \"hyper-client\"))\n))]\nasync fn test_json_query_vec() {\n    const TEST_NAME: &str = \"test_json_query_vec\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n            let client = create_client(TEST_NAME);\n            let write_query1 = Timestamp::Hours(11)\n                .into_query(\"temperature_vec\")\n                .add_field(\"temperature\", 16);\n            let write_query2 = Timestamp::Hours(12)\n                .into_query(\"temperature_vec\")\n                .add_field(\"temperature\", 17);\n            let write_query3 = Timestamp::Hours(13)\n                .into_query(\"temperature_vec\")\n                .add_field(\"temperature\", 18);\n\n            let _write_result = client.query(write_query1).await;\n            let _write_result2 = client.query(write_query2).await;\n            let _write_result2 = client.query(write_query3).await;\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Weather {\n                time: String,\n                temperature: i32,\n            }\n\n            let query = ReadQuery::new(\"SELECT * FROM temperature_vec\");\n            let result = client\n                .json_query(query)\n                .await\n                .and_then(|mut db_result| db_result.deserialize_next::<Weather>());\n            assert_result_ok(&result);\n            assert_eq!(result.unwrap().series[0].values.len(), 3);\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This integration test tests whether using the wrong query method fails building the query\n#[async_std::test]\n#[cfg(feature = \"serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_serde_multi_query() {\n    const TEST_NAME: &str = \"test_serde_multi_query\";\n\n    run_test(\n        || async move {\n            create_db(TEST_NAME).await.expect(\"could not setup db\");\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Temperature {\n                time: String,\n                temperature: i32,\n            }\n\n            #[derive(Deserialize, Debug, PartialEq)]\n            struct Humidity {\n                time: String,\n                humidity: i32,\n            }\n\n            let client = create_client(TEST_NAME);\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"temperature\")\n                .add_field(\"temperature\", 16);\n            let write_query2 = Timestamp::Hours(11)\n                .into_query(\"humidity\")\n                .add_field(\"humidity\", 69);\n\n            let write_result = client.query(write_query).await;\n            let write_result2 = client.query(write_query2).await;\n            assert_result_ok(&write_result);\n            assert_result_ok(&write_result2);\n\n            let result = client\n                .json_query(\n                    ReadQuery::new(\"SELECT * FROM temperature\").add_query(\"SELECT * FROM humidity\"),\n                )\n                .await\n                .and_then(|mut db_result| {\n                    let temp = db_result.deserialize_next::<Temperature>()?;\n                    let humidity = db_result.deserialize_next::<Humidity>()?;\n\n                    Ok((temp, humidity))\n                });\n            assert_result_ok(&result);\n\n            let (temp, humidity) = result.unwrap();\n            assert_eq!(\n                temp.series[0].values[0],\n                Temperature {\n                    time: \"1970-01-01T11:00:00Z\".to_string(),\n                    temperature: 16\n                },\n            );\n            assert_eq!(\n                humidity.series[0].values[0],\n                Humidity {\n                    time: \"1970-01-01T11:00:00Z\".to_string(),\n                    humidity: 69\n                }\n            );\n        },\n        || async move {\n            delete_db(TEST_NAME).await.expect(\"could not clean up db\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This integration test tests whether using the wrong query method fails building the query\n#[async_std::test]\n#[cfg(feature = \"serde\")]\n#[cfg(not(tarpaulin_include))]\nasync fn test_wrong_query_errors() {\n    let client = create_client(\"test_name\");\n    let result = client\n        .json_query(ReadQuery::new(\"CREATE DATABASE this_should_fail\"))\n        .await;\n    assert!(\n        result.is_err(),\n        \"Should only build SELECT and SHOW queries.\"\n    );\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","tests","integration_tests_v2.rs"],"content":"extern crate influxdb;\n\n#[path = \"./utilities.rs\"]\nmod utilities;\nuse utilities::{assert_result_err, assert_result_ok, run_test};\n\nuse influxdb::InfluxDbWriteable;\nuse influxdb::{Client, Error, ReadQuery, Timestamp};\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin))]\nasync fn test_authed_write_and_read() {\n    run_test(\n        || async move {\n            let client = Client::new(\"http://127.0.0.1:2086\", \"mydb\").with_token(\"admintoken\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(&write_query).await;\n            assert_result_ok(&write_result);\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(read_query).await;\n            assert_result_ok(&read_result);\n            assert!(\n                !read_result.unwrap().contains(\"error\"),\n                \"Data contained a database error\"\n            );\n        },\n        || async move {\n            let client = Client::new(\"http://127.0.0.1:2086\", \"mydb\").with_token(\"admintoken\");\n            let read_query = ReadQuery::new(\"DROP MEASUREMENT \\\"weather\\\"\");\n            let read_result = client.query(read_query).await;\n            assert_result_ok(&read_result);\n            assert!(!read_result.unwrap().contains(\"error\"), \"Teardown failed\");\n        },\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin))]\nasync fn test_wrong_authed_write_and_read() {\n    use http::StatusCode;\n\n    run_test(\n        || async move {\n            let client = Client::new(\"http://127.0.0.1:2086\", \"mydb\").with_token(\"falsetoken\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = client.query(&write_query).await;\n            assert_result_err(&write_result);\n            match write_result {\n                Err(Error::ApiError(code)) if code == StatusCode::UNAUTHORIZED.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHORIZED): {}\",\n                    write_result.unwrap_err()\n                ),\n            }\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = client.query(&read_query).await;\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::ApiError(code)) if code == StatusCode::UNAUTHORIZED.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHORIZED): {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n        },\n        || async move {},\n    )\n    .await;\n}\n\n/// INTEGRATION TEST\n///\n/// This test case tests the Authentication\n#[async_std::test]\n#[cfg(not(tarpaulin))]\nasync fn test_non_authed_write_and_read() {\n    use http::StatusCode;\n\n    run_test(\n        || async move {\n            let non_authed_client = Client::new(\"http://127.0.0.1:2086\", \"mydb\");\n            let write_query = Timestamp::Hours(11)\n                .into_query(\"weather\")\n                .add_field(\"temperature\", 82);\n            let write_result = non_authed_client.query(&write_query).await;\n            assert_result_err(&write_result);\n            match write_result {\n                Err(Error::ApiError(code)) if code == StatusCode::UNAUTHORIZED.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHORIZED): {}\",\n                    write_result.unwrap_err()\n                ),\n            }\n\n            let read_query = ReadQuery::new(\"SELECT * FROM weather\");\n            let read_result = non_authed_client.query(&read_query).await;\n            assert_result_err(&read_result);\n            match read_result {\n                Err(Error::ApiError(code)) if code == StatusCode::UNAUTHORIZED.as_u16() => {}\n                _ => panic!(\n                    \"Should be an ApiError(UNAUTHORIZED): {}\",\n                    read_result.unwrap_err()\n                ),\n            }\n        },\n        || async move {},\n    )\n    .await;\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb","tests","utilities.rs"],"content":"use futures_util::FutureExt;\nuse influxdb::{Client, Error, ReadQuery};\nuse std::future::Future;\nuse std::panic::{AssertUnwindSafe, UnwindSafe};\n\n#[allow(dead_code)]\n#[cfg(not(tarpaulin_include))]\npub fn assert_result_err<A: std::fmt::Debug, B: std::fmt::Debug>(result: &Result<A, B>) {\n    result.as_ref().expect_err(\"assert_result_err failed\");\n}\n\n#[cfg(not(tarpaulin_include))]\npub fn assert_result_ok<A: std::fmt::Debug, B: std::fmt::Debug>(result: &Result<A, B>) {\n    result.as_ref().expect(\"assert_result_ok failed\");\n}\n\n#[allow(dead_code)]\n#[cfg(not(tarpaulin_include))]\npub fn create_client<T>(db_name: T) -> Client\nwhere\n    T: Into<String>,\n{\n    Client::new(\"http://127.0.0.1:8086\", db_name)\n}\n\n#[allow(dead_code)]\n#[cfg(not(tarpaulin_include))]\npub async fn create_db<T>(name: T) -> Result<String, Error>\nwhere\n    T: Into<String>,\n{\n    let test_name = name.into();\n    let query = format!(\"CREATE DATABASE {test_name}\");\n    create_client(test_name).query(ReadQuery::new(query)).await\n}\n\n#[allow(dead_code)]\n#[cfg(not(tarpaulin_include))]\npub async fn delete_db<T>(name: T) -> Result<String, Error>\nwhere\n    T: Into<String>,\n{\n    let test_name = name.into();\n    let query = format!(\"DROP DATABASE {test_name}\");\n    create_client(test_name).query(ReadQuery::new(query)).await\n}\n\n#[cfg(not(tarpaulin_include))]\npub async fn run_test<F, T, Fut1, Fut2>(test_fn: F, teardown: T)\nwhere\n    F: FnOnce() -> Fut1 + UnwindSafe,\n    T: FnOnce() -> Fut2,\n    Fut1: Future,\n    Fut2: Future,\n{\n    let test_result = AssertUnwindSafe(test_fn()).catch_unwind().await;\n    AssertUnwindSafe(teardown())\n        .catch_unwind()\n        .await\n        .expect(\"failed teardown\");\n    test_result.expect(\"failed test\");\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb_derive","src","lib.rs"],"content":"use proc_macro::TokenStream;\n\nmod writeable;\nuse syn::parse_macro_input;\nuse writeable::expand_writeable;\n\n#[proc_macro_derive(InfluxDbWriteable, attributes(influxdb))]\npub fn derive_writeable(input: TokenStream) -> TokenStream {\n    expand_writeable(parse_macro_input!(input))\n        .unwrap_or_else(syn::Error::into_compile_error)\n        .into()\n}\n","traces":[{"line":8,"address":[309040,309337,309331],"length":1,"stats":{"Line":0}},{"line":9,"address":[309056,309243],"length":1,"stats":{"Line":0}},{"line":10,"address":[309188],"length":1,"stats":{"Line":0}}],"covered":0,"coverable":3},{"path":["/","home","runner","work","influxdb-rust","influxdb-rust","influxdb_derive","src","writeable.rs"],"content":"use proc_macro2::TokenStream;\nuse quote::{format_ident, quote};\nuse std::convert::TryFrom;\nuse syn::{\n    parse::{Parse, ParseStream},\n    punctuated::Punctuated,\n    Data, DeriveInput, Field, Fields, Ident, Meta, Token,\n};\n\n#[derive(Debug)]\nstruct WriteableField {\n    ident: Ident,\n    is_tag: bool,\n    is_ignore: bool,\n}\n\nmod kw {\n    use syn::custom_keyword;\n\n    custom_keyword!(tag);\n    custom_keyword!(ignore);\n}\n\n#[allow(dead_code)] // TODO do we need to store the keywords?\nenum FieldAttr {\n    Tag(kw::tag),\n    Ignore(kw::ignore),\n}\n\nimpl Parse for FieldAttr {\n    fn parse(input: ParseStream<'_>) -> syn::Result<Self> {\n        let lookahead = input.lookahead1();\n        if lookahead.peek(kw::tag) {\n            Ok(Self::Tag(input.parse()?))\n        } else if lookahead.peek(kw::ignore) {\n            Ok(Self::Ignore(input.parse()?))\n        } else {\n            Err(lookahead.error())\n        }\n    }\n}\n\nstruct FieldAttrs(Punctuated<FieldAttr, Token![,]>);\n\nimpl Parse for FieldAttrs {\n    fn parse(input: ParseStream<'_>) -> syn::Result<Self> {\n        Ok(Self(Punctuated::parse_terminated(input)?))\n    }\n}\n\nimpl TryFrom<Field> for WriteableField {\n    type Error = syn::Error;\n\n    fn try_from(field: Field) -> syn::Result<WriteableField> {\n        let ident = field.ident.expect(\"fields without ident are not supported\");\n        let mut is_tag = false;\n        let mut is_ignore = false;\n\n        for attr in field.attrs {\n            match attr.meta {\n                Meta::List(list) if list.path.is_ident(\"influxdb\") => {\n                    for attr in syn::parse2::<FieldAttrs>(list.tokens)?.0 {\n                        match attr {\n                            FieldAttr::Tag(_) => is_tag = true,\n                            FieldAttr::Ignore(_) => is_ignore = true,\n                        }\n                    }\n                }\n                _ => {}\n            }\n        }\n\n        Ok(WriteableField {\n            ident,\n            is_tag,\n            is_ignore,\n        })\n    }\n}\n\npub fn expand_writeable(input: DeriveInput) -> syn::Result<TokenStream> {\n    let ident = input.ident;\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n\n    let fields = match input.data {\n        Data::Struct(strukt) => strukt.fields,\n        Data::Enum(inum) => {\n            return Err(syn::Error::new(\n                inum.enum_token.span,\n                \"#[derive(InfluxDbWriteable)] can only be used on structs\",\n            ))\n        }\n        Data::Union(cdu) => {\n            return Err(syn::Error::new(\n                cdu.union_token.span,\n                \"#[derive(InfluxDbWriteable)] can only be used on structs\",\n            ))\n        }\n    };\n\n    let time_field = format_ident!(\"time\");\n    let time_field_str = time_field.to_string();\n    #[allow(clippy::cmp_owned)] // that's not how idents work clippy\n    let fields = match fields {\n        Fields::Named(fields) => fields\n            .named\n            .into_iter()\n            .filter_map(|f| {\n                WriteableField::try_from(f)\n                    .map(|wf| {\n                        if !wf.is_ignore && wf.ident.to_string() != time_field_str {\n                            let ident = wf.ident;\n                            Some(match wf.is_tag {\n                                true => quote!(query.add_tag(stringify!(#ident), self.#ident)),\n                                false => quote!(query.add_field(stringify!(#ident), self.#ident)),\n                            })\n                        } else {\n                            None\n                        }\n                    })\n                    .transpose()\n            })\n            .collect::<syn::Result<Vec<_>>>()?,\n        _ => panic!(\"a struct without named fields is not supported\"),\n    };\n\n    Ok(quote! {\n        impl #impl_generics ::influxdb::InfluxDbWriteable for #ident #ty_generics #where_clause {\n            fn into_query<I: Into<String>>(self, name: I) -> ::influxdb::WriteQuery {\n                let timestamp: ::influxdb::Timestamp = self.#time_field.into();\n                let mut query = timestamp.into_query(name);\n                #(\n                    query = #fields;\n                )*\n                query\n            }\n        }\n    })\n}\n","traces":[{"line":31,"address":[300167,300138,299360],"length":1,"stats":{"Line":0}},{"line":32,"address":[299390],"length":1,"stats":{"Line":0}},{"line":33,"address":[299486,299430,300092],"length":1,"stats":{"Line":0}},{"line":34,"address":[300133,299521,299940],"length":1,"stats":{"Line":0}},{"line":35,"address":[299535,299497,299896],"length":1,"stats":{"Line":0}},{"line":36,"address":[299641,299723,299901],"length":1,"stats":{"Line":0}},{"line":38,"address":[299541,299653],"length":1,"stats":{"Line":0}},{"line":46,"address":[300176],"length":1,"stats":{"Line":0}},{"line":47,"address":[300201],"length":1,"stats":{"Line":0}},{"line":54,"address":[301178,300480],"length":1,"stats":{"Line":0}},{"line":55,"address":[300502],"length":1,"stats":{"Line":0}},{"line":56,"address":[300632],"length":1,"stats":{"Line":0}},{"line":57,"address":[300637],"length":1,"stats":{"Line":0}},{"line":59,"address":[302327,300745,300864,300642],"length":1,"stats":{"Line":0}},{"line":60,"address":[300926],"length":1,"stats":{"Line":0}},{"line":61,"address":[301346,301197],"length":1,"stats":{"Line":0}},{"line":62,"address":[301899,301456,301571],"length":1,"stats":{"Line":0}},{"line":63,"address":[301968],"length":1,"stats":{"Line":0}},{"line":64,"address":[302027],"length":1,"stats":{"Line":0}},{"line":65,"address":[302017],"length":1,"stats":{"Line":0}},{"line":73,"address":[301029],"length":1,"stats":{"Line":0}},{"line":74,"address":[300995],"length":1,"stats":{"Line":0}},{"line":75,"address":[301021],"length":1,"stats":{"Line":0}},{"line":76,"address":[301025],"length":1,"stats":{"Line":0}},{"line":81,"address":[302416,306412],"length":1,"stats":{"Line":0}},{"line":82,"address":[302438],"length":1,"stats":{"Line":0}},{"line":83,"address":[302518,302587],"length":1,"stats":{"Line":0}},{"line":85,"address":[302629],"length":1,"stats":{"Line":0}},{"line":86,"address":[302694],"length":1,"stats":{"Line":0}},{"line":87,"address":[302867],"length":1,"stats":{"Line":0}},{"line":88,"address":[302918,306702],"length":1,"stats":{"Line":0}},{"line":89,"address":[302911],"length":1,"stats":{"Line":0}},{"line":93,"address":[302957],"length":1,"stats":{"Line":0}},{"line":94,"address":[306810,303020],"length":1,"stats":{"Line":0}},{"line":95,"address":[303013],"length":1,"stats":{"Line":0}},{"line":101,"address":[303112,302833],"length":1,"stats":{"Line":0}},{"line":102,"address":[303333],"length":1,"stats":{"Line":0}},{"line":104,"address":[303360],"length":1,"stats":{"Line":0}},{"line":105,"address":[303371,303633,303691],"length":1,"stats":{"Line":0}},{"line":108,"address":[307232,303587],"length":1,"stats":{"Line":0}},{"line":109,"address":[307267],"length":1,"stats":{"Line":0}},{"line":110,"address":[308973,307282,308348,307328],"length":1,"stats":{"Line":0}},{"line":111,"address":[307462,307355,307416],"length":1,"stats":{"Line":0}},{"line":112,"address":[307571],"length":1,"stats":{"Line":0}},{"line":113,"address":[308312,307605],"length":1,"stats":{"Line":0}},{"line":114,"address":[307630,308354],"length":1,"stats":{"Line":0}},{"line":115,"address":[307690,307611],"length":1,"stats":{"Line":0}},{"line":118,"address":[307403],"length":1,"stats":{"Line":0}},{"line":121,"address":[307305],"length":1,"stats":{"Line":0}},{"line":127,"address":[303843,306431,303784],"length":1,"stats":{"Line":0}}],"covered":0,"coverable":50}],"coverage":67.29957805907173,"covered":319,"coverable":474}